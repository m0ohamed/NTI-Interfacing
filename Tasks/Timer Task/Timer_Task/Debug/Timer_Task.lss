
Timer_Task.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000755c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000194  00800060  0000755c  000075f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  008001f4  008001f4  00007784  2**0
                  ALLOC
  3 .stab         00004560  00000000  00000000  00007784  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001cd8  00000000  00000000  0000bce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000d9bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  0000db5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002ce6  00000000  00000000  0000dd4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001354  00000000  00000000  00010a32  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001308  00000000  00000000  00011d86  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00013090  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000340  00000000  00000000  00013250  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000021ec  00000000  00000000  00013590  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  0001577c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 b9 18 	jmp	0x3172	; 0x3172 <__vector_4>
      14:	0c 94 e6 18 	jmp	0x31cc	; 0x31cc <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 13 19 	jmp	0x3226	; 0x3226 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 40 19 	jmp	0x3280	; 0x3280 <__vector_9>
      28:	0c 94 6d 19 	jmp	0x32da	; 0x32da <__vector_10>
      2c:	0c 94 9a 19 	jmp	0x3334	; 0x3334 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	f5 e7       	ldi	r31, 0x75	; 117
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3f       	cpi	r26, 0xF4	; 244
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 ef       	ldi	r26, 0xF4	; 244
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 30       	cpi	r26, 0x05	; 5
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5f 39 	call	0x72be	; 0x72be <main>
      8a:	0c 94 ac 3a 	jmp	0x7558	; 0x7558 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__ashldi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__ashldi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__ashldi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__ashldi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	49 81       	ldd	r20, Y+1	; 0x01
      e4:	5a 81       	ldd	r21, Y+2	; 0x02
      e6:	6b 81       	ldd	r22, Y+3	; 0x03
      e8:	7c 81       	ldd	r23, Y+4	; 0x04
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__ashldi3+0x7c>
      ee:	19 86       	std	Y+9, r1	; 0x09
      f0:	1a 86       	std	Y+10, r1	; 0x0a
      f2:	1b 86       	std	Y+11, r1	; 0x0b
      f4:	1c 86       	std	Y+12, r1	; 0x0c
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__ashldi3+0x76>
     100:	44 0f       	add	r20, r20
     102:	55 1f       	adc	r21, r21
     104:	66 1f       	adc	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__ashldi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__ashldi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__ashldi3+0x94>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__ashldi3+0x8c>
     12a:	89 87       	std	Y+9, r24	; 0x09
     12c:	9a 87       	std	Y+10, r25	; 0x0a
     12e:	ab 87       	std	Y+11, r26	; 0x0b
     130:	bc 87       	std	Y+12, r27	; 0x0c
     132:	04 c0       	rjmp	.+8      	; 0x13c <__ashldi3+0xaa>
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	57 95       	ror	r21
     13a:	47 95       	ror	r20
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__ashldi3+0xa2>
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	9e 81       	ldd	r25, Y+6	; 0x06
     144:	af 81       	ldd	r26, Y+7	; 0x07
     146:	b8 85       	ldd	r27, Y+8	; 0x08
     148:	04 c0       	rjmp	.+8      	; 0x152 <__ashldi3+0xc0>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__ashldi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	4d 87       	std	Y+13, r20	; 0x0d
     160:	5e 87       	std	Y+14, r21	; 0x0e
     162:	6f 87       	std	Y+15, r22	; 0x0f
     164:	78 8b       	std	Y+16, r23	; 0x10
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__fixunssfsi>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	7b 01       	movw	r14, r22
     19a:	8c 01       	movw	r16, r24
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 ad 10 	call	0x215a	; 0x215a <__gesf2>
     1a8:	88 23       	and	r24, r24
     1aa:	8c f0       	brlt	.+34     	; 0x1ce <__fixunssfsi+0x3e>
     1ac:	c8 01       	movw	r24, r16
     1ae:	b7 01       	movw	r22, r14
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 e0       	ldi	r20, 0x00	; 0
     1b6:	5f e4       	ldi	r21, 0x4F	; 79
     1b8:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <__subsf3>
     1bc:	0e 94 0d 11 	call	0x221a	; 0x221a <__fixsfsi>
     1c0:	9b 01       	movw	r18, r22
     1c2:	ac 01       	movw	r20, r24
     1c4:	20 50       	subi	r18, 0x00	; 0
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 48       	sbci	r21, 0x80	; 128
     1cc:	06 c0       	rjmp	.+12     	; 0x1da <__fixunssfsi+0x4a>
     1ce:	c8 01       	movw	r24, r16
     1d0:	b7 01       	movw	r22, r14
     1d2:	0e 94 0d 11 	call	0x221a	; 0x221a <__fixsfsi>
     1d6:	9b 01       	movw	r18, r22
     1d8:	ac 01       	movw	r20, r24
     1da:	b9 01       	movw	r22, r18
     1dc:	ca 01       	movw	r24, r20
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	ef 90       	pop	r14
     1e6:	08 95       	ret

000001e8 <__udivdi3>:
     1e8:	ae e5       	ldi	r26, 0x5E	; 94
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	ea ef       	ldi	r30, 0xFA	; 250
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	0c 94 75 3a 	jmp	0x74ea	; 0x74ea <__prologue_saves__>
     1f4:	a8 e0       	ldi	r26, 0x08	; 8
     1f6:	4e 01       	movw	r8, r28
     1f8:	08 94       	sec
     1fa:	81 1c       	adc	r8, r1
     1fc:	91 1c       	adc	r9, r1
     1fe:	f4 01       	movw	r30, r8
     200:	6a 2e       	mov	r6, r26
     202:	11 92       	st	Z+, r1
     204:	6a 94       	dec	r6
     206:	e9 f7       	brne	.-6      	; 0x202 <__udivdi3+0x1a>
     208:	29 83       	std	Y+1, r18	; 0x01
     20a:	3a 83       	std	Y+2, r19	; 0x02
     20c:	4b 83       	std	Y+3, r20	; 0x03
     20e:	5c 83       	std	Y+4, r21	; 0x04
     210:	6d 83       	std	Y+5, r22	; 0x05
     212:	7e 83       	std	Y+6, r23	; 0x06
     214:	8f 83       	std	Y+7, r24	; 0x07
     216:	98 87       	std	Y+8, r25	; 0x08
     218:	ce 01       	movw	r24, r28
     21a:	09 96       	adiw	r24, 0x09	; 9
     21c:	fc 01       	movw	r30, r24
     21e:	11 92       	st	Z+, r1
     220:	aa 95       	dec	r26
     222:	e9 f7       	brne	.-6      	; 0x21e <__udivdi3+0x36>
     224:	a9 86       	std	Y+9, r10	; 0x09
     226:	ba 86       	std	Y+10, r11	; 0x0a
     228:	cb 86       	std	Y+11, r12	; 0x0b
     22a:	dc 86       	std	Y+12, r13	; 0x0c
     22c:	ed 86       	std	Y+13, r14	; 0x0d
     22e:	fe 86       	std	Y+14, r15	; 0x0e
     230:	0f 87       	std	Y+15, r16	; 0x0f
     232:	18 8b       	std	Y+16, r17	; 0x10
     234:	29 84       	ldd	r2, Y+9	; 0x09
     236:	3a 84       	ldd	r3, Y+10	; 0x0a
     238:	4b 84       	ldd	r4, Y+11	; 0x0b
     23a:	5c 84       	ldd	r5, Y+12	; 0x0c
     23c:	ed 84       	ldd	r14, Y+13	; 0x0d
     23e:	fe 84       	ldd	r15, Y+14	; 0x0e
     240:	0f 85       	ldd	r16, Y+15	; 0x0f
     242:	18 89       	ldd	r17, Y+16	; 0x10
     244:	69 80       	ldd	r6, Y+1	; 0x01
     246:	7a 80       	ldd	r7, Y+2	; 0x02
     248:	8b 80       	ldd	r8, Y+3	; 0x03
     24a:	9c 80       	ldd	r9, Y+4	; 0x04
     24c:	6d a6       	std	Y+45, r6	; 0x2d
     24e:	7e a6       	std	Y+46, r7	; 0x2e
     250:	8f a6       	std	Y+47, r8	; 0x2f
     252:	98 aa       	std	Y+48, r9	; 0x30
     254:	6d 80       	ldd	r6, Y+5	; 0x05
     256:	7e 80       	ldd	r7, Y+6	; 0x06
     258:	8f 80       	ldd	r8, Y+7	; 0x07
     25a:	98 84       	ldd	r9, Y+8	; 0x08
     25c:	e1 14       	cp	r14, r1
     25e:	f1 04       	cpc	r15, r1
     260:	01 05       	cpc	r16, r1
     262:	11 05       	cpc	r17, r1
     264:	09 f0       	breq	.+2      	; 0x268 <__udivdi3+0x80>
     266:	b3 c3       	rjmp	.+1894   	; 0x9ce <__stack+0x16f>
     268:	62 14       	cp	r6, r2
     26a:	73 04       	cpc	r7, r3
     26c:	84 04       	cpc	r8, r4
     26e:	95 04       	cpc	r9, r5
     270:	08 f0       	brcs	.+2      	; 0x274 <__udivdi3+0x8c>
     272:	3d c1       	rjmp	.+634    	; 0x4ee <__udivdi3+0x306>
     274:	00 e0       	ldi	r16, 0x00	; 0
     276:	20 16       	cp	r2, r16
     278:	00 e0       	ldi	r16, 0x00	; 0
     27a:	30 06       	cpc	r3, r16
     27c:	01 e0       	ldi	r16, 0x01	; 1
     27e:	40 06       	cpc	r4, r16
     280:	00 e0       	ldi	r16, 0x00	; 0
     282:	50 06       	cpc	r5, r16
     284:	88 f4       	brcc	.+34     	; 0x2a8 <__udivdi3+0xc0>
     286:	1f ef       	ldi	r17, 0xFF	; 255
     288:	21 16       	cp	r2, r17
     28a:	31 04       	cpc	r3, r1
     28c:	41 04       	cpc	r4, r1
     28e:	51 04       	cpc	r5, r1
     290:	39 f0       	breq	.+14     	; 0x2a0 <__udivdi3+0xb8>
     292:	30 f0       	brcs	.+12     	; 0x2a0 <__udivdi3+0xb8>
     294:	48 e0       	ldi	r20, 0x08	; 8
     296:	e4 2e       	mov	r14, r20
     298:	f1 2c       	mov	r15, r1
     29a:	01 2d       	mov	r16, r1
     29c:	11 2d       	mov	r17, r1
     29e:	18 c0       	rjmp	.+48     	; 0x2d0 <__udivdi3+0xe8>
     2a0:	ee 24       	eor	r14, r14
     2a2:	ff 24       	eor	r15, r15
     2a4:	87 01       	movw	r16, r14
     2a6:	14 c0       	rjmp	.+40     	; 0x2d0 <__udivdi3+0xe8>
     2a8:	20 e0       	ldi	r18, 0x00	; 0
     2aa:	22 16       	cp	r2, r18
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	32 06       	cpc	r3, r18
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	42 06       	cpc	r4, r18
     2b4:	21 e0       	ldi	r18, 0x01	; 1
     2b6:	52 06       	cpc	r5, r18
     2b8:	30 f0       	brcs	.+12     	; 0x2c6 <__udivdi3+0xde>
     2ba:	38 e1       	ldi	r19, 0x18	; 24
     2bc:	e3 2e       	mov	r14, r19
     2be:	f1 2c       	mov	r15, r1
     2c0:	01 2d       	mov	r16, r1
     2c2:	11 2d       	mov	r17, r1
     2c4:	05 c0       	rjmp	.+10     	; 0x2d0 <__udivdi3+0xe8>
     2c6:	20 e1       	ldi	r18, 0x10	; 16
     2c8:	e2 2e       	mov	r14, r18
     2ca:	f1 2c       	mov	r15, r1
     2cc:	01 2d       	mov	r16, r1
     2ce:	11 2d       	mov	r17, r1
     2d0:	d2 01       	movw	r26, r4
     2d2:	c1 01       	movw	r24, r2
     2d4:	0e 2c       	mov	r0, r14
     2d6:	04 c0       	rjmp	.+8      	; 0x2e0 <__udivdi3+0xf8>
     2d8:	b6 95       	lsr	r27
     2da:	a7 95       	ror	r26
     2dc:	97 95       	ror	r25
     2de:	87 95       	ror	r24
     2e0:	0a 94       	dec	r0
     2e2:	d2 f7       	brpl	.-12     	; 0x2d8 <__udivdi3+0xf0>
     2e4:	83 52       	subi	r24, 0x23	; 35
     2e6:	9f 4f       	sbci	r25, 0xFF	; 255
     2e8:	dc 01       	movw	r26, r24
     2ea:	2c 91       	ld	r18, X
     2ec:	80 e2       	ldi	r24, 0x20	; 32
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	a0 e0       	ldi	r26, 0x00	; 0
     2f2:	b0 e0       	ldi	r27, 0x00	; 0
     2f4:	8e 19       	sub	r24, r14
     2f6:	9f 09       	sbc	r25, r15
     2f8:	a0 0b       	sbc	r26, r16
     2fa:	b1 0b       	sbc	r27, r17
     2fc:	7c 01       	movw	r14, r24
     2fe:	8d 01       	movw	r16, r26
     300:	e2 1a       	sub	r14, r18
     302:	f1 08       	sbc	r15, r1
     304:	01 09       	sbc	r16, r1
     306:	11 09       	sbc	r17, r1
     308:	e1 14       	cp	r14, r1
     30a:	f1 04       	cpc	r15, r1
     30c:	01 05       	cpc	r16, r1
     30e:	11 05       	cpc	r17, r1
     310:	a1 f1       	breq	.+104    	; 0x37a <__udivdi3+0x192>
     312:	0e 2c       	mov	r0, r14
     314:	04 c0       	rjmp	.+8      	; 0x31e <__udivdi3+0x136>
     316:	22 0c       	add	r2, r2
     318:	33 1c       	adc	r3, r3
     31a:	44 1c       	adc	r4, r4
     31c:	55 1c       	adc	r5, r5
     31e:	0a 94       	dec	r0
     320:	d2 f7       	brpl	.-12     	; 0x316 <__udivdi3+0x12e>
     322:	a4 01       	movw	r20, r8
     324:	93 01       	movw	r18, r6
     326:	0e 2c       	mov	r0, r14
     328:	04 c0       	rjmp	.+8      	; 0x332 <__udivdi3+0x14a>
     32a:	22 0f       	add	r18, r18
     32c:	33 1f       	adc	r19, r19
     32e:	44 1f       	adc	r20, r20
     330:	55 1f       	adc	r21, r21
     332:	0a 94       	dec	r0
     334:	d2 f7       	brpl	.-12     	; 0x32a <__udivdi3+0x142>
     336:	80 e2       	ldi	r24, 0x20	; 32
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	8e 19       	sub	r24, r14
     33c:	9f 09       	sbc	r25, r15
     33e:	6d a4       	ldd	r6, Y+45	; 0x2d
     340:	7e a4       	ldd	r7, Y+46	; 0x2e
     342:	8f a4       	ldd	r8, Y+47	; 0x2f
     344:	98 a8       	ldd	r9, Y+48	; 0x30
     346:	04 c0       	rjmp	.+8      	; 0x350 <__udivdi3+0x168>
     348:	96 94       	lsr	r9
     34a:	87 94       	ror	r8
     34c:	77 94       	ror	r7
     34e:	67 94       	ror	r6
     350:	8a 95       	dec	r24
     352:	d2 f7       	brpl	.-12     	; 0x348 <__udivdi3+0x160>
     354:	62 2a       	or	r6, r18
     356:	73 2a       	or	r7, r19
     358:	84 2a       	or	r8, r20
     35a:	95 2a       	or	r9, r21
     35c:	ad a4       	ldd	r10, Y+45	; 0x2d
     35e:	be a4       	ldd	r11, Y+46	; 0x2e
     360:	cf a4       	ldd	r12, Y+47	; 0x2f
     362:	d8 a8       	ldd	r13, Y+48	; 0x30
     364:	04 c0       	rjmp	.+8      	; 0x36e <__udivdi3+0x186>
     366:	aa 0c       	add	r10, r10
     368:	bb 1c       	adc	r11, r11
     36a:	cc 1c       	adc	r12, r12
     36c:	dd 1c       	adc	r13, r13
     36e:	ea 94       	dec	r14
     370:	d2 f7       	brpl	.-12     	; 0x366 <__udivdi3+0x17e>
     372:	ad a6       	std	Y+45, r10	; 0x2d
     374:	be a6       	std	Y+46, r11	; 0x2e
     376:	cf a6       	std	Y+47, r12	; 0x2f
     378:	d8 aa       	std	Y+48, r13	; 0x30
     37a:	62 01       	movw	r12, r4
     37c:	ee 24       	eor	r14, r14
     37e:	ff 24       	eor	r15, r15
     380:	cd aa       	std	Y+53, r12	; 0x35
     382:	de aa       	std	Y+54, r13	; 0x36
     384:	ef aa       	std	Y+55, r14	; 0x37
     386:	f8 ae       	std	Y+56, r15	; 0x38
     388:	92 01       	movw	r18, r4
     38a:	81 01       	movw	r16, r2
     38c:	20 70       	andi	r18, 0x00	; 0
     38e:	30 70       	andi	r19, 0x00	; 0
     390:	09 af       	std	Y+57, r16	; 0x39
     392:	1a af       	std	Y+58, r17	; 0x3a
     394:	2b af       	std	Y+59, r18	; 0x3b
     396:	3c af       	std	Y+60, r19	; 0x3c
     398:	c4 01       	movw	r24, r8
     39a:	b3 01       	movw	r22, r6
     39c:	a7 01       	movw	r20, r14
     39e:	96 01       	movw	r18, r12
     3a0:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
     3a4:	7b 01       	movw	r14, r22
     3a6:	8c 01       	movw	r16, r24
     3a8:	c4 01       	movw	r24, r8
     3aa:	b3 01       	movw	r22, r6
     3ac:	2d a9       	ldd	r18, Y+53	; 0x35
     3ae:	3e a9       	ldd	r19, Y+54	; 0x36
     3b0:	4f a9       	ldd	r20, Y+55	; 0x37
     3b2:	58 ad       	ldd	r21, Y+56	; 0x38
     3b4:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
     3b8:	c9 01       	movw	r24, r18
     3ba:	da 01       	movw	r26, r20
     3bc:	3c 01       	movw	r6, r24
     3be:	4d 01       	movw	r8, r26
     3c0:	c4 01       	movw	r24, r8
     3c2:	b3 01       	movw	r22, r6
     3c4:	29 ad       	ldd	r18, Y+57	; 0x39
     3c6:	3a ad       	ldd	r19, Y+58	; 0x3a
     3c8:	4b ad       	ldd	r20, Y+59	; 0x3b
     3ca:	5c ad       	ldd	r21, Y+60	; 0x3c
     3cc:	0e 94 34 3a 	call	0x7468	; 0x7468 <__mulsi3>
     3d0:	9b 01       	movw	r18, r22
     3d2:	ac 01       	movw	r20, r24
     3d4:	87 01       	movw	r16, r14
     3d6:	ff 24       	eor	r15, r15
     3d8:	ee 24       	eor	r14, r14
     3da:	ad a4       	ldd	r10, Y+45	; 0x2d
     3dc:	be a4       	ldd	r11, Y+46	; 0x2e
     3de:	cf a4       	ldd	r12, Y+47	; 0x2f
     3e0:	d8 a8       	ldd	r13, Y+48	; 0x30
     3e2:	c6 01       	movw	r24, r12
     3e4:	aa 27       	eor	r26, r26
     3e6:	bb 27       	eor	r27, r27
     3e8:	57 01       	movw	r10, r14
     3ea:	68 01       	movw	r12, r16
     3ec:	a8 2a       	or	r10, r24
     3ee:	b9 2a       	or	r11, r25
     3f0:	ca 2a       	or	r12, r26
     3f2:	db 2a       	or	r13, r27
     3f4:	a2 16       	cp	r10, r18
     3f6:	b3 06       	cpc	r11, r19
     3f8:	c4 06       	cpc	r12, r20
     3fa:	d5 06       	cpc	r13, r21
     3fc:	e0 f4       	brcc	.+56     	; 0x436 <__udivdi3+0x24e>
     3fe:	08 94       	sec
     400:	61 08       	sbc	r6, r1
     402:	71 08       	sbc	r7, r1
     404:	81 08       	sbc	r8, r1
     406:	91 08       	sbc	r9, r1
     408:	a2 0c       	add	r10, r2
     40a:	b3 1c       	adc	r11, r3
     40c:	c4 1c       	adc	r12, r4
     40e:	d5 1c       	adc	r13, r5
     410:	a2 14       	cp	r10, r2
     412:	b3 04       	cpc	r11, r3
     414:	c4 04       	cpc	r12, r4
     416:	d5 04       	cpc	r13, r5
     418:	70 f0       	brcs	.+28     	; 0x436 <__udivdi3+0x24e>
     41a:	a2 16       	cp	r10, r18
     41c:	b3 06       	cpc	r11, r19
     41e:	c4 06       	cpc	r12, r20
     420:	d5 06       	cpc	r13, r21
     422:	48 f4       	brcc	.+18     	; 0x436 <__udivdi3+0x24e>
     424:	08 94       	sec
     426:	61 08       	sbc	r6, r1
     428:	71 08       	sbc	r7, r1
     42a:	81 08       	sbc	r8, r1
     42c:	91 08       	sbc	r9, r1
     42e:	a2 0c       	add	r10, r2
     430:	b3 1c       	adc	r11, r3
     432:	c4 1c       	adc	r12, r4
     434:	d5 1c       	adc	r13, r5
     436:	a2 1a       	sub	r10, r18
     438:	b3 0a       	sbc	r11, r19
     43a:	c4 0a       	sbc	r12, r20
     43c:	d5 0a       	sbc	r13, r21
     43e:	c6 01       	movw	r24, r12
     440:	b5 01       	movw	r22, r10
     442:	2d a9       	ldd	r18, Y+53	; 0x35
     444:	3e a9       	ldd	r19, Y+54	; 0x36
     446:	4f a9       	ldd	r20, Y+55	; 0x37
     448:	58 ad       	ldd	r21, Y+56	; 0x38
     44a:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
     44e:	7b 01       	movw	r14, r22
     450:	8c 01       	movw	r16, r24
     452:	c6 01       	movw	r24, r12
     454:	b5 01       	movw	r22, r10
     456:	2d a9       	ldd	r18, Y+53	; 0x35
     458:	3e a9       	ldd	r19, Y+54	; 0x36
     45a:	4f a9       	ldd	r20, Y+55	; 0x37
     45c:	58 ad       	ldd	r21, Y+56	; 0x38
     45e:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
     462:	c9 01       	movw	r24, r18
     464:	da 01       	movw	r26, r20
     466:	5c 01       	movw	r10, r24
     468:	6d 01       	movw	r12, r26
     46a:	c6 01       	movw	r24, r12
     46c:	b5 01       	movw	r22, r10
     46e:	29 ad       	ldd	r18, Y+57	; 0x39
     470:	3a ad       	ldd	r19, Y+58	; 0x3a
     472:	4b ad       	ldd	r20, Y+59	; 0x3b
     474:	5c ad       	ldd	r21, Y+60	; 0x3c
     476:	0e 94 34 3a 	call	0x7468	; 0x7468 <__mulsi3>
     47a:	9b 01       	movw	r18, r22
     47c:	ac 01       	movw	r20, r24
     47e:	87 01       	movw	r16, r14
     480:	ff 24       	eor	r15, r15
     482:	ee 24       	eor	r14, r14
     484:	8d a5       	ldd	r24, Y+45	; 0x2d
     486:	9e a5       	ldd	r25, Y+46	; 0x2e
     488:	af a5       	ldd	r26, Y+47	; 0x2f
     48a:	b8 a9       	ldd	r27, Y+48	; 0x30
     48c:	a0 70       	andi	r26, 0x00	; 0
     48e:	b0 70       	andi	r27, 0x00	; 0
     490:	e8 2a       	or	r14, r24
     492:	f9 2a       	or	r15, r25
     494:	0a 2b       	or	r16, r26
     496:	1b 2b       	or	r17, r27
     498:	e2 16       	cp	r14, r18
     49a:	f3 06       	cpc	r15, r19
     49c:	04 07       	cpc	r16, r20
     49e:	15 07       	cpc	r17, r21
     4a0:	c0 f4       	brcc	.+48     	; 0x4d2 <__udivdi3+0x2ea>
     4a2:	08 94       	sec
     4a4:	a1 08       	sbc	r10, r1
     4a6:	b1 08       	sbc	r11, r1
     4a8:	c1 08       	sbc	r12, r1
     4aa:	d1 08       	sbc	r13, r1
     4ac:	e2 0c       	add	r14, r2
     4ae:	f3 1c       	adc	r15, r3
     4b0:	04 1d       	adc	r16, r4
     4b2:	15 1d       	adc	r17, r5
     4b4:	e2 14       	cp	r14, r2
     4b6:	f3 04       	cpc	r15, r3
     4b8:	04 05       	cpc	r16, r4
     4ba:	15 05       	cpc	r17, r5
     4bc:	50 f0       	brcs	.+20     	; 0x4d2 <__udivdi3+0x2ea>
     4be:	e2 16       	cp	r14, r18
     4c0:	f3 06       	cpc	r15, r19
     4c2:	04 07       	cpc	r16, r20
     4c4:	15 07       	cpc	r17, r21
     4c6:	28 f4       	brcc	.+10     	; 0x4d2 <__udivdi3+0x2ea>
     4c8:	08 94       	sec
     4ca:	a1 08       	sbc	r10, r1
     4cc:	b1 08       	sbc	r11, r1
     4ce:	c1 08       	sbc	r12, r1
     4d0:	d1 08       	sbc	r13, r1
     4d2:	d3 01       	movw	r26, r6
     4d4:	99 27       	eor	r25, r25
     4d6:	88 27       	eor	r24, r24
     4d8:	86 01       	movw	r16, r12
     4da:	75 01       	movw	r14, r10
     4dc:	e8 2a       	or	r14, r24
     4de:	f9 2a       	or	r15, r25
     4e0:	0a 2b       	or	r16, r26
     4e2:	1b 2b       	or	r17, r27
     4e4:	e9 aa       	std	Y+49, r14	; 0x31
     4e6:	fa aa       	std	Y+50, r15	; 0x32
     4e8:	0b ab       	std	Y+51, r16	; 0x33
     4ea:	1c ab       	std	Y+52, r17	; 0x34
     4ec:	cf c4       	rjmp	.+2462   	; 0xe8c <__stack+0x62d>
     4ee:	21 14       	cp	r2, r1
     4f0:	31 04       	cpc	r3, r1
     4f2:	41 04       	cpc	r4, r1
     4f4:	51 04       	cpc	r5, r1
     4f6:	71 f4       	brne	.+28     	; 0x514 <__udivdi3+0x32c>
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	70 e0       	ldi	r23, 0x00	; 0
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	40 e0       	ldi	r20, 0x00	; 0
     506:	50 e0       	ldi	r21, 0x00	; 0
     508:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
     50c:	c9 01       	movw	r24, r18
     50e:	da 01       	movw	r26, r20
     510:	1c 01       	movw	r2, r24
     512:	2d 01       	movw	r4, r26
     514:	00 e0       	ldi	r16, 0x00	; 0
     516:	20 16       	cp	r2, r16
     518:	00 e0       	ldi	r16, 0x00	; 0
     51a:	30 06       	cpc	r3, r16
     51c:	01 e0       	ldi	r16, 0x01	; 1
     51e:	40 06       	cpc	r4, r16
     520:	00 e0       	ldi	r16, 0x00	; 0
     522:	50 06       	cpc	r5, r16
     524:	88 f4       	brcc	.+34     	; 0x548 <__udivdi3+0x360>
     526:	1f ef       	ldi	r17, 0xFF	; 255
     528:	21 16       	cp	r2, r17
     52a:	31 04       	cpc	r3, r1
     52c:	41 04       	cpc	r4, r1
     52e:	51 04       	cpc	r5, r1
     530:	31 f0       	breq	.+12     	; 0x53e <__udivdi3+0x356>
     532:	28 f0       	brcs	.+10     	; 0x53e <__udivdi3+0x356>
     534:	48 e0       	ldi	r20, 0x08	; 8
     536:	50 e0       	ldi	r21, 0x00	; 0
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	17 c0       	rjmp	.+46     	; 0x56c <__udivdi3+0x384>
     53e:	40 e0       	ldi	r20, 0x00	; 0
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	12 c0       	rjmp	.+36     	; 0x56c <__udivdi3+0x384>
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	22 16       	cp	r2, r18
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	32 06       	cpc	r3, r18
     550:	20 e0       	ldi	r18, 0x00	; 0
     552:	42 06       	cpc	r4, r18
     554:	21 e0       	ldi	r18, 0x01	; 1
     556:	52 06       	cpc	r5, r18
     558:	28 f0       	brcs	.+10     	; 0x564 <__udivdi3+0x37c>
     55a:	48 e1       	ldi	r20, 0x18	; 24
     55c:	50 e0       	ldi	r21, 0x00	; 0
     55e:	60 e0       	ldi	r22, 0x00	; 0
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	04 c0       	rjmp	.+8      	; 0x56c <__udivdi3+0x384>
     564:	40 e1       	ldi	r20, 0x10	; 16
     566:	50 e0       	ldi	r21, 0x00	; 0
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	d2 01       	movw	r26, r4
     56e:	c1 01       	movw	r24, r2
     570:	04 2e       	mov	r0, r20
     572:	04 c0       	rjmp	.+8      	; 0x57c <__udivdi3+0x394>
     574:	b6 95       	lsr	r27
     576:	a7 95       	ror	r26
     578:	97 95       	ror	r25
     57a:	87 95       	ror	r24
     57c:	0a 94       	dec	r0
     57e:	d2 f7       	brpl	.-12     	; 0x574 <__udivdi3+0x38c>
     580:	83 52       	subi	r24, 0x23	; 35
     582:	9f 4f       	sbci	r25, 0xFF	; 255
     584:	dc 01       	movw	r26, r24
     586:	2c 91       	ld	r18, X
     588:	e0 e2       	ldi	r30, 0x20	; 32
     58a:	ee 2e       	mov	r14, r30
     58c:	f1 2c       	mov	r15, r1
     58e:	01 2d       	mov	r16, r1
     590:	11 2d       	mov	r17, r1
     592:	d8 01       	movw	r26, r16
     594:	c7 01       	movw	r24, r14
     596:	84 1b       	sub	r24, r20
     598:	95 0b       	sbc	r25, r21
     59a:	a6 0b       	sbc	r26, r22
     59c:	b7 0b       	sbc	r27, r23
     59e:	82 1b       	sub	r24, r18
     5a0:	91 09       	sbc	r25, r1
     5a2:	a1 09       	sbc	r26, r1
     5a4:	b1 09       	sbc	r27, r1
     5a6:	00 97       	sbiw	r24, 0x00	; 0
     5a8:	a1 05       	cpc	r26, r1
     5aa:	b1 05       	cpc	r27, r1
     5ac:	61 f4       	brne	.+24     	; 0x5c6 <__udivdi3+0x3de>
     5ae:	64 01       	movw	r12, r8
     5b0:	53 01       	movw	r10, r6
     5b2:	a2 18       	sub	r10, r2
     5b4:	b3 08       	sbc	r11, r3
     5b6:	c4 08       	sbc	r12, r4
     5b8:	d5 08       	sbc	r13, r5
     5ba:	31 e0       	ldi	r19, 0x01	; 1
     5bc:	63 2e       	mov	r6, r19
     5be:	71 2c       	mov	r7, r1
     5c0:	81 2c       	mov	r8, r1
     5c2:	91 2c       	mov	r9, r1
     5c4:	1e c1       	rjmp	.+572    	; 0x802 <__udivdi3+0x61a>
     5c6:	6f 96       	adiw	r28, 0x1f	; 31
     5c8:	8f af       	std	Y+63, r24	; 0x3f
     5ca:	6f 97       	sbiw	r28, 0x1f	; 31
     5cc:	08 2e       	mov	r0, r24
     5ce:	04 c0       	rjmp	.+8      	; 0x5d8 <__udivdi3+0x3f0>
     5d0:	22 0c       	add	r2, r2
     5d2:	33 1c       	adc	r3, r3
     5d4:	44 1c       	adc	r4, r4
     5d6:	55 1c       	adc	r5, r5
     5d8:	0a 94       	dec	r0
     5da:	d2 f7       	brpl	.-12     	; 0x5d0 <__udivdi3+0x3e8>
     5dc:	ee 2d       	mov	r30, r14
     5de:	e8 1b       	sub	r30, r24
     5e0:	64 01       	movw	r12, r8
     5e2:	53 01       	movw	r10, r6
     5e4:	0e 2e       	mov	r0, r30
     5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <__udivdi3+0x408>
     5e8:	d6 94       	lsr	r13
     5ea:	c7 94       	ror	r12
     5ec:	b7 94       	ror	r11
     5ee:	a7 94       	ror	r10
     5f0:	0a 94       	dec	r0
     5f2:	d2 f7       	brpl	.-12     	; 0x5e8 <__udivdi3+0x400>
     5f4:	a4 01       	movw	r20, r8
     5f6:	93 01       	movw	r18, r6
     5f8:	6f 96       	adiw	r28, 0x1f	; 31
     5fa:	0f ac       	ldd	r0, Y+63	; 0x3f
     5fc:	6f 97       	sbiw	r28, 0x1f	; 31
     5fe:	04 c0       	rjmp	.+8      	; 0x608 <__udivdi3+0x420>
     600:	22 0f       	add	r18, r18
     602:	33 1f       	adc	r19, r19
     604:	44 1f       	adc	r20, r20
     606:	55 1f       	adc	r21, r21
     608:	0a 94       	dec	r0
     60a:	d2 f7       	brpl	.-12     	; 0x600 <__udivdi3+0x418>
     60c:	6d a4       	ldd	r6, Y+45	; 0x2d
     60e:	7e a4       	ldd	r7, Y+46	; 0x2e
     610:	8f a4       	ldd	r8, Y+47	; 0x2f
     612:	98 a8       	ldd	r9, Y+48	; 0x30
     614:	0e 2e       	mov	r0, r30
     616:	04 c0       	rjmp	.+8      	; 0x620 <__udivdi3+0x438>
     618:	96 94       	lsr	r9
     61a:	87 94       	ror	r8
     61c:	77 94       	ror	r7
     61e:	67 94       	ror	r6
     620:	0a 94       	dec	r0
     622:	d2 f7       	brpl	.-12     	; 0x618 <__udivdi3+0x430>
     624:	84 01       	movw	r16, r8
     626:	73 01       	movw	r14, r6
     628:	e2 2a       	or	r14, r18
     62a:	f3 2a       	or	r15, r19
     62c:	04 2b       	or	r16, r20
     62e:	15 2b       	or	r17, r21
     630:	e9 a6       	std	Y+41, r14	; 0x29
     632:	fa a6       	std	Y+42, r15	; 0x2a
     634:	0b a7       	std	Y+43, r16	; 0x2b
     636:	1c a7       	std	Y+44, r17	; 0x2c
     638:	32 01       	movw	r6, r4
     63a:	88 24       	eor	r8, r8
     63c:	99 24       	eor	r9, r9
     63e:	92 01       	movw	r18, r4
     640:	81 01       	movw	r16, r2
     642:	20 70       	andi	r18, 0x00	; 0
     644:	30 70       	andi	r19, 0x00	; 0
     646:	21 96       	adiw	r28, 0x01	; 1
     648:	0c af       	std	Y+60, r16	; 0x3c
     64a:	1d af       	std	Y+61, r17	; 0x3d
     64c:	2e af       	std	Y+62, r18	; 0x3e
     64e:	3f af       	std	Y+63, r19	; 0x3f
     650:	21 97       	sbiw	r28, 0x01	; 1
     652:	c6 01       	movw	r24, r12
     654:	b5 01       	movw	r22, r10
     656:	a4 01       	movw	r20, r8
     658:	93 01       	movw	r18, r6
     65a:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
     65e:	7b 01       	movw	r14, r22
     660:	8c 01       	movw	r16, r24
     662:	c6 01       	movw	r24, r12
     664:	b5 01       	movw	r22, r10
     666:	a4 01       	movw	r20, r8
     668:	93 01       	movw	r18, r6
     66a:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
     66e:	c9 01       	movw	r24, r18
     670:	da 01       	movw	r26, r20
     672:	25 96       	adiw	r28, 0x05	; 5
     674:	8c af       	std	Y+60, r24	; 0x3c
     676:	9d af       	std	Y+61, r25	; 0x3d
     678:	ae af       	std	Y+62, r26	; 0x3e
     67a:	bf af       	std	Y+63, r27	; 0x3f
     67c:	25 97       	sbiw	r28, 0x05	; 5
     67e:	bc 01       	movw	r22, r24
     680:	cd 01       	movw	r24, r26
     682:	21 96       	adiw	r28, 0x01	; 1
     684:	2c ad       	ldd	r18, Y+60	; 0x3c
     686:	3d ad       	ldd	r19, Y+61	; 0x3d
     688:	4e ad       	ldd	r20, Y+62	; 0x3e
     68a:	5f ad       	ldd	r21, Y+63	; 0x3f
     68c:	21 97       	sbiw	r28, 0x01	; 1
     68e:	0e 94 34 3a 	call	0x7468	; 0x7468 <__mulsi3>
     692:	9b 01       	movw	r18, r22
     694:	ac 01       	movw	r20, r24
     696:	87 01       	movw	r16, r14
     698:	ff 24       	eor	r15, r15
     69a:	ee 24       	eor	r14, r14
     69c:	a9 a4       	ldd	r10, Y+41	; 0x29
     69e:	ba a4       	ldd	r11, Y+42	; 0x2a
     6a0:	cb a4       	ldd	r12, Y+43	; 0x2b
     6a2:	dc a4       	ldd	r13, Y+44	; 0x2c
     6a4:	c6 01       	movw	r24, r12
     6a6:	aa 27       	eor	r26, r26
     6a8:	bb 27       	eor	r27, r27
     6aa:	5c 01       	movw	r10, r24
     6ac:	6d 01       	movw	r12, r26
     6ae:	ae 28       	or	r10, r14
     6b0:	bf 28       	or	r11, r15
     6b2:	c0 2a       	or	r12, r16
     6b4:	d1 2a       	or	r13, r17
     6b6:	a2 16       	cp	r10, r18
     6b8:	b3 06       	cpc	r11, r19
     6ba:	c4 06       	cpc	r12, r20
     6bc:	d5 06       	cpc	r13, r21
     6be:	60 f5       	brcc	.+88     	; 0x718 <__udivdi3+0x530>
     6c0:	25 96       	adiw	r28, 0x05	; 5
     6c2:	6c ad       	ldd	r22, Y+60	; 0x3c
     6c4:	7d ad       	ldd	r23, Y+61	; 0x3d
     6c6:	8e ad       	ldd	r24, Y+62	; 0x3e
     6c8:	9f ad       	ldd	r25, Y+63	; 0x3f
     6ca:	25 97       	sbiw	r28, 0x05	; 5
     6cc:	61 50       	subi	r22, 0x01	; 1
     6ce:	70 40       	sbci	r23, 0x00	; 0
     6d0:	80 40       	sbci	r24, 0x00	; 0
     6d2:	90 40       	sbci	r25, 0x00	; 0
     6d4:	25 96       	adiw	r28, 0x05	; 5
     6d6:	6c af       	std	Y+60, r22	; 0x3c
     6d8:	7d af       	std	Y+61, r23	; 0x3d
     6da:	8e af       	std	Y+62, r24	; 0x3e
     6dc:	9f af       	std	Y+63, r25	; 0x3f
     6de:	25 97       	sbiw	r28, 0x05	; 5
     6e0:	a2 0c       	add	r10, r2
     6e2:	b3 1c       	adc	r11, r3
     6e4:	c4 1c       	adc	r12, r4
     6e6:	d5 1c       	adc	r13, r5
     6e8:	a2 14       	cp	r10, r2
     6ea:	b3 04       	cpc	r11, r3
     6ec:	c4 04       	cpc	r12, r4
     6ee:	d5 04       	cpc	r13, r5
     6f0:	98 f0       	brcs	.+38     	; 0x718 <__udivdi3+0x530>
     6f2:	a2 16       	cp	r10, r18
     6f4:	b3 06       	cpc	r11, r19
     6f6:	c4 06       	cpc	r12, r20
     6f8:	d5 06       	cpc	r13, r21
     6fa:	70 f4       	brcc	.+28     	; 0x718 <__udivdi3+0x530>
     6fc:	61 50       	subi	r22, 0x01	; 1
     6fe:	70 40       	sbci	r23, 0x00	; 0
     700:	80 40       	sbci	r24, 0x00	; 0
     702:	90 40       	sbci	r25, 0x00	; 0
     704:	25 96       	adiw	r28, 0x05	; 5
     706:	6c af       	std	Y+60, r22	; 0x3c
     708:	7d af       	std	Y+61, r23	; 0x3d
     70a:	8e af       	std	Y+62, r24	; 0x3e
     70c:	9f af       	std	Y+63, r25	; 0x3f
     70e:	25 97       	sbiw	r28, 0x05	; 5
     710:	a2 0c       	add	r10, r2
     712:	b3 1c       	adc	r11, r3
     714:	c4 1c       	adc	r12, r4
     716:	d5 1c       	adc	r13, r5
     718:	a2 1a       	sub	r10, r18
     71a:	b3 0a       	sbc	r11, r19
     71c:	c4 0a       	sbc	r12, r20
     71e:	d5 0a       	sbc	r13, r21
     720:	c6 01       	movw	r24, r12
     722:	b5 01       	movw	r22, r10
     724:	a4 01       	movw	r20, r8
     726:	93 01       	movw	r18, r6
     728:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
     72c:	7b 01       	movw	r14, r22
     72e:	8c 01       	movw	r16, r24
     730:	c6 01       	movw	r24, r12
     732:	b5 01       	movw	r22, r10
     734:	a4 01       	movw	r20, r8
     736:	93 01       	movw	r18, r6
     738:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
     73c:	c9 01       	movw	r24, r18
     73e:	da 01       	movw	r26, r20
     740:	3c 01       	movw	r6, r24
     742:	4d 01       	movw	r8, r26
     744:	c4 01       	movw	r24, r8
     746:	b3 01       	movw	r22, r6
     748:	21 96       	adiw	r28, 0x01	; 1
     74a:	2c ad       	ldd	r18, Y+60	; 0x3c
     74c:	3d ad       	ldd	r19, Y+61	; 0x3d
     74e:	4e ad       	ldd	r20, Y+62	; 0x3e
     750:	5f ad       	ldd	r21, Y+63	; 0x3f
     752:	21 97       	sbiw	r28, 0x01	; 1
     754:	0e 94 34 3a 	call	0x7468	; 0x7468 <__mulsi3>
     758:	9b 01       	movw	r18, r22
     75a:	ac 01       	movw	r20, r24
     75c:	87 01       	movw	r16, r14
     75e:	ff 24       	eor	r15, r15
     760:	ee 24       	eor	r14, r14
     762:	89 a5       	ldd	r24, Y+41	; 0x29
     764:	9a a5       	ldd	r25, Y+42	; 0x2a
     766:	ab a5       	ldd	r26, Y+43	; 0x2b
     768:	bc a5       	ldd	r27, Y+44	; 0x2c
     76a:	a0 70       	andi	r26, 0x00	; 0
     76c:	b0 70       	andi	r27, 0x00	; 0
     76e:	57 01       	movw	r10, r14
     770:	68 01       	movw	r12, r16
     772:	a8 2a       	or	r10, r24
     774:	b9 2a       	or	r11, r25
     776:	ca 2a       	or	r12, r26
     778:	db 2a       	or	r13, r27
     77a:	a2 16       	cp	r10, r18
     77c:	b3 06       	cpc	r11, r19
     77e:	c4 06       	cpc	r12, r20
     780:	d5 06       	cpc	r13, r21
     782:	e0 f4       	brcc	.+56     	; 0x7bc <__udivdi3+0x5d4>
     784:	08 94       	sec
     786:	61 08       	sbc	r6, r1
     788:	71 08       	sbc	r7, r1
     78a:	81 08       	sbc	r8, r1
     78c:	91 08       	sbc	r9, r1
     78e:	a2 0c       	add	r10, r2
     790:	b3 1c       	adc	r11, r3
     792:	c4 1c       	adc	r12, r4
     794:	d5 1c       	adc	r13, r5
     796:	a2 14       	cp	r10, r2
     798:	b3 04       	cpc	r11, r3
     79a:	c4 04       	cpc	r12, r4
     79c:	d5 04       	cpc	r13, r5
     79e:	70 f0       	brcs	.+28     	; 0x7bc <__udivdi3+0x5d4>
     7a0:	a2 16       	cp	r10, r18
     7a2:	b3 06       	cpc	r11, r19
     7a4:	c4 06       	cpc	r12, r20
     7a6:	d5 06       	cpc	r13, r21
     7a8:	48 f4       	brcc	.+18     	; 0x7bc <__udivdi3+0x5d4>
     7aa:	08 94       	sec
     7ac:	61 08       	sbc	r6, r1
     7ae:	71 08       	sbc	r7, r1
     7b0:	81 08       	sbc	r8, r1
     7b2:	91 08       	sbc	r9, r1
     7b4:	a2 0c       	add	r10, r2
     7b6:	b3 1c       	adc	r11, r3
     7b8:	c4 1c       	adc	r12, r4
     7ba:	d5 1c       	adc	r13, r5
     7bc:	8d a5       	ldd	r24, Y+45	; 0x2d
     7be:	9e a5       	ldd	r25, Y+46	; 0x2e
     7c0:	af a5       	ldd	r26, Y+47	; 0x2f
     7c2:	b8 a9       	ldd	r27, Y+48	; 0x30
     7c4:	6f 96       	adiw	r28, 0x1f	; 31
     7c6:	0f ac       	ldd	r0, Y+63	; 0x3f
     7c8:	6f 97       	sbiw	r28, 0x1f	; 31
     7ca:	04 c0       	rjmp	.+8      	; 0x7d4 <__udivdi3+0x5ec>
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	aa 1f       	adc	r26, r26
     7d2:	bb 1f       	adc	r27, r27
     7d4:	0a 94       	dec	r0
     7d6:	d2 f7       	brpl	.-12     	; 0x7cc <__udivdi3+0x5e4>
     7d8:	8d a7       	std	Y+45, r24	; 0x2d
     7da:	9e a7       	std	Y+46, r25	; 0x2e
     7dc:	af a7       	std	Y+47, r26	; 0x2f
     7de:	b8 ab       	std	Y+48, r27	; 0x30
     7e0:	a2 1a       	sub	r10, r18
     7e2:	b3 0a       	sbc	r11, r19
     7e4:	c4 0a       	sbc	r12, r20
     7e6:	d5 0a       	sbc	r13, r21
     7e8:	25 96       	adiw	r28, 0x05	; 5
     7ea:	ec ac       	ldd	r14, Y+60	; 0x3c
     7ec:	fd ac       	ldd	r15, Y+61	; 0x3d
     7ee:	0e ad       	ldd	r16, Y+62	; 0x3e
     7f0:	1f ad       	ldd	r17, Y+63	; 0x3f
     7f2:	25 97       	sbiw	r28, 0x05	; 5
     7f4:	d7 01       	movw	r26, r14
     7f6:	99 27       	eor	r25, r25
     7f8:	88 27       	eor	r24, r24
     7fa:	68 2a       	or	r6, r24
     7fc:	79 2a       	or	r7, r25
     7fe:	8a 2a       	or	r8, r26
     800:	9b 2a       	or	r9, r27
     802:	82 01       	movw	r16, r4
     804:	22 27       	eor	r18, r18
     806:	33 27       	eor	r19, r19
     808:	29 96       	adiw	r28, 0x09	; 9
     80a:	0c af       	std	Y+60, r16	; 0x3c
     80c:	1d af       	std	Y+61, r17	; 0x3d
     80e:	2e af       	std	Y+62, r18	; 0x3e
     810:	3f af       	std	Y+63, r19	; 0x3f
     812:	29 97       	sbiw	r28, 0x09	; 9
     814:	a2 01       	movw	r20, r4
     816:	91 01       	movw	r18, r2
     818:	40 70       	andi	r20, 0x00	; 0
     81a:	50 70       	andi	r21, 0x00	; 0
     81c:	2d 96       	adiw	r28, 0x0d	; 13
     81e:	2c af       	std	Y+60, r18	; 0x3c
     820:	3d af       	std	Y+61, r19	; 0x3d
     822:	4e af       	std	Y+62, r20	; 0x3e
     824:	5f af       	std	Y+63, r21	; 0x3f
     826:	2d 97       	sbiw	r28, 0x0d	; 13
     828:	c6 01       	movw	r24, r12
     82a:	b5 01       	movw	r22, r10
     82c:	29 96       	adiw	r28, 0x09	; 9
     82e:	2c ad       	ldd	r18, Y+60	; 0x3c
     830:	3d ad       	ldd	r19, Y+61	; 0x3d
     832:	4e ad       	ldd	r20, Y+62	; 0x3e
     834:	5f ad       	ldd	r21, Y+63	; 0x3f
     836:	29 97       	sbiw	r28, 0x09	; 9
     838:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
     83c:	7b 01       	movw	r14, r22
     83e:	8c 01       	movw	r16, r24
     840:	c6 01       	movw	r24, r12
     842:	b5 01       	movw	r22, r10
     844:	29 96       	adiw	r28, 0x09	; 9
     846:	2c ad       	ldd	r18, Y+60	; 0x3c
     848:	3d ad       	ldd	r19, Y+61	; 0x3d
     84a:	4e ad       	ldd	r20, Y+62	; 0x3e
     84c:	5f ad       	ldd	r21, Y+63	; 0x3f
     84e:	29 97       	sbiw	r28, 0x09	; 9
     850:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
     854:	c9 01       	movw	r24, r18
     856:	da 01       	movw	r26, r20
     858:	61 96       	adiw	r28, 0x11	; 17
     85a:	8c af       	std	Y+60, r24	; 0x3c
     85c:	9d af       	std	Y+61, r25	; 0x3d
     85e:	ae af       	std	Y+62, r26	; 0x3e
     860:	bf af       	std	Y+63, r27	; 0x3f
     862:	61 97       	sbiw	r28, 0x11	; 17
     864:	bc 01       	movw	r22, r24
     866:	cd 01       	movw	r24, r26
     868:	2d 96       	adiw	r28, 0x0d	; 13
     86a:	2c ad       	ldd	r18, Y+60	; 0x3c
     86c:	3d ad       	ldd	r19, Y+61	; 0x3d
     86e:	4e ad       	ldd	r20, Y+62	; 0x3e
     870:	5f ad       	ldd	r21, Y+63	; 0x3f
     872:	2d 97       	sbiw	r28, 0x0d	; 13
     874:	0e 94 34 3a 	call	0x7468	; 0x7468 <__mulsi3>
     878:	9b 01       	movw	r18, r22
     87a:	ac 01       	movw	r20, r24
     87c:	87 01       	movw	r16, r14
     87e:	ff 24       	eor	r15, r15
     880:	ee 24       	eor	r14, r14
     882:	ad a4       	ldd	r10, Y+45	; 0x2d
     884:	be a4       	ldd	r11, Y+46	; 0x2e
     886:	cf a4       	ldd	r12, Y+47	; 0x2f
     888:	d8 a8       	ldd	r13, Y+48	; 0x30
     88a:	c6 01       	movw	r24, r12
     88c:	aa 27       	eor	r26, r26
     88e:	bb 27       	eor	r27, r27
     890:	57 01       	movw	r10, r14
     892:	68 01       	movw	r12, r16
     894:	a8 2a       	or	r10, r24
     896:	b9 2a       	or	r11, r25
     898:	ca 2a       	or	r12, r26
     89a:	db 2a       	or	r13, r27
     89c:	a2 16       	cp	r10, r18
     89e:	b3 06       	cpc	r11, r19
     8a0:	c4 06       	cpc	r12, r20
     8a2:	d5 06       	cpc	r13, r21
     8a4:	60 f5       	brcc	.+88     	; 0x8fe <__stack+0x9f>
     8a6:	61 96       	adiw	r28, 0x11	; 17
     8a8:	6c ad       	ldd	r22, Y+60	; 0x3c
     8aa:	7d ad       	ldd	r23, Y+61	; 0x3d
     8ac:	8e ad       	ldd	r24, Y+62	; 0x3e
     8ae:	9f ad       	ldd	r25, Y+63	; 0x3f
     8b0:	61 97       	sbiw	r28, 0x11	; 17
     8b2:	61 50       	subi	r22, 0x01	; 1
     8b4:	70 40       	sbci	r23, 0x00	; 0
     8b6:	80 40       	sbci	r24, 0x00	; 0
     8b8:	90 40       	sbci	r25, 0x00	; 0
     8ba:	61 96       	adiw	r28, 0x11	; 17
     8bc:	6c af       	std	Y+60, r22	; 0x3c
     8be:	7d af       	std	Y+61, r23	; 0x3d
     8c0:	8e af       	std	Y+62, r24	; 0x3e
     8c2:	9f af       	std	Y+63, r25	; 0x3f
     8c4:	61 97       	sbiw	r28, 0x11	; 17
     8c6:	a2 0c       	add	r10, r2
     8c8:	b3 1c       	adc	r11, r3
     8ca:	c4 1c       	adc	r12, r4
     8cc:	d5 1c       	adc	r13, r5
     8ce:	a2 14       	cp	r10, r2
     8d0:	b3 04       	cpc	r11, r3
     8d2:	c4 04       	cpc	r12, r4
     8d4:	d5 04       	cpc	r13, r5
     8d6:	98 f0       	brcs	.+38     	; 0x8fe <__stack+0x9f>
     8d8:	a2 16       	cp	r10, r18
     8da:	b3 06       	cpc	r11, r19
     8dc:	c4 06       	cpc	r12, r20
     8de:	d5 06       	cpc	r13, r21
     8e0:	70 f4       	brcc	.+28     	; 0x8fe <__stack+0x9f>
     8e2:	61 50       	subi	r22, 0x01	; 1
     8e4:	70 40       	sbci	r23, 0x00	; 0
     8e6:	80 40       	sbci	r24, 0x00	; 0
     8e8:	90 40       	sbci	r25, 0x00	; 0
     8ea:	61 96       	adiw	r28, 0x11	; 17
     8ec:	6c af       	std	Y+60, r22	; 0x3c
     8ee:	7d af       	std	Y+61, r23	; 0x3d
     8f0:	8e af       	std	Y+62, r24	; 0x3e
     8f2:	9f af       	std	Y+63, r25	; 0x3f
     8f4:	61 97       	sbiw	r28, 0x11	; 17
     8f6:	a2 0c       	add	r10, r2
     8f8:	b3 1c       	adc	r11, r3
     8fa:	c4 1c       	adc	r12, r4
     8fc:	d5 1c       	adc	r13, r5
     8fe:	a2 1a       	sub	r10, r18
     900:	b3 0a       	sbc	r11, r19
     902:	c4 0a       	sbc	r12, r20
     904:	d5 0a       	sbc	r13, r21
     906:	c6 01       	movw	r24, r12
     908:	b5 01       	movw	r22, r10
     90a:	29 96       	adiw	r28, 0x09	; 9
     90c:	2c ad       	ldd	r18, Y+60	; 0x3c
     90e:	3d ad       	ldd	r19, Y+61	; 0x3d
     910:	4e ad       	ldd	r20, Y+62	; 0x3e
     912:	5f ad       	ldd	r21, Y+63	; 0x3f
     914:	29 97       	sbiw	r28, 0x09	; 9
     916:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
     91a:	7b 01       	movw	r14, r22
     91c:	8c 01       	movw	r16, r24
     91e:	c6 01       	movw	r24, r12
     920:	b5 01       	movw	r22, r10
     922:	29 96       	adiw	r28, 0x09	; 9
     924:	2c ad       	ldd	r18, Y+60	; 0x3c
     926:	3d ad       	ldd	r19, Y+61	; 0x3d
     928:	4e ad       	ldd	r20, Y+62	; 0x3e
     92a:	5f ad       	ldd	r21, Y+63	; 0x3f
     92c:	29 97       	sbiw	r28, 0x09	; 9
     92e:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
     932:	c9 01       	movw	r24, r18
     934:	da 01       	movw	r26, r20
     936:	5c 01       	movw	r10, r24
     938:	6d 01       	movw	r12, r26
     93a:	c6 01       	movw	r24, r12
     93c:	b5 01       	movw	r22, r10
     93e:	2d 96       	adiw	r28, 0x0d	; 13
     940:	2c ad       	ldd	r18, Y+60	; 0x3c
     942:	3d ad       	ldd	r19, Y+61	; 0x3d
     944:	4e ad       	ldd	r20, Y+62	; 0x3e
     946:	5f ad       	ldd	r21, Y+63	; 0x3f
     948:	2d 97       	sbiw	r28, 0x0d	; 13
     94a:	0e 94 34 3a 	call	0x7468	; 0x7468 <__mulsi3>
     94e:	9b 01       	movw	r18, r22
     950:	ac 01       	movw	r20, r24
     952:	87 01       	movw	r16, r14
     954:	ff 24       	eor	r15, r15
     956:	ee 24       	eor	r14, r14
     958:	8d a5       	ldd	r24, Y+45	; 0x2d
     95a:	9e a5       	ldd	r25, Y+46	; 0x2e
     95c:	af a5       	ldd	r26, Y+47	; 0x2f
     95e:	b8 a9       	ldd	r27, Y+48	; 0x30
     960:	a0 70       	andi	r26, 0x00	; 0
     962:	b0 70       	andi	r27, 0x00	; 0
     964:	e8 2a       	or	r14, r24
     966:	f9 2a       	or	r15, r25
     968:	0a 2b       	or	r16, r26
     96a:	1b 2b       	or	r17, r27
     96c:	e2 16       	cp	r14, r18
     96e:	f3 06       	cpc	r15, r19
     970:	04 07       	cpc	r16, r20
     972:	15 07       	cpc	r17, r21
     974:	c0 f4       	brcc	.+48     	; 0x9a6 <__stack+0x147>
     976:	08 94       	sec
     978:	a1 08       	sbc	r10, r1
     97a:	b1 08       	sbc	r11, r1
     97c:	c1 08       	sbc	r12, r1
     97e:	d1 08       	sbc	r13, r1
     980:	e2 0c       	add	r14, r2
     982:	f3 1c       	adc	r15, r3
     984:	04 1d       	adc	r16, r4
     986:	15 1d       	adc	r17, r5
     988:	e2 14       	cp	r14, r2
     98a:	f3 04       	cpc	r15, r3
     98c:	04 05       	cpc	r16, r4
     98e:	15 05       	cpc	r17, r5
     990:	50 f0       	brcs	.+20     	; 0x9a6 <__stack+0x147>
     992:	e2 16       	cp	r14, r18
     994:	f3 06       	cpc	r15, r19
     996:	04 07       	cpc	r16, r20
     998:	15 07       	cpc	r17, r21
     99a:	28 f4       	brcc	.+10     	; 0x9a6 <__stack+0x147>
     99c:	08 94       	sec
     99e:	a1 08       	sbc	r10, r1
     9a0:	b1 08       	sbc	r11, r1
     9a2:	c1 08       	sbc	r12, r1
     9a4:	d1 08       	sbc	r13, r1
     9a6:	61 96       	adiw	r28, 0x11	; 17
     9a8:	ec ac       	ldd	r14, Y+60	; 0x3c
     9aa:	fd ac       	ldd	r15, Y+61	; 0x3d
     9ac:	0e ad       	ldd	r16, Y+62	; 0x3e
     9ae:	1f ad       	ldd	r17, Y+63	; 0x3f
     9b0:	61 97       	sbiw	r28, 0x11	; 17
     9b2:	d7 01       	movw	r26, r14
     9b4:	99 27       	eor	r25, r25
     9b6:	88 27       	eor	r24, r24
     9b8:	96 01       	movw	r18, r12
     9ba:	85 01       	movw	r16, r10
     9bc:	08 2b       	or	r16, r24
     9be:	19 2b       	or	r17, r25
     9c0:	2a 2b       	or	r18, r26
     9c2:	3b 2b       	or	r19, r27
     9c4:	09 ab       	std	Y+49, r16	; 0x31
     9c6:	1a ab       	std	Y+50, r17	; 0x32
     9c8:	2b ab       	std	Y+51, r18	; 0x33
     9ca:	3c ab       	std	Y+52, r19	; 0x34
     9cc:	62 c2       	rjmp	.+1220   	; 0xe92 <__stack+0x633>
     9ce:	6e 14       	cp	r6, r14
     9d0:	7f 04       	cpc	r7, r15
     9d2:	80 06       	cpc	r8, r16
     9d4:	91 06       	cpc	r9, r17
     9d6:	08 f4       	brcc	.+2      	; 0x9da <__stack+0x17b>
     9d8:	51 c2       	rjmp	.+1186   	; 0xe7c <__stack+0x61d>
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	e2 16       	cp	r14, r18
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	f2 06       	cpc	r15, r18
     9e2:	21 e0       	ldi	r18, 0x01	; 1
     9e4:	02 07       	cpc	r16, r18
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	12 07       	cpc	r17, r18
     9ea:	88 f4       	brcc	.+34     	; 0xa0e <__stack+0x1af>
     9ec:	3f ef       	ldi	r19, 0xFF	; 255
     9ee:	e3 16       	cp	r14, r19
     9f0:	f1 04       	cpc	r15, r1
     9f2:	01 05       	cpc	r16, r1
     9f4:	11 05       	cpc	r17, r1
     9f6:	31 f0       	breq	.+12     	; 0xa04 <__stack+0x1a5>
     9f8:	28 f0       	brcs	.+10     	; 0xa04 <__stack+0x1a5>
     9fa:	48 e0       	ldi	r20, 0x08	; 8
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	17 c0       	rjmp	.+46     	; 0xa32 <__stack+0x1d3>
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	50 e0       	ldi	r21, 0x00	; 0
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__stack+0x1d3>
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	e4 16       	cp	r14, r20
     a12:	40 e0       	ldi	r20, 0x00	; 0
     a14:	f4 06       	cpc	r15, r20
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	04 07       	cpc	r16, r20
     a1a:	41 e0       	ldi	r20, 0x01	; 1
     a1c:	14 07       	cpc	r17, r20
     a1e:	28 f0       	brcs	.+10     	; 0xa2a <__stack+0x1cb>
     a20:	48 e1       	ldi	r20, 0x18	; 24
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	04 c0       	rjmp	.+8      	; 0xa32 <__stack+0x1d3>
     a2a:	40 e1       	ldi	r20, 0x10	; 16
     a2c:	50 e0       	ldi	r21, 0x00	; 0
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	d8 01       	movw	r26, r16
     a34:	c7 01       	movw	r24, r14
     a36:	04 2e       	mov	r0, r20
     a38:	04 c0       	rjmp	.+8      	; 0xa42 <__stack+0x1e3>
     a3a:	b6 95       	lsr	r27
     a3c:	a7 95       	ror	r26
     a3e:	97 95       	ror	r25
     a40:	87 95       	ror	r24
     a42:	0a 94       	dec	r0
     a44:	d2 f7       	brpl	.-12     	; 0xa3a <__stack+0x1db>
     a46:	83 52       	subi	r24, 0x23	; 35
     a48:	9f 4f       	sbci	r25, 0xFF	; 255
     a4a:	dc 01       	movw	r26, r24
     a4c:	2c 91       	ld	r18, X
     a4e:	30 e2       	ldi	r19, 0x20	; 32
     a50:	a3 2e       	mov	r10, r19
     a52:	b1 2c       	mov	r11, r1
     a54:	c1 2c       	mov	r12, r1
     a56:	d1 2c       	mov	r13, r1
     a58:	d6 01       	movw	r26, r12
     a5a:	c5 01       	movw	r24, r10
     a5c:	84 1b       	sub	r24, r20
     a5e:	95 0b       	sbc	r25, r21
     a60:	a6 0b       	sbc	r26, r22
     a62:	b7 0b       	sbc	r27, r23
     a64:	82 1b       	sub	r24, r18
     a66:	91 09       	sbc	r25, r1
     a68:	a1 09       	sbc	r26, r1
     a6a:	b1 09       	sbc	r27, r1
     a6c:	00 97       	sbiw	r24, 0x00	; 0
     a6e:	a1 05       	cpc	r26, r1
     a70:	b1 05       	cpc	r27, r1
     a72:	89 f4       	brne	.+34     	; 0xa96 <__stack+0x237>
     a74:	e6 14       	cp	r14, r6
     a76:	f7 04       	cpc	r15, r7
     a78:	08 05       	cpc	r16, r8
     a7a:	19 05       	cpc	r17, r9
     a7c:	08 f4       	brcc	.+2      	; 0xa80 <__stack+0x221>
     a7e:	f2 c1       	rjmp	.+996    	; 0xe64 <__stack+0x605>
     a80:	6d a4       	ldd	r6, Y+45	; 0x2d
     a82:	7e a4       	ldd	r7, Y+46	; 0x2e
     a84:	8f a4       	ldd	r8, Y+47	; 0x2f
     a86:	98 a8       	ldd	r9, Y+48	; 0x30
     a88:	62 14       	cp	r6, r2
     a8a:	73 04       	cpc	r7, r3
     a8c:	84 04       	cpc	r8, r4
     a8e:	95 04       	cpc	r9, r5
     a90:	08 f0       	brcs	.+2      	; 0xa94 <__stack+0x235>
     a92:	e8 c1       	rjmp	.+976    	; 0xe64 <__stack+0x605>
     a94:	f3 c1       	rjmp	.+998    	; 0xe7c <__stack+0x61d>
     a96:	6e 96       	adiw	r28, 0x1e	; 30
     a98:	8f af       	std	Y+63, r24	; 0x3f
     a9a:	6e 97       	sbiw	r28, 0x1e	; 30
     a9c:	08 2e       	mov	r0, r24
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__stack+0x249>
     aa0:	ee 0c       	add	r14, r14
     aa2:	ff 1c       	adc	r15, r15
     aa4:	00 1f       	adc	r16, r16
     aa6:	11 1f       	adc	r17, r17
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__stack+0x241>
     aac:	6a 2d       	mov	r22, r10
     aae:	68 1b       	sub	r22, r24
     ab0:	d2 01       	movw	r26, r4
     ab2:	c1 01       	movw	r24, r2
     ab4:	06 2e       	mov	r0, r22
     ab6:	04 c0       	rjmp	.+8      	; 0xac0 <__stack+0x261>
     ab8:	b6 95       	lsr	r27
     aba:	a7 95       	ror	r26
     abc:	97 95       	ror	r25
     abe:	87 95       	ror	r24
     ac0:	0a 94       	dec	r0
     ac2:	d2 f7       	brpl	.-12     	; 0xab8 <__stack+0x259>
     ac4:	5c 01       	movw	r10, r24
     ac6:	6d 01       	movw	r12, r26
     ac8:	ae 28       	or	r10, r14
     aca:	bf 28       	or	r11, r15
     acc:	c0 2a       	or	r12, r16
     ace:	d1 2a       	or	r13, r17
     ad0:	ad a2       	std	Y+37, r10	; 0x25
     ad2:	be a2       	std	Y+38, r11	; 0x26
     ad4:	cf a2       	std	Y+39, r12	; 0x27
     ad6:	d8 a6       	std	Y+40, r13	; 0x28
     ad8:	72 01       	movw	r14, r4
     ada:	61 01       	movw	r12, r2
     adc:	6e 96       	adiw	r28, 0x1e	; 30
     ade:	0f ac       	ldd	r0, Y+63	; 0x3f
     ae0:	6e 97       	sbiw	r28, 0x1e	; 30
     ae2:	04 c0       	rjmp	.+8      	; 0xaec <__stack+0x28d>
     ae4:	cc 0c       	add	r12, r12
     ae6:	dd 1c       	adc	r13, r13
     ae8:	ee 1c       	adc	r14, r14
     aea:	ff 1c       	adc	r15, r15
     aec:	0a 94       	dec	r0
     aee:	d2 f7       	brpl	.-12     	; 0xae4 <__stack+0x285>
     af0:	c9 a2       	std	Y+33, r12	; 0x21
     af2:	da a2       	std	Y+34, r13	; 0x22
     af4:	eb a2       	std	Y+35, r14	; 0x23
     af6:	fc a2       	std	Y+36, r15	; 0x24
     af8:	64 01       	movw	r12, r8
     afa:	53 01       	movw	r10, r6
     afc:	06 2e       	mov	r0, r22
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__stack+0x2a9>
     b00:	d6 94       	lsr	r13
     b02:	c7 94       	ror	r12
     b04:	b7 94       	ror	r11
     b06:	a7 94       	ror	r10
     b08:	0a 94       	dec	r0
     b0a:	d2 f7       	brpl	.-12     	; 0xb00 <__stack+0x2a1>
     b0c:	d4 01       	movw	r26, r8
     b0e:	c3 01       	movw	r24, r6
     b10:	6e 96       	adiw	r28, 0x1e	; 30
     b12:	0f ac       	ldd	r0, Y+63	; 0x3f
     b14:	6e 97       	sbiw	r28, 0x1e	; 30
     b16:	04 c0       	rjmp	.+8      	; 0xb20 <__stack+0x2c1>
     b18:	88 0f       	add	r24, r24
     b1a:	99 1f       	adc	r25, r25
     b1c:	aa 1f       	adc	r26, r26
     b1e:	bb 1f       	adc	r27, r27
     b20:	0a 94       	dec	r0
     b22:	d2 f7       	brpl	.-12     	; 0xb18 <__stack+0x2b9>
     b24:	ed a4       	ldd	r14, Y+45	; 0x2d
     b26:	fe a4       	ldd	r15, Y+46	; 0x2e
     b28:	0f a5       	ldd	r16, Y+47	; 0x2f
     b2a:	18 a9       	ldd	r17, Y+48	; 0x30
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <__stack+0x2d7>
     b2e:	16 95       	lsr	r17
     b30:	07 95       	ror	r16
     b32:	f7 94       	ror	r15
     b34:	e7 94       	ror	r14
     b36:	6a 95       	dec	r22
     b38:	d2 f7       	brpl	.-12     	; 0xb2e <__stack+0x2cf>
     b3a:	37 01       	movw	r6, r14
     b3c:	48 01       	movw	r8, r16
     b3e:	68 2a       	or	r6, r24
     b40:	79 2a       	or	r7, r25
     b42:	8a 2a       	or	r8, r26
     b44:	9b 2a       	or	r9, r27
     b46:	6d 8e       	std	Y+29, r6	; 0x1d
     b48:	7e 8e       	std	Y+30, r7	; 0x1e
     b4a:	8f 8e       	std	Y+31, r8	; 0x1f
     b4c:	98 a2       	std	Y+32, r9	; 0x20
     b4e:	ed a0       	ldd	r14, Y+37	; 0x25
     b50:	fe a0       	ldd	r15, Y+38	; 0x26
     b52:	0f a1       	ldd	r16, Y+39	; 0x27
     b54:	18 a5       	ldd	r17, Y+40	; 0x28
     b56:	38 01       	movw	r6, r16
     b58:	88 24       	eor	r8, r8
     b5a:	99 24       	eor	r9, r9
     b5c:	98 01       	movw	r18, r16
     b5e:	87 01       	movw	r16, r14
     b60:	20 70       	andi	r18, 0x00	; 0
     b62:	30 70       	andi	r19, 0x00	; 0
     b64:	65 96       	adiw	r28, 0x15	; 21
     b66:	0c af       	std	Y+60, r16	; 0x3c
     b68:	1d af       	std	Y+61, r17	; 0x3d
     b6a:	2e af       	std	Y+62, r18	; 0x3e
     b6c:	3f af       	std	Y+63, r19	; 0x3f
     b6e:	65 97       	sbiw	r28, 0x15	; 21
     b70:	c6 01       	movw	r24, r12
     b72:	b5 01       	movw	r22, r10
     b74:	a4 01       	movw	r20, r8
     b76:	93 01       	movw	r18, r6
     b78:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
     b7c:	7b 01       	movw	r14, r22
     b7e:	8c 01       	movw	r16, r24
     b80:	c6 01       	movw	r24, r12
     b82:	b5 01       	movw	r22, r10
     b84:	a4 01       	movw	r20, r8
     b86:	93 01       	movw	r18, r6
     b88:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
     b8c:	c9 01       	movw	r24, r18
     b8e:	da 01       	movw	r26, r20
     b90:	1c 01       	movw	r2, r24
     b92:	2d 01       	movw	r4, r26
     b94:	c2 01       	movw	r24, r4
     b96:	b1 01       	movw	r22, r2
     b98:	65 96       	adiw	r28, 0x15	; 21
     b9a:	2c ad       	ldd	r18, Y+60	; 0x3c
     b9c:	3d ad       	ldd	r19, Y+61	; 0x3d
     b9e:	4e ad       	ldd	r20, Y+62	; 0x3e
     ba0:	5f ad       	ldd	r21, Y+63	; 0x3f
     ba2:	65 97       	sbiw	r28, 0x15	; 21
     ba4:	0e 94 34 3a 	call	0x7468	; 0x7468 <__mulsi3>
     ba8:	9b 01       	movw	r18, r22
     baa:	ac 01       	movw	r20, r24
     bac:	87 01       	movw	r16, r14
     bae:	ff 24       	eor	r15, r15
     bb0:	ee 24       	eor	r14, r14
     bb2:	ad 8c       	ldd	r10, Y+29	; 0x1d
     bb4:	be 8c       	ldd	r11, Y+30	; 0x1e
     bb6:	cf 8c       	ldd	r12, Y+31	; 0x1f
     bb8:	d8 a0       	ldd	r13, Y+32	; 0x20
     bba:	c6 01       	movw	r24, r12
     bbc:	aa 27       	eor	r26, r26
     bbe:	bb 27       	eor	r27, r27
     bc0:	57 01       	movw	r10, r14
     bc2:	68 01       	movw	r12, r16
     bc4:	a8 2a       	or	r10, r24
     bc6:	b9 2a       	or	r11, r25
     bc8:	ca 2a       	or	r12, r26
     bca:	db 2a       	or	r13, r27
     bcc:	a2 16       	cp	r10, r18
     bce:	b3 06       	cpc	r11, r19
     bd0:	c4 06       	cpc	r12, r20
     bd2:	d5 06       	cpc	r13, r21
     bd4:	00 f5       	brcc	.+64     	; 0xc16 <__stack+0x3b7>
     bd6:	08 94       	sec
     bd8:	21 08       	sbc	r2, r1
     bda:	31 08       	sbc	r3, r1
     bdc:	41 08       	sbc	r4, r1
     bde:	51 08       	sbc	r5, r1
     be0:	ed a0       	ldd	r14, Y+37	; 0x25
     be2:	fe a0       	ldd	r15, Y+38	; 0x26
     be4:	0f a1       	ldd	r16, Y+39	; 0x27
     be6:	18 a5       	ldd	r17, Y+40	; 0x28
     be8:	ae 0c       	add	r10, r14
     bea:	bf 1c       	adc	r11, r15
     bec:	c0 1e       	adc	r12, r16
     bee:	d1 1e       	adc	r13, r17
     bf0:	ae 14       	cp	r10, r14
     bf2:	bf 04       	cpc	r11, r15
     bf4:	c0 06       	cpc	r12, r16
     bf6:	d1 06       	cpc	r13, r17
     bf8:	70 f0       	brcs	.+28     	; 0xc16 <__stack+0x3b7>
     bfa:	a2 16       	cp	r10, r18
     bfc:	b3 06       	cpc	r11, r19
     bfe:	c4 06       	cpc	r12, r20
     c00:	d5 06       	cpc	r13, r21
     c02:	48 f4       	brcc	.+18     	; 0xc16 <__stack+0x3b7>
     c04:	08 94       	sec
     c06:	21 08       	sbc	r2, r1
     c08:	31 08       	sbc	r3, r1
     c0a:	41 08       	sbc	r4, r1
     c0c:	51 08       	sbc	r5, r1
     c0e:	ae 0c       	add	r10, r14
     c10:	bf 1c       	adc	r11, r15
     c12:	c0 1e       	adc	r12, r16
     c14:	d1 1e       	adc	r13, r17
     c16:	a2 1a       	sub	r10, r18
     c18:	b3 0a       	sbc	r11, r19
     c1a:	c4 0a       	sbc	r12, r20
     c1c:	d5 0a       	sbc	r13, r21
     c1e:	c6 01       	movw	r24, r12
     c20:	b5 01       	movw	r22, r10
     c22:	a4 01       	movw	r20, r8
     c24:	93 01       	movw	r18, r6
     c26:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
     c2a:	7b 01       	movw	r14, r22
     c2c:	8c 01       	movw	r16, r24
     c2e:	c6 01       	movw	r24, r12
     c30:	b5 01       	movw	r22, r10
     c32:	a4 01       	movw	r20, r8
     c34:	93 01       	movw	r18, r6
     c36:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
     c3a:	c9 01       	movw	r24, r18
     c3c:	da 01       	movw	r26, r20
     c3e:	3c 01       	movw	r6, r24
     c40:	4d 01       	movw	r8, r26
     c42:	c4 01       	movw	r24, r8
     c44:	b3 01       	movw	r22, r6
     c46:	65 96       	adiw	r28, 0x15	; 21
     c48:	2c ad       	ldd	r18, Y+60	; 0x3c
     c4a:	3d ad       	ldd	r19, Y+61	; 0x3d
     c4c:	4e ad       	ldd	r20, Y+62	; 0x3e
     c4e:	5f ad       	ldd	r21, Y+63	; 0x3f
     c50:	65 97       	sbiw	r28, 0x15	; 21
     c52:	0e 94 34 3a 	call	0x7468	; 0x7468 <__mulsi3>
     c56:	9b 01       	movw	r18, r22
     c58:	ac 01       	movw	r20, r24
     c5a:	87 01       	movw	r16, r14
     c5c:	ff 24       	eor	r15, r15
     c5e:	ee 24       	eor	r14, r14
     c60:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c62:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c64:	af 8d       	ldd	r26, Y+31	; 0x1f
     c66:	b8 a1       	ldd	r27, Y+32	; 0x20
     c68:	a0 70       	andi	r26, 0x00	; 0
     c6a:	b0 70       	andi	r27, 0x00	; 0
     c6c:	57 01       	movw	r10, r14
     c6e:	68 01       	movw	r12, r16
     c70:	a8 2a       	or	r10, r24
     c72:	b9 2a       	or	r11, r25
     c74:	ca 2a       	or	r12, r26
     c76:	db 2a       	or	r13, r27
     c78:	a2 16       	cp	r10, r18
     c7a:	b3 06       	cpc	r11, r19
     c7c:	c4 06       	cpc	r12, r20
     c7e:	d5 06       	cpc	r13, r21
     c80:	00 f5       	brcc	.+64     	; 0xcc2 <__stack+0x463>
     c82:	08 94       	sec
     c84:	61 08       	sbc	r6, r1
     c86:	71 08       	sbc	r7, r1
     c88:	81 08       	sbc	r8, r1
     c8a:	91 08       	sbc	r9, r1
     c8c:	6d a1       	ldd	r22, Y+37	; 0x25
     c8e:	7e a1       	ldd	r23, Y+38	; 0x26
     c90:	8f a1       	ldd	r24, Y+39	; 0x27
     c92:	98 a5       	ldd	r25, Y+40	; 0x28
     c94:	a6 0e       	add	r10, r22
     c96:	b7 1e       	adc	r11, r23
     c98:	c8 1e       	adc	r12, r24
     c9a:	d9 1e       	adc	r13, r25
     c9c:	a6 16       	cp	r10, r22
     c9e:	b7 06       	cpc	r11, r23
     ca0:	c8 06       	cpc	r12, r24
     ca2:	d9 06       	cpc	r13, r25
     ca4:	70 f0       	brcs	.+28     	; 0xcc2 <__stack+0x463>
     ca6:	a2 16       	cp	r10, r18
     ca8:	b3 06       	cpc	r11, r19
     caa:	c4 06       	cpc	r12, r20
     cac:	d5 06       	cpc	r13, r21
     cae:	48 f4       	brcc	.+18     	; 0xcc2 <__stack+0x463>
     cb0:	08 94       	sec
     cb2:	61 08       	sbc	r6, r1
     cb4:	71 08       	sbc	r7, r1
     cb6:	81 08       	sbc	r8, r1
     cb8:	91 08       	sbc	r9, r1
     cba:	a6 0e       	add	r10, r22
     cbc:	b7 1e       	adc	r11, r23
     cbe:	c8 1e       	adc	r12, r24
     cc0:	d9 1e       	adc	r13, r25
     cc2:	d6 01       	movw	r26, r12
     cc4:	c5 01       	movw	r24, r10
     cc6:	82 1b       	sub	r24, r18
     cc8:	93 0b       	sbc	r25, r19
     cca:	a4 0b       	sbc	r26, r20
     ccc:	b5 0b       	sbc	r27, r21
     cce:	89 8f       	std	Y+25, r24	; 0x19
     cd0:	9a 8f       	std	Y+26, r25	; 0x1a
     cd2:	ab 8f       	std	Y+27, r26	; 0x1b
     cd4:	bc 8f       	std	Y+28, r27	; 0x1c
     cd6:	d1 01       	movw	r26, r2
     cd8:	99 27       	eor	r25, r25
     cda:	88 27       	eor	r24, r24
     cdc:	64 01       	movw	r12, r8
     cde:	53 01       	movw	r10, r6
     ce0:	a8 2a       	or	r10, r24
     ce2:	b9 2a       	or	r11, r25
     ce4:	ca 2a       	or	r12, r26
     ce6:	db 2a       	or	r13, r27
     ce8:	a9 aa       	std	Y+49, r10	; 0x31
     cea:	ba aa       	std	Y+50, r11	; 0x32
     cec:	cb aa       	std	Y+51, r12	; 0x33
     cee:	dc aa       	std	Y+52, r13	; 0x34
     cf0:	86 01       	movw	r16, r12
     cf2:	75 01       	movw	r14, r10
     cf4:	2f ef       	ldi	r18, 0xFF	; 255
     cf6:	3f ef       	ldi	r19, 0xFF	; 255
     cf8:	40 e0       	ldi	r20, 0x00	; 0
     cfa:	50 e0       	ldi	r21, 0x00	; 0
     cfc:	e2 22       	and	r14, r18
     cfe:	f3 22       	and	r15, r19
     d00:	04 23       	and	r16, r20
     d02:	15 23       	and	r17, r21
     d04:	a6 01       	movw	r20, r12
     d06:	66 27       	eor	r22, r22
     d08:	77 27       	eor	r23, r23
     d0a:	6d 96       	adiw	r28, 0x1d	; 29
     d0c:	4c af       	std	Y+60, r20	; 0x3c
     d0e:	5d af       	std	Y+61, r21	; 0x3d
     d10:	6e af       	std	Y+62, r22	; 0x3e
     d12:	7f af       	std	Y+63, r23	; 0x3f
     d14:	6d 97       	sbiw	r28, 0x1d	; 29
     d16:	a9 a0       	ldd	r10, Y+33	; 0x21
     d18:	ba a0       	ldd	r11, Y+34	; 0x22
     d1a:	cb a0       	ldd	r12, Y+35	; 0x23
     d1c:	dc a0       	ldd	r13, Y+36	; 0x24
     d1e:	6f ef       	ldi	r22, 0xFF	; 255
     d20:	7f ef       	ldi	r23, 0xFF	; 255
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	a6 22       	and	r10, r22
     d28:	b7 22       	and	r11, r23
     d2a:	c8 22       	and	r12, r24
     d2c:	d9 22       	and	r13, r25
     d2e:	89 a1       	ldd	r24, Y+33	; 0x21
     d30:	9a a1       	ldd	r25, Y+34	; 0x22
     d32:	ab a1       	ldd	r26, Y+35	; 0x23
     d34:	bc a1       	ldd	r27, Y+36	; 0x24
     d36:	1d 01       	movw	r2, r26
     d38:	44 24       	eor	r4, r4
     d3a:	55 24       	eor	r5, r5
     d3c:	c8 01       	movw	r24, r16
     d3e:	b7 01       	movw	r22, r14
     d40:	a6 01       	movw	r20, r12
     d42:	95 01       	movw	r18, r10
     d44:	0e 94 34 3a 	call	0x7468	; 0x7468 <__mulsi3>
     d48:	69 96       	adiw	r28, 0x19	; 25
     d4a:	6c af       	std	Y+60, r22	; 0x3c
     d4c:	7d af       	std	Y+61, r23	; 0x3d
     d4e:	8e af       	std	Y+62, r24	; 0x3e
     d50:	9f af       	std	Y+63, r25	; 0x3f
     d52:	69 97       	sbiw	r28, 0x19	; 25
     d54:	c8 01       	movw	r24, r16
     d56:	b7 01       	movw	r22, r14
     d58:	a2 01       	movw	r20, r4
     d5a:	91 01       	movw	r18, r2
     d5c:	0e 94 34 3a 	call	0x7468	; 0x7468 <__mulsi3>
     d60:	3b 01       	movw	r6, r22
     d62:	4c 01       	movw	r8, r24
     d64:	6d 96       	adiw	r28, 0x1d	; 29
     d66:	6c ad       	ldd	r22, Y+60	; 0x3c
     d68:	7d ad       	ldd	r23, Y+61	; 0x3d
     d6a:	8e ad       	ldd	r24, Y+62	; 0x3e
     d6c:	9f ad       	ldd	r25, Y+63	; 0x3f
     d6e:	6d 97       	sbiw	r28, 0x1d	; 29
     d70:	a6 01       	movw	r20, r12
     d72:	95 01       	movw	r18, r10
     d74:	0e 94 34 3a 	call	0x7468	; 0x7468 <__mulsi3>
     d78:	7b 01       	movw	r14, r22
     d7a:	8c 01       	movw	r16, r24
     d7c:	6d 96       	adiw	r28, 0x1d	; 29
     d7e:	6c ad       	ldd	r22, Y+60	; 0x3c
     d80:	7d ad       	ldd	r23, Y+61	; 0x3d
     d82:	8e ad       	ldd	r24, Y+62	; 0x3e
     d84:	9f ad       	ldd	r25, Y+63	; 0x3f
     d86:	6d 97       	sbiw	r28, 0x1d	; 29
     d88:	a2 01       	movw	r20, r4
     d8a:	91 01       	movw	r18, r2
     d8c:	0e 94 34 3a 	call	0x7468	; 0x7468 <__mulsi3>
     d90:	5b 01       	movw	r10, r22
     d92:	6c 01       	movw	r12, r24
     d94:	a8 01       	movw	r20, r16
     d96:	97 01       	movw	r18, r14
     d98:	26 0d       	add	r18, r6
     d9a:	37 1d       	adc	r19, r7
     d9c:	48 1d       	adc	r20, r8
     d9e:	59 1d       	adc	r21, r9
     da0:	69 96       	adiw	r28, 0x19	; 25
     da2:	6c ac       	ldd	r6, Y+60	; 0x3c
     da4:	7d ac       	ldd	r7, Y+61	; 0x3d
     da6:	8e ac       	ldd	r8, Y+62	; 0x3e
     da8:	9f ac       	ldd	r9, Y+63	; 0x3f
     daa:	69 97       	sbiw	r28, 0x19	; 25
     dac:	c4 01       	movw	r24, r8
     dae:	aa 27       	eor	r26, r26
     db0:	bb 27       	eor	r27, r27
     db2:	28 0f       	add	r18, r24
     db4:	39 1f       	adc	r19, r25
     db6:	4a 1f       	adc	r20, r26
     db8:	5b 1f       	adc	r21, r27
     dba:	2e 15       	cp	r18, r14
     dbc:	3f 05       	cpc	r19, r15
     dbe:	40 07       	cpc	r20, r16
     dc0:	51 07       	cpc	r21, r17
     dc2:	48 f4       	brcc	.+18     	; 0xdd6 <__stack+0x577>
     dc4:	e1 2c       	mov	r14, r1
     dc6:	f1 2c       	mov	r15, r1
     dc8:	61 e0       	ldi	r22, 0x01	; 1
     dca:	06 2f       	mov	r16, r22
     dcc:	11 2d       	mov	r17, r1
     dce:	ae 0c       	add	r10, r14
     dd0:	bf 1c       	adc	r11, r15
     dd2:	c0 1e       	adc	r12, r16
     dd4:	d1 1e       	adc	r13, r17
     dd6:	ca 01       	movw	r24, r20
     dd8:	aa 27       	eor	r26, r26
     dda:	bb 27       	eor	r27, r27
     ddc:	bc 01       	movw	r22, r24
     dde:	cd 01       	movw	r24, r26
     de0:	6a 0d       	add	r22, r10
     de2:	7b 1d       	adc	r23, r11
     de4:	8c 1d       	adc	r24, r12
     de6:	9d 1d       	adc	r25, r13
     de8:	69 8c       	ldd	r6, Y+25	; 0x19
     dea:	7a 8c       	ldd	r7, Y+26	; 0x1a
     dec:	8b 8c       	ldd	r8, Y+27	; 0x1b
     dee:	9c 8c       	ldd	r9, Y+28	; 0x1c
     df0:	66 16       	cp	r6, r22
     df2:	77 06       	cpc	r7, r23
     df4:	88 06       	cpc	r8, r24
     df6:	99 06       	cpc	r9, r25
     df8:	40 f1       	brcs	.+80     	; 0xe4a <__stack+0x5eb>
     dfa:	66 15       	cp	r22, r6
     dfc:	77 05       	cpc	r23, r7
     dfe:	88 05       	cpc	r24, r8
     e00:	99 05       	cpc	r25, r9
     e02:	09 f0       	breq	.+2      	; 0xe06 <__stack+0x5a7>
     e04:	43 c0       	rjmp	.+134    	; 0xe8c <__stack+0x62d>
     e06:	d9 01       	movw	r26, r18
     e08:	99 27       	eor	r25, r25
     e0a:	88 27       	eor	r24, r24
     e0c:	69 96       	adiw	r28, 0x19	; 25
     e0e:	2c ad       	ldd	r18, Y+60	; 0x3c
     e10:	3d ad       	ldd	r19, Y+61	; 0x3d
     e12:	4e ad       	ldd	r20, Y+62	; 0x3e
     e14:	5f ad       	ldd	r21, Y+63	; 0x3f
     e16:	69 97       	sbiw	r28, 0x19	; 25
     e18:	40 70       	andi	r20, 0x00	; 0
     e1a:	50 70       	andi	r21, 0x00	; 0
     e1c:	82 0f       	add	r24, r18
     e1e:	93 1f       	adc	r25, r19
     e20:	a4 1f       	adc	r26, r20
     e22:	b5 1f       	adc	r27, r21
     e24:	2d a5       	ldd	r18, Y+45	; 0x2d
     e26:	3e a5       	ldd	r19, Y+46	; 0x2e
     e28:	4f a5       	ldd	r20, Y+47	; 0x2f
     e2a:	58 a9       	ldd	r21, Y+48	; 0x30
     e2c:	6e 96       	adiw	r28, 0x1e	; 30
     e2e:	0f ac       	ldd	r0, Y+63	; 0x3f
     e30:	6e 97       	sbiw	r28, 0x1e	; 30
     e32:	04 c0       	rjmp	.+8      	; 0xe3c <__stack+0x5dd>
     e34:	22 0f       	add	r18, r18
     e36:	33 1f       	adc	r19, r19
     e38:	44 1f       	adc	r20, r20
     e3a:	55 1f       	adc	r21, r21
     e3c:	0a 94       	dec	r0
     e3e:	d2 f7       	brpl	.-12     	; 0xe34 <__stack+0x5d5>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	4a 07       	cpc	r20, r26
     e46:	5b 07       	cpc	r21, r27
     e48:	08 f5       	brcc	.+66     	; 0xe8c <__stack+0x62d>
     e4a:	09 a9       	ldd	r16, Y+49	; 0x31
     e4c:	1a a9       	ldd	r17, Y+50	; 0x32
     e4e:	2b a9       	ldd	r18, Y+51	; 0x33
     e50:	3c a9       	ldd	r19, Y+52	; 0x34
     e52:	01 50       	subi	r16, 0x01	; 1
     e54:	10 40       	sbci	r17, 0x00	; 0
     e56:	20 40       	sbci	r18, 0x00	; 0
     e58:	30 40       	sbci	r19, 0x00	; 0
     e5a:	09 ab       	std	Y+49, r16	; 0x31
     e5c:	1a ab       	std	Y+50, r17	; 0x32
     e5e:	2b ab       	std	Y+51, r18	; 0x33
     e60:	3c ab       	std	Y+52, r19	; 0x34
     e62:	14 c0       	rjmp	.+40     	; 0xe8c <__stack+0x62d>
     e64:	66 24       	eor	r6, r6
     e66:	77 24       	eor	r7, r7
     e68:	43 01       	movw	r8, r6
     e6a:	21 e0       	ldi	r18, 0x01	; 1
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 e0       	ldi	r20, 0x00	; 0
     e70:	50 e0       	ldi	r21, 0x00	; 0
     e72:	29 ab       	std	Y+49, r18	; 0x31
     e74:	3a ab       	std	Y+50, r19	; 0x32
     e76:	4b ab       	std	Y+51, r20	; 0x33
     e78:	5c ab       	std	Y+52, r21	; 0x34
     e7a:	0b c0       	rjmp	.+22     	; 0xe92 <__stack+0x633>
     e7c:	66 24       	eor	r6, r6
     e7e:	77 24       	eor	r7, r7
     e80:	43 01       	movw	r8, r6
     e82:	19 aa       	std	Y+49, r1	; 0x31
     e84:	1a aa       	std	Y+50, r1	; 0x32
     e86:	1b aa       	std	Y+51, r1	; 0x33
     e88:	1c aa       	std	Y+52, r1	; 0x34
     e8a:	03 c0       	rjmp	.+6      	; 0xe92 <__stack+0x633>
     e8c:	66 24       	eor	r6, r6
     e8e:	77 24       	eor	r7, r7
     e90:	43 01       	movw	r8, r6
     e92:	fe 01       	movw	r30, r28
     e94:	71 96       	adiw	r30, 0x11	; 17
     e96:	88 e0       	ldi	r24, 0x08	; 8
     e98:	df 01       	movw	r26, r30
     e9a:	1d 92       	st	X+, r1
     e9c:	8a 95       	dec	r24
     e9e:	e9 f7       	brne	.-6      	; 0xe9a <__stack+0x63b>
     ea0:	a9 a8       	ldd	r10, Y+49	; 0x31
     ea2:	ba a8       	ldd	r11, Y+50	; 0x32
     ea4:	cb a8       	ldd	r12, Y+51	; 0x33
     ea6:	dc a8       	ldd	r13, Y+52	; 0x34
     ea8:	a9 8a       	std	Y+17, r10	; 0x11
     eaa:	ba 8a       	std	Y+18, r11	; 0x12
     eac:	cb 8a       	std	Y+19, r12	; 0x13
     eae:	dc 8a       	std	Y+20, r13	; 0x14
     eb0:	6d 8a       	std	Y+21, r6	; 0x15
     eb2:	7e 8a       	std	Y+22, r7	; 0x16
     eb4:	8f 8a       	std	Y+23, r8	; 0x17
     eb6:	98 8e       	std	Y+24, r9	; 0x18
     eb8:	29 a9       	ldd	r18, Y+49	; 0x31
     eba:	3a 89       	ldd	r19, Y+18	; 0x12
     ebc:	4b 89       	ldd	r20, Y+19	; 0x13
     ebe:	5c 89       	ldd	r21, Y+20	; 0x14
     ec0:	66 2d       	mov	r22, r6
     ec2:	7e 89       	ldd	r23, Y+22	; 0x16
     ec4:	8f 89       	ldd	r24, Y+23	; 0x17
     ec6:	98 8d       	ldd	r25, Y+24	; 0x18
     ec8:	c2 5a       	subi	r28, 0xA2	; 162
     eca:	df 4f       	sbci	r29, 0xFF	; 255
     ecc:	e2 e1       	ldi	r30, 0x12	; 18
     ece:	0c 94 91 3a 	jmp	0x7522	; 0x7522 <__epilogue_restores__>

00000ed2 <__umoddi3>:
     ed2:	ab e5       	ldi	r26, 0x5B	; 91
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	ef e6       	ldi	r30, 0x6F	; 111
     ed8:	f7 e0       	ldi	r31, 0x07	; 7
     eda:	0c 94 75 3a 	jmp	0x74ea	; 0x74ea <__prologue_saves__>
     ede:	a8 e0       	ldi	r26, 0x08	; 8
     ee0:	4e 01       	movw	r8, r28
     ee2:	08 94       	sec
     ee4:	81 1c       	adc	r8, r1
     ee6:	91 1c       	adc	r9, r1
     ee8:	f4 01       	movw	r30, r8
     eea:	6a 2e       	mov	r6, r26
     eec:	11 92       	st	Z+, r1
     eee:	6a 94       	dec	r6
     ef0:	e9 f7       	brne	.-6      	; 0xeec <__umoddi3+0x1a>
     ef2:	29 83       	std	Y+1, r18	; 0x01
     ef4:	3a 83       	std	Y+2, r19	; 0x02
     ef6:	4b 83       	std	Y+3, r20	; 0x03
     ef8:	5c 83       	std	Y+4, r21	; 0x04
     efa:	6d 83       	std	Y+5, r22	; 0x05
     efc:	7e 83       	std	Y+6, r23	; 0x06
     efe:	8f 83       	std	Y+7, r24	; 0x07
     f00:	98 87       	std	Y+8, r25	; 0x08
     f02:	ce 01       	movw	r24, r28
     f04:	09 96       	adiw	r24, 0x09	; 9
     f06:	fc 01       	movw	r30, r24
     f08:	11 92       	st	Z+, r1
     f0a:	aa 95       	dec	r26
     f0c:	e9 f7       	brne	.-6      	; 0xf08 <__umoddi3+0x36>
     f0e:	a9 86       	std	Y+9, r10	; 0x09
     f10:	ba 86       	std	Y+10, r11	; 0x0a
     f12:	cb 86       	std	Y+11, r12	; 0x0b
     f14:	dc 86       	std	Y+12, r13	; 0x0c
     f16:	ed 86       	std	Y+13, r14	; 0x0d
     f18:	fe 86       	std	Y+14, r15	; 0x0e
     f1a:	0f 87       	std	Y+15, r16	; 0x0f
     f1c:	18 8b       	std	Y+16, r17	; 0x10
     f1e:	29 84       	ldd	r2, Y+9	; 0x09
     f20:	3a 84       	ldd	r3, Y+10	; 0x0a
     f22:	4b 84       	ldd	r4, Y+11	; 0x0b
     f24:	5c 84       	ldd	r5, Y+12	; 0x0c
     f26:	ad 84       	ldd	r10, Y+13	; 0x0d
     f28:	be 84       	ldd	r11, Y+14	; 0x0e
     f2a:	cf 84       	ldd	r12, Y+15	; 0x0f
     f2c:	d8 88       	ldd	r13, Y+16	; 0x10
     f2e:	29 81       	ldd	r18, Y+1	; 0x01
     f30:	3a 81       	ldd	r19, Y+2	; 0x02
     f32:	4b 81       	ldd	r20, Y+3	; 0x03
     f34:	5c 81       	ldd	r21, Y+4	; 0x04
     f36:	69 96       	adiw	r28, 0x19	; 25
     f38:	2f af       	std	Y+63, r18	; 0x3f
     f3a:	69 97       	sbiw	r28, 0x19	; 25
     f3c:	6a 96       	adiw	r28, 0x1a	; 26
     f3e:	3f af       	std	Y+63, r19	; 0x3f
     f40:	6a 97       	sbiw	r28, 0x1a	; 26
     f42:	6b 96       	adiw	r28, 0x1b	; 27
     f44:	4f af       	std	Y+63, r20	; 0x3f
     f46:	6b 97       	sbiw	r28, 0x1b	; 27
     f48:	6c 96       	adiw	r28, 0x1c	; 28
     f4a:	5f af       	std	Y+63, r21	; 0x3f
     f4c:	6c 97       	sbiw	r28, 0x1c	; 28
     f4e:	6c 96       	adiw	r28, 0x1c	; 28
     f50:	6c ac       	ldd	r6, Y+60	; 0x3c
     f52:	7d ac       	ldd	r7, Y+61	; 0x3d
     f54:	8e ac       	ldd	r8, Y+62	; 0x3e
     f56:	9f ac       	ldd	r9, Y+63	; 0x3f
     f58:	6c 97       	sbiw	r28, 0x1c	; 28
     f5a:	69 aa       	std	Y+49, r6	; 0x31
     f5c:	7a aa       	std	Y+50, r7	; 0x32
     f5e:	8b aa       	std	Y+51, r8	; 0x33
     f60:	9c aa       	std	Y+52, r9	; 0x34
     f62:	6d 81       	ldd	r22, Y+5	; 0x05
     f64:	7e 81       	ldd	r23, Y+6	; 0x06
     f66:	8f 81       	ldd	r24, Y+7	; 0x07
     f68:	98 85       	ldd	r25, Y+8	; 0x08
     f6a:	3b 01       	movw	r6, r22
     f6c:	4c 01       	movw	r8, r24
     f6e:	6d aa       	std	Y+53, r6	; 0x35
     f70:	7e aa       	std	Y+54, r7	; 0x36
     f72:	8f aa       	std	Y+55, r8	; 0x37
     f74:	98 ae       	std	Y+56, r9	; 0x38
     f76:	a1 14       	cp	r10, r1
     f78:	b1 04       	cpc	r11, r1
     f7a:	c1 04       	cpc	r12, r1
     f7c:	d1 04       	cpc	r13, r1
     f7e:	09 f0       	breq	.+2      	; 0xf82 <__umoddi3+0xb0>
     f80:	04 c3       	rjmp	.+1544   	; 0x158a <__umoddi3+0x6b8>
     f82:	62 14       	cp	r6, r2
     f84:	73 04       	cpc	r7, r3
     f86:	84 04       	cpc	r8, r4
     f88:	95 04       	cpc	r9, r5
     f8a:	08 f0       	brcs	.+2      	; 0xf8e <__umoddi3+0xbc>
     f8c:	00 c1       	rjmp	.+512    	; 0x118e <__umoddi3+0x2bc>
     f8e:	00 e0       	ldi	r16, 0x00	; 0
     f90:	20 16       	cp	r2, r16
     f92:	00 e0       	ldi	r16, 0x00	; 0
     f94:	30 06       	cpc	r3, r16
     f96:	01 e0       	ldi	r16, 0x01	; 1
     f98:	40 06       	cpc	r4, r16
     f9a:	00 e0       	ldi	r16, 0x00	; 0
     f9c:	50 06       	cpc	r5, r16
     f9e:	88 f4       	brcc	.+34     	; 0xfc2 <__umoddi3+0xf0>
     fa0:	1f ef       	ldi	r17, 0xFF	; 255
     fa2:	21 16       	cp	r2, r17
     fa4:	31 04       	cpc	r3, r1
     fa6:	41 04       	cpc	r4, r1
     fa8:	51 04       	cpc	r5, r1
     faa:	39 f0       	breq	.+14     	; 0xfba <__umoddi3+0xe8>
     fac:	30 f0       	brcs	.+12     	; 0xfba <__umoddi3+0xe8>
     fae:	88 e0       	ldi	r24, 0x08	; 8
     fb0:	e8 2e       	mov	r14, r24
     fb2:	f1 2c       	mov	r15, r1
     fb4:	01 2d       	mov	r16, r1
     fb6:	11 2d       	mov	r17, r1
     fb8:	18 c0       	rjmp	.+48     	; 0xfea <__umoddi3+0x118>
     fba:	ee 24       	eor	r14, r14
     fbc:	ff 24       	eor	r15, r15
     fbe:	87 01       	movw	r16, r14
     fc0:	14 c0       	rjmp	.+40     	; 0xfea <__umoddi3+0x118>
     fc2:	40 e0       	ldi	r20, 0x00	; 0
     fc4:	24 16       	cp	r2, r20
     fc6:	40 e0       	ldi	r20, 0x00	; 0
     fc8:	34 06       	cpc	r3, r20
     fca:	40 e0       	ldi	r20, 0x00	; 0
     fcc:	44 06       	cpc	r4, r20
     fce:	41 e0       	ldi	r20, 0x01	; 1
     fd0:	54 06       	cpc	r5, r20
     fd2:	30 f0       	brcs	.+12     	; 0xfe0 <__umoddi3+0x10e>
     fd4:	b8 e1       	ldi	r27, 0x18	; 24
     fd6:	eb 2e       	mov	r14, r27
     fd8:	f1 2c       	mov	r15, r1
     fda:	01 2d       	mov	r16, r1
     fdc:	11 2d       	mov	r17, r1
     fde:	05 c0       	rjmp	.+10     	; 0xfea <__umoddi3+0x118>
     fe0:	a0 e1       	ldi	r26, 0x10	; 16
     fe2:	ea 2e       	mov	r14, r26
     fe4:	f1 2c       	mov	r15, r1
     fe6:	01 2d       	mov	r16, r1
     fe8:	11 2d       	mov	r17, r1
     fea:	d2 01       	movw	r26, r4
     fec:	c1 01       	movw	r24, r2
     fee:	0e 2c       	mov	r0, r14
     ff0:	04 c0       	rjmp	.+8      	; 0xffa <__umoddi3+0x128>
     ff2:	b6 95       	lsr	r27
     ff4:	a7 95       	ror	r26
     ff6:	97 95       	ror	r25
     ff8:	87 95       	ror	r24
     ffa:	0a 94       	dec	r0
     ffc:	d2 f7       	brpl	.-12     	; 0xff2 <__umoddi3+0x120>
     ffe:	83 52       	subi	r24, 0x23	; 35
    1000:	9f 4f       	sbci	r25, 0xFF	; 255
    1002:	dc 01       	movw	r26, r24
    1004:	2c 91       	ld	r18, X
    1006:	80 e2       	ldi	r24, 0x20	; 32
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	a0 e0       	ldi	r26, 0x00	; 0
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	8e 19       	sub	r24, r14
    1010:	9f 09       	sbc	r25, r15
    1012:	a0 0b       	sbc	r26, r16
    1014:	b1 0b       	sbc	r27, r17
    1016:	5c 01       	movw	r10, r24
    1018:	6d 01       	movw	r12, r26
    101a:	a2 1a       	sub	r10, r18
    101c:	b1 08       	sbc	r11, r1
    101e:	c1 08       	sbc	r12, r1
    1020:	d1 08       	sbc	r13, r1
    1022:	a9 ae       	std	Y+57, r10	; 0x39
    1024:	ba ae       	std	Y+58, r11	; 0x3a
    1026:	cb ae       	std	Y+59, r12	; 0x3b
    1028:	dc ae       	std	Y+60, r13	; 0x3c
    102a:	a1 14       	cp	r10, r1
    102c:	b1 04       	cpc	r11, r1
    102e:	c1 04       	cpc	r12, r1
    1030:	d1 04       	cpc	r13, r1
    1032:	09 f4       	brne	.+2      	; 0x1036 <__umoddi3+0x164>
    1034:	3f c0       	rjmp	.+126    	; 0x10b4 <__umoddi3+0x1e2>
    1036:	69 ad       	ldd	r22, Y+57	; 0x39
    1038:	06 2e       	mov	r0, r22
    103a:	04 c0       	rjmp	.+8      	; 0x1044 <__umoddi3+0x172>
    103c:	22 0c       	add	r2, r2
    103e:	33 1c       	adc	r3, r3
    1040:	44 1c       	adc	r4, r4
    1042:	55 1c       	adc	r5, r5
    1044:	0a 94       	dec	r0
    1046:	d2 f7       	brpl	.-12     	; 0x103c <__umoddi3+0x16a>
    1048:	a4 01       	movw	r20, r8
    104a:	93 01       	movw	r18, r6
    104c:	06 2e       	mov	r0, r22
    104e:	04 c0       	rjmp	.+8      	; 0x1058 <__umoddi3+0x186>
    1050:	22 0f       	add	r18, r18
    1052:	33 1f       	adc	r19, r19
    1054:	44 1f       	adc	r20, r20
    1056:	55 1f       	adc	r21, r21
    1058:	0a 94       	dec	r0
    105a:	d2 f7       	brpl	.-12     	; 0x1050 <__umoddi3+0x17e>
    105c:	80 e2       	ldi	r24, 0x20	; 32
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	8a 19       	sub	r24, r10
    1062:	9b 09       	sbc	r25, r11
    1064:	6c 96       	adiw	r28, 0x1c	; 28
    1066:	cc ac       	ldd	r12, Y+60	; 0x3c
    1068:	dd ac       	ldd	r13, Y+61	; 0x3d
    106a:	ee ac       	ldd	r14, Y+62	; 0x3e
    106c:	ff ac       	ldd	r15, Y+63	; 0x3f
    106e:	6c 97       	sbiw	r28, 0x1c	; 28
    1070:	04 c0       	rjmp	.+8      	; 0x107a <__umoddi3+0x1a8>
    1072:	f6 94       	lsr	r15
    1074:	e7 94       	ror	r14
    1076:	d7 94       	ror	r13
    1078:	c7 94       	ror	r12
    107a:	8a 95       	dec	r24
    107c:	d2 f7       	brpl	.-12     	; 0x1072 <__umoddi3+0x1a0>
    107e:	87 01       	movw	r16, r14
    1080:	76 01       	movw	r14, r12
    1082:	e2 2a       	or	r14, r18
    1084:	f3 2a       	or	r15, r19
    1086:	04 2b       	or	r16, r20
    1088:	15 2b       	or	r17, r21
    108a:	ed aa       	std	Y+53, r14	; 0x35
    108c:	fe aa       	std	Y+54, r15	; 0x36
    108e:	0f ab       	std	Y+55, r16	; 0x37
    1090:	18 af       	std	Y+56, r17	; 0x38
    1092:	6c 96       	adiw	r28, 0x1c	; 28
    1094:	8c ad       	ldd	r24, Y+60	; 0x3c
    1096:	9d ad       	ldd	r25, Y+61	; 0x3d
    1098:	ae ad       	ldd	r26, Y+62	; 0x3e
    109a:	bf ad       	ldd	r27, Y+63	; 0x3f
    109c:	6c 97       	sbiw	r28, 0x1c	; 28
    109e:	04 c0       	rjmp	.+8      	; 0x10a8 <__umoddi3+0x1d6>
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	aa 1f       	adc	r26, r26
    10a6:	bb 1f       	adc	r27, r27
    10a8:	6a 95       	dec	r22
    10aa:	d2 f7       	brpl	.-12     	; 0x10a0 <__umoddi3+0x1ce>
    10ac:	89 ab       	std	Y+49, r24	; 0x31
    10ae:	9a ab       	std	Y+50, r25	; 0x32
    10b0:	ab ab       	std	Y+51, r26	; 0x33
    10b2:	bc ab       	std	Y+52, r27	; 0x34
    10b4:	32 01       	movw	r6, r4
    10b6:	88 24       	eor	r8, r8
    10b8:	99 24       	eor	r9, r9
    10ba:	b2 01       	movw	r22, r4
    10bc:	a1 01       	movw	r20, r2
    10be:	60 70       	andi	r22, 0x00	; 0
    10c0:	70 70       	andi	r23, 0x00	; 0
    10c2:	21 96       	adiw	r28, 0x01	; 1
    10c4:	4c af       	std	Y+60, r20	; 0x3c
    10c6:	5d af       	std	Y+61, r21	; 0x3d
    10c8:	6e af       	std	Y+62, r22	; 0x3e
    10ca:	7f af       	std	Y+63, r23	; 0x3f
    10cc:	21 97       	sbiw	r28, 0x01	; 1
    10ce:	6d a9       	ldd	r22, Y+53	; 0x35
    10d0:	7e a9       	ldd	r23, Y+54	; 0x36
    10d2:	8f a9       	ldd	r24, Y+55	; 0x37
    10d4:	98 ad       	ldd	r25, Y+56	; 0x38
    10d6:	a4 01       	movw	r20, r8
    10d8:	93 01       	movw	r18, r6
    10da:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
    10de:	7b 01       	movw	r14, r22
    10e0:	8c 01       	movw	r16, r24
    10e2:	6d a9       	ldd	r22, Y+53	; 0x35
    10e4:	7e a9       	ldd	r23, Y+54	; 0x36
    10e6:	8f a9       	ldd	r24, Y+55	; 0x37
    10e8:	98 ad       	ldd	r25, Y+56	; 0x38
    10ea:	a4 01       	movw	r20, r8
    10ec:	93 01       	movw	r18, r6
    10ee:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
    10f2:	ca 01       	movw	r24, r20
    10f4:	b9 01       	movw	r22, r18
    10f6:	21 96       	adiw	r28, 0x01	; 1
    10f8:	2c ad       	ldd	r18, Y+60	; 0x3c
    10fa:	3d ad       	ldd	r19, Y+61	; 0x3d
    10fc:	4e ad       	ldd	r20, Y+62	; 0x3e
    10fe:	5f ad       	ldd	r21, Y+63	; 0x3f
    1100:	21 97       	sbiw	r28, 0x01	; 1
    1102:	0e 94 34 3a 	call	0x7468	; 0x7468 <__mulsi3>
    1106:	9b 01       	movw	r18, r22
    1108:	ac 01       	movw	r20, r24
    110a:	87 01       	movw	r16, r14
    110c:	ff 24       	eor	r15, r15
    110e:	ee 24       	eor	r14, r14
    1110:	a9 a8       	ldd	r10, Y+49	; 0x31
    1112:	ba a8       	ldd	r11, Y+50	; 0x32
    1114:	cb a8       	ldd	r12, Y+51	; 0x33
    1116:	dc a8       	ldd	r13, Y+52	; 0x34
    1118:	c6 01       	movw	r24, r12
    111a:	aa 27       	eor	r26, r26
    111c:	bb 27       	eor	r27, r27
    111e:	57 01       	movw	r10, r14
    1120:	68 01       	movw	r12, r16
    1122:	a8 2a       	or	r10, r24
    1124:	b9 2a       	or	r11, r25
    1126:	ca 2a       	or	r12, r26
    1128:	db 2a       	or	r13, r27
    112a:	a2 16       	cp	r10, r18
    112c:	b3 06       	cpc	r11, r19
    112e:	c4 06       	cpc	r12, r20
    1130:	d5 06       	cpc	r13, r21
    1132:	90 f4       	brcc	.+36     	; 0x1158 <__umoddi3+0x286>
    1134:	a2 0c       	add	r10, r2
    1136:	b3 1c       	adc	r11, r3
    1138:	c4 1c       	adc	r12, r4
    113a:	d5 1c       	adc	r13, r5
    113c:	a2 14       	cp	r10, r2
    113e:	b3 04       	cpc	r11, r3
    1140:	c4 04       	cpc	r12, r4
    1142:	d5 04       	cpc	r13, r5
    1144:	48 f0       	brcs	.+18     	; 0x1158 <__umoddi3+0x286>
    1146:	a2 16       	cp	r10, r18
    1148:	b3 06       	cpc	r11, r19
    114a:	c4 06       	cpc	r12, r20
    114c:	d5 06       	cpc	r13, r21
    114e:	20 f4       	brcc	.+8      	; 0x1158 <__umoddi3+0x286>
    1150:	a2 0c       	add	r10, r2
    1152:	b3 1c       	adc	r11, r3
    1154:	c4 1c       	adc	r12, r4
    1156:	d5 1c       	adc	r13, r5
    1158:	a2 1a       	sub	r10, r18
    115a:	b3 0a       	sbc	r11, r19
    115c:	c4 0a       	sbc	r12, r20
    115e:	d5 0a       	sbc	r13, r21
    1160:	c6 01       	movw	r24, r12
    1162:	b5 01       	movw	r22, r10
    1164:	a4 01       	movw	r20, r8
    1166:	93 01       	movw	r18, r6
    1168:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
    116c:	7b 01       	movw	r14, r22
    116e:	8c 01       	movw	r16, r24
    1170:	c6 01       	movw	r24, r12
    1172:	b5 01       	movw	r22, r10
    1174:	a4 01       	movw	r20, r8
    1176:	93 01       	movw	r18, r6
    1178:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
    117c:	ca 01       	movw	r24, r20
    117e:	b9 01       	movw	r22, r18
    1180:	21 96       	adiw	r28, 0x01	; 1
    1182:	2c ad       	ldd	r18, Y+60	; 0x3c
    1184:	3d ad       	ldd	r19, Y+61	; 0x3d
    1186:	4e ad       	ldd	r20, Y+62	; 0x3e
    1188:	5f ad       	ldd	r21, Y+63	; 0x3f
    118a:	21 97       	sbiw	r28, 0x01	; 1
    118c:	ba c1       	rjmp	.+884    	; 0x1502 <__umoddi3+0x630>
    118e:	21 14       	cp	r2, r1
    1190:	31 04       	cpc	r3, r1
    1192:	41 04       	cpc	r4, r1
    1194:	51 04       	cpc	r5, r1
    1196:	71 f4       	brne	.+28     	; 0x11b4 <__umoddi3+0x2e2>
    1198:	61 e0       	ldi	r22, 0x01	; 1
    119a:	70 e0       	ldi	r23, 0x00	; 0
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	40 e0       	ldi	r20, 0x00	; 0
    11a6:	50 e0       	ldi	r21, 0x00	; 0
    11a8:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
    11ac:	c9 01       	movw	r24, r18
    11ae:	da 01       	movw	r26, r20
    11b0:	1c 01       	movw	r2, r24
    11b2:	2d 01       	movw	r4, r26
    11b4:	00 e0       	ldi	r16, 0x00	; 0
    11b6:	20 16       	cp	r2, r16
    11b8:	00 e0       	ldi	r16, 0x00	; 0
    11ba:	30 06       	cpc	r3, r16
    11bc:	01 e0       	ldi	r16, 0x01	; 1
    11be:	40 06       	cpc	r4, r16
    11c0:	00 e0       	ldi	r16, 0x00	; 0
    11c2:	50 06       	cpc	r5, r16
    11c4:	88 f4       	brcc	.+34     	; 0x11e8 <__umoddi3+0x316>
    11c6:	1f ef       	ldi	r17, 0xFF	; 255
    11c8:	21 16       	cp	r2, r17
    11ca:	31 04       	cpc	r3, r1
    11cc:	41 04       	cpc	r4, r1
    11ce:	51 04       	cpc	r5, r1
    11d0:	39 f0       	breq	.+14     	; 0x11e0 <__umoddi3+0x30e>
    11d2:	30 f0       	brcs	.+12     	; 0x11e0 <__umoddi3+0x30e>
    11d4:	68 e0       	ldi	r22, 0x08	; 8
    11d6:	e6 2e       	mov	r14, r22
    11d8:	f1 2c       	mov	r15, r1
    11da:	01 2d       	mov	r16, r1
    11dc:	11 2d       	mov	r17, r1
    11de:	18 c0       	rjmp	.+48     	; 0x1210 <__umoddi3+0x33e>
    11e0:	ee 24       	eor	r14, r14
    11e2:	ff 24       	eor	r15, r15
    11e4:	87 01       	movw	r16, r14
    11e6:	14 c0       	rjmp	.+40     	; 0x1210 <__umoddi3+0x33e>
    11e8:	40 e0       	ldi	r20, 0x00	; 0
    11ea:	24 16       	cp	r2, r20
    11ec:	40 e0       	ldi	r20, 0x00	; 0
    11ee:	34 06       	cpc	r3, r20
    11f0:	40 e0       	ldi	r20, 0x00	; 0
    11f2:	44 06       	cpc	r4, r20
    11f4:	41 e0       	ldi	r20, 0x01	; 1
    11f6:	54 06       	cpc	r5, r20
    11f8:	30 f0       	brcs	.+12     	; 0x1206 <__umoddi3+0x334>
    11fa:	58 e1       	ldi	r21, 0x18	; 24
    11fc:	e5 2e       	mov	r14, r21
    11fe:	f1 2c       	mov	r15, r1
    1200:	01 2d       	mov	r16, r1
    1202:	11 2d       	mov	r17, r1
    1204:	05 c0       	rjmp	.+10     	; 0x1210 <__umoddi3+0x33e>
    1206:	40 e1       	ldi	r20, 0x10	; 16
    1208:	e4 2e       	mov	r14, r20
    120a:	f1 2c       	mov	r15, r1
    120c:	01 2d       	mov	r16, r1
    120e:	11 2d       	mov	r17, r1
    1210:	d2 01       	movw	r26, r4
    1212:	c1 01       	movw	r24, r2
    1214:	0e 2c       	mov	r0, r14
    1216:	04 c0       	rjmp	.+8      	; 0x1220 <__umoddi3+0x34e>
    1218:	b6 95       	lsr	r27
    121a:	a7 95       	ror	r26
    121c:	97 95       	ror	r25
    121e:	87 95       	ror	r24
    1220:	0a 94       	dec	r0
    1222:	d2 f7       	brpl	.-12     	; 0x1218 <__umoddi3+0x346>
    1224:	83 52       	subi	r24, 0x23	; 35
    1226:	9f 4f       	sbci	r25, 0xFF	; 255
    1228:	dc 01       	movw	r26, r24
    122a:	2c 91       	ld	r18, X
    122c:	30 e2       	ldi	r19, 0x20	; 32
    122e:	a3 2e       	mov	r10, r19
    1230:	b1 2c       	mov	r11, r1
    1232:	c1 2c       	mov	r12, r1
    1234:	d1 2c       	mov	r13, r1
    1236:	d6 01       	movw	r26, r12
    1238:	c5 01       	movw	r24, r10
    123a:	8e 19       	sub	r24, r14
    123c:	9f 09       	sbc	r25, r15
    123e:	a0 0b       	sbc	r26, r16
    1240:	b1 0b       	sbc	r27, r17
    1242:	7c 01       	movw	r14, r24
    1244:	8d 01       	movw	r16, r26
    1246:	e2 1a       	sub	r14, r18
    1248:	f1 08       	sbc	r15, r1
    124a:	01 09       	sbc	r16, r1
    124c:	11 09       	sbc	r17, r1
    124e:	e9 ae       	std	Y+57, r14	; 0x39
    1250:	fa ae       	std	Y+58, r15	; 0x3a
    1252:	0b af       	std	Y+59, r16	; 0x3b
    1254:	1c af       	std	Y+60, r17	; 0x3c
    1256:	e1 14       	cp	r14, r1
    1258:	f1 04       	cpc	r15, r1
    125a:	01 05       	cpc	r16, r1
    125c:	11 05       	cpc	r17, r1
    125e:	39 f4       	brne	.+14     	; 0x126e <__umoddi3+0x39c>
    1260:	64 01       	movw	r12, r8
    1262:	53 01       	movw	r10, r6
    1264:	a2 18       	sub	r10, r2
    1266:	b3 08       	sbc	r11, r3
    1268:	c4 08       	sbc	r12, r4
    126a:	d5 08       	sbc	r13, r5
    126c:	e2 c0       	rjmp	.+452    	; 0x1432 <__umoddi3+0x560>
    126e:	f9 ac       	ldd	r15, Y+57	; 0x39
    1270:	68 96       	adiw	r28, 0x18	; 24
    1272:	ff ae       	std	Y+63, r15	; 0x3f
    1274:	68 97       	sbiw	r28, 0x18	; 24
    1276:	0f 2c       	mov	r0, r15
    1278:	04 c0       	rjmp	.+8      	; 0x1282 <__umoddi3+0x3b0>
    127a:	22 0c       	add	r2, r2
    127c:	33 1c       	adc	r3, r3
    127e:	44 1c       	adc	r4, r4
    1280:	55 1c       	adc	r5, r5
    1282:	0a 94       	dec	r0
    1284:	d2 f7       	brpl	.-12     	; 0x127a <__umoddi3+0x3a8>
    1286:	8a 2d       	mov	r24, r10
    1288:	8f 19       	sub	r24, r15
    128a:	64 01       	movw	r12, r8
    128c:	53 01       	movw	r10, r6
    128e:	08 2e       	mov	r0, r24
    1290:	04 c0       	rjmp	.+8      	; 0x129a <__umoddi3+0x3c8>
    1292:	d6 94       	lsr	r13
    1294:	c7 94       	ror	r12
    1296:	b7 94       	ror	r11
    1298:	a7 94       	ror	r10
    129a:	0a 94       	dec	r0
    129c:	d2 f7       	brpl	.-12     	; 0x1292 <__umoddi3+0x3c0>
    129e:	a4 01       	movw	r20, r8
    12a0:	93 01       	movw	r18, r6
    12a2:	04 c0       	rjmp	.+8      	; 0x12ac <__umoddi3+0x3da>
    12a4:	22 0f       	add	r18, r18
    12a6:	33 1f       	adc	r19, r19
    12a8:	44 1f       	adc	r20, r20
    12aa:	55 1f       	adc	r21, r21
    12ac:	fa 94       	dec	r15
    12ae:	d2 f7       	brpl	.-12     	; 0x12a4 <__umoddi3+0x3d2>
    12b0:	6c 96       	adiw	r28, 0x1c	; 28
    12b2:	6c ac       	ldd	r6, Y+60	; 0x3c
    12b4:	7d ac       	ldd	r7, Y+61	; 0x3d
    12b6:	8e ac       	ldd	r8, Y+62	; 0x3e
    12b8:	9f ac       	ldd	r9, Y+63	; 0x3f
    12ba:	6c 97       	sbiw	r28, 0x1c	; 28
    12bc:	04 c0       	rjmp	.+8      	; 0x12c6 <__umoddi3+0x3f4>
    12be:	96 94       	lsr	r9
    12c0:	87 94       	ror	r8
    12c2:	77 94       	ror	r7
    12c4:	67 94       	ror	r6
    12c6:	8a 95       	dec	r24
    12c8:	d2 f7       	brpl	.-12     	; 0x12be <__umoddi3+0x3ec>
    12ca:	84 01       	movw	r16, r8
    12cc:	73 01       	movw	r14, r6
    12ce:	e2 2a       	or	r14, r18
    12d0:	f3 2a       	or	r15, r19
    12d2:	04 2b       	or	r16, r20
    12d4:	15 2b       	or	r17, r21
    12d6:	ed a6       	std	Y+45, r14	; 0x2d
    12d8:	fe a6       	std	Y+46, r15	; 0x2e
    12da:	0f a7       	std	Y+47, r16	; 0x2f
    12dc:	18 ab       	std	Y+48, r17	; 0x30
    12de:	32 01       	movw	r6, r4
    12e0:	88 24       	eor	r8, r8
    12e2:	99 24       	eor	r9, r9
    12e4:	b2 01       	movw	r22, r4
    12e6:	a1 01       	movw	r20, r2
    12e8:	60 70       	andi	r22, 0x00	; 0
    12ea:	70 70       	andi	r23, 0x00	; 0
    12ec:	25 96       	adiw	r28, 0x05	; 5
    12ee:	4c af       	std	Y+60, r20	; 0x3c
    12f0:	5d af       	std	Y+61, r21	; 0x3d
    12f2:	6e af       	std	Y+62, r22	; 0x3e
    12f4:	7f af       	std	Y+63, r23	; 0x3f
    12f6:	25 97       	sbiw	r28, 0x05	; 5
    12f8:	c6 01       	movw	r24, r12
    12fa:	b5 01       	movw	r22, r10
    12fc:	a4 01       	movw	r20, r8
    12fe:	93 01       	movw	r18, r6
    1300:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
    1304:	7b 01       	movw	r14, r22
    1306:	8c 01       	movw	r16, r24
    1308:	c6 01       	movw	r24, r12
    130a:	b5 01       	movw	r22, r10
    130c:	a4 01       	movw	r20, r8
    130e:	93 01       	movw	r18, r6
    1310:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
    1314:	ca 01       	movw	r24, r20
    1316:	b9 01       	movw	r22, r18
    1318:	25 96       	adiw	r28, 0x05	; 5
    131a:	2c ad       	ldd	r18, Y+60	; 0x3c
    131c:	3d ad       	ldd	r19, Y+61	; 0x3d
    131e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1320:	5f ad       	ldd	r21, Y+63	; 0x3f
    1322:	25 97       	sbiw	r28, 0x05	; 5
    1324:	0e 94 34 3a 	call	0x7468	; 0x7468 <__mulsi3>
    1328:	9b 01       	movw	r18, r22
    132a:	ac 01       	movw	r20, r24
    132c:	87 01       	movw	r16, r14
    132e:	ff 24       	eor	r15, r15
    1330:	ee 24       	eor	r14, r14
    1332:	ad a4       	ldd	r10, Y+45	; 0x2d
    1334:	be a4       	ldd	r11, Y+46	; 0x2e
    1336:	cf a4       	ldd	r12, Y+47	; 0x2f
    1338:	d8 a8       	ldd	r13, Y+48	; 0x30
    133a:	c6 01       	movw	r24, r12
    133c:	aa 27       	eor	r26, r26
    133e:	bb 27       	eor	r27, r27
    1340:	5c 01       	movw	r10, r24
    1342:	6d 01       	movw	r12, r26
    1344:	ae 28       	or	r10, r14
    1346:	bf 28       	or	r11, r15
    1348:	c0 2a       	or	r12, r16
    134a:	d1 2a       	or	r13, r17
    134c:	a2 16       	cp	r10, r18
    134e:	b3 06       	cpc	r11, r19
    1350:	c4 06       	cpc	r12, r20
    1352:	d5 06       	cpc	r13, r21
    1354:	90 f4       	brcc	.+36     	; 0x137a <__umoddi3+0x4a8>
    1356:	a2 0c       	add	r10, r2
    1358:	b3 1c       	adc	r11, r3
    135a:	c4 1c       	adc	r12, r4
    135c:	d5 1c       	adc	r13, r5
    135e:	a2 14       	cp	r10, r2
    1360:	b3 04       	cpc	r11, r3
    1362:	c4 04       	cpc	r12, r4
    1364:	d5 04       	cpc	r13, r5
    1366:	48 f0       	brcs	.+18     	; 0x137a <__umoddi3+0x4a8>
    1368:	a2 16       	cp	r10, r18
    136a:	b3 06       	cpc	r11, r19
    136c:	c4 06       	cpc	r12, r20
    136e:	d5 06       	cpc	r13, r21
    1370:	20 f4       	brcc	.+8      	; 0x137a <__umoddi3+0x4a8>
    1372:	a2 0c       	add	r10, r2
    1374:	b3 1c       	adc	r11, r3
    1376:	c4 1c       	adc	r12, r4
    1378:	d5 1c       	adc	r13, r5
    137a:	a2 1a       	sub	r10, r18
    137c:	b3 0a       	sbc	r11, r19
    137e:	c4 0a       	sbc	r12, r20
    1380:	d5 0a       	sbc	r13, r21
    1382:	c6 01       	movw	r24, r12
    1384:	b5 01       	movw	r22, r10
    1386:	a4 01       	movw	r20, r8
    1388:	93 01       	movw	r18, r6
    138a:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
    138e:	7b 01       	movw	r14, r22
    1390:	8c 01       	movw	r16, r24
    1392:	c6 01       	movw	r24, r12
    1394:	b5 01       	movw	r22, r10
    1396:	a4 01       	movw	r20, r8
    1398:	93 01       	movw	r18, r6
    139a:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
    139e:	ca 01       	movw	r24, r20
    13a0:	b9 01       	movw	r22, r18
    13a2:	25 96       	adiw	r28, 0x05	; 5
    13a4:	2c ad       	ldd	r18, Y+60	; 0x3c
    13a6:	3d ad       	ldd	r19, Y+61	; 0x3d
    13a8:	4e ad       	ldd	r20, Y+62	; 0x3e
    13aa:	5f ad       	ldd	r21, Y+63	; 0x3f
    13ac:	25 97       	sbiw	r28, 0x05	; 5
    13ae:	0e 94 34 3a 	call	0x7468	; 0x7468 <__mulsi3>
    13b2:	9b 01       	movw	r18, r22
    13b4:	ac 01       	movw	r20, r24
    13b6:	87 01       	movw	r16, r14
    13b8:	ff 24       	eor	r15, r15
    13ba:	ee 24       	eor	r14, r14
    13bc:	8d a5       	ldd	r24, Y+45	; 0x2d
    13be:	9e a5       	ldd	r25, Y+46	; 0x2e
    13c0:	af a5       	ldd	r26, Y+47	; 0x2f
    13c2:	b8 a9       	ldd	r27, Y+48	; 0x30
    13c4:	a0 70       	andi	r26, 0x00	; 0
    13c6:	b0 70       	andi	r27, 0x00	; 0
    13c8:	57 01       	movw	r10, r14
    13ca:	68 01       	movw	r12, r16
    13cc:	a8 2a       	or	r10, r24
    13ce:	b9 2a       	or	r11, r25
    13d0:	ca 2a       	or	r12, r26
    13d2:	db 2a       	or	r13, r27
    13d4:	a2 16       	cp	r10, r18
    13d6:	b3 06       	cpc	r11, r19
    13d8:	c4 06       	cpc	r12, r20
    13da:	d5 06       	cpc	r13, r21
    13dc:	90 f4       	brcc	.+36     	; 0x1402 <__umoddi3+0x530>
    13de:	a2 0c       	add	r10, r2
    13e0:	b3 1c       	adc	r11, r3
    13e2:	c4 1c       	adc	r12, r4
    13e4:	d5 1c       	adc	r13, r5
    13e6:	a2 14       	cp	r10, r2
    13e8:	b3 04       	cpc	r11, r3
    13ea:	c4 04       	cpc	r12, r4
    13ec:	d5 04       	cpc	r13, r5
    13ee:	48 f0       	brcs	.+18     	; 0x1402 <__umoddi3+0x530>
    13f0:	a2 16       	cp	r10, r18
    13f2:	b3 06       	cpc	r11, r19
    13f4:	c4 06       	cpc	r12, r20
    13f6:	d5 06       	cpc	r13, r21
    13f8:	20 f4       	brcc	.+8      	; 0x1402 <__umoddi3+0x530>
    13fa:	a2 0c       	add	r10, r2
    13fc:	b3 1c       	adc	r11, r3
    13fe:	c4 1c       	adc	r12, r4
    1400:	d5 1c       	adc	r13, r5
    1402:	6c 96       	adiw	r28, 0x1c	; 28
    1404:	ec ac       	ldd	r14, Y+60	; 0x3c
    1406:	fd ac       	ldd	r15, Y+61	; 0x3d
    1408:	0e ad       	ldd	r16, Y+62	; 0x3e
    140a:	1f ad       	ldd	r17, Y+63	; 0x3f
    140c:	6c 97       	sbiw	r28, 0x1c	; 28
    140e:	68 96       	adiw	r28, 0x18	; 24
    1410:	0f ac       	ldd	r0, Y+63	; 0x3f
    1412:	68 97       	sbiw	r28, 0x18	; 24
    1414:	04 c0       	rjmp	.+8      	; 0x141e <__umoddi3+0x54c>
    1416:	ee 0c       	add	r14, r14
    1418:	ff 1c       	adc	r15, r15
    141a:	00 1f       	adc	r16, r16
    141c:	11 1f       	adc	r17, r17
    141e:	0a 94       	dec	r0
    1420:	d2 f7       	brpl	.-12     	; 0x1416 <__umoddi3+0x544>
    1422:	e9 aa       	std	Y+49, r14	; 0x31
    1424:	fa aa       	std	Y+50, r15	; 0x32
    1426:	0b ab       	std	Y+51, r16	; 0x33
    1428:	1c ab       	std	Y+52, r17	; 0x34
    142a:	a2 1a       	sub	r10, r18
    142c:	b3 0a       	sbc	r11, r19
    142e:	c4 0a       	sbc	r12, r20
    1430:	d5 0a       	sbc	r13, r21
    1432:	32 01       	movw	r6, r4
    1434:	88 24       	eor	r8, r8
    1436:	99 24       	eor	r9, r9
    1438:	b2 01       	movw	r22, r4
    143a:	a1 01       	movw	r20, r2
    143c:	60 70       	andi	r22, 0x00	; 0
    143e:	70 70       	andi	r23, 0x00	; 0
    1440:	29 96       	adiw	r28, 0x09	; 9
    1442:	4c af       	std	Y+60, r20	; 0x3c
    1444:	5d af       	std	Y+61, r21	; 0x3d
    1446:	6e af       	std	Y+62, r22	; 0x3e
    1448:	7f af       	std	Y+63, r23	; 0x3f
    144a:	29 97       	sbiw	r28, 0x09	; 9
    144c:	c6 01       	movw	r24, r12
    144e:	b5 01       	movw	r22, r10
    1450:	a4 01       	movw	r20, r8
    1452:	93 01       	movw	r18, r6
    1454:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
    1458:	7b 01       	movw	r14, r22
    145a:	8c 01       	movw	r16, r24
    145c:	c6 01       	movw	r24, r12
    145e:	b5 01       	movw	r22, r10
    1460:	a4 01       	movw	r20, r8
    1462:	93 01       	movw	r18, r6
    1464:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
    1468:	ca 01       	movw	r24, r20
    146a:	b9 01       	movw	r22, r18
    146c:	29 96       	adiw	r28, 0x09	; 9
    146e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1470:	3d ad       	ldd	r19, Y+61	; 0x3d
    1472:	4e ad       	ldd	r20, Y+62	; 0x3e
    1474:	5f ad       	ldd	r21, Y+63	; 0x3f
    1476:	29 97       	sbiw	r28, 0x09	; 9
    1478:	0e 94 34 3a 	call	0x7468	; 0x7468 <__mulsi3>
    147c:	9b 01       	movw	r18, r22
    147e:	ac 01       	movw	r20, r24
    1480:	87 01       	movw	r16, r14
    1482:	ff 24       	eor	r15, r15
    1484:	ee 24       	eor	r14, r14
    1486:	a9 a8       	ldd	r10, Y+49	; 0x31
    1488:	ba a8       	ldd	r11, Y+50	; 0x32
    148a:	cb a8       	ldd	r12, Y+51	; 0x33
    148c:	dc a8       	ldd	r13, Y+52	; 0x34
    148e:	c6 01       	movw	r24, r12
    1490:	aa 27       	eor	r26, r26
    1492:	bb 27       	eor	r27, r27
    1494:	57 01       	movw	r10, r14
    1496:	68 01       	movw	r12, r16
    1498:	a8 2a       	or	r10, r24
    149a:	b9 2a       	or	r11, r25
    149c:	ca 2a       	or	r12, r26
    149e:	db 2a       	or	r13, r27
    14a0:	a2 16       	cp	r10, r18
    14a2:	b3 06       	cpc	r11, r19
    14a4:	c4 06       	cpc	r12, r20
    14a6:	d5 06       	cpc	r13, r21
    14a8:	90 f4       	brcc	.+36     	; 0x14ce <__umoddi3+0x5fc>
    14aa:	a2 0c       	add	r10, r2
    14ac:	b3 1c       	adc	r11, r3
    14ae:	c4 1c       	adc	r12, r4
    14b0:	d5 1c       	adc	r13, r5
    14b2:	a2 14       	cp	r10, r2
    14b4:	b3 04       	cpc	r11, r3
    14b6:	c4 04       	cpc	r12, r4
    14b8:	d5 04       	cpc	r13, r5
    14ba:	48 f0       	brcs	.+18     	; 0x14ce <__umoddi3+0x5fc>
    14bc:	a2 16       	cp	r10, r18
    14be:	b3 06       	cpc	r11, r19
    14c0:	c4 06       	cpc	r12, r20
    14c2:	d5 06       	cpc	r13, r21
    14c4:	20 f4       	brcc	.+8      	; 0x14ce <__umoddi3+0x5fc>
    14c6:	a2 0c       	add	r10, r2
    14c8:	b3 1c       	adc	r11, r3
    14ca:	c4 1c       	adc	r12, r4
    14cc:	d5 1c       	adc	r13, r5
    14ce:	a2 1a       	sub	r10, r18
    14d0:	b3 0a       	sbc	r11, r19
    14d2:	c4 0a       	sbc	r12, r20
    14d4:	d5 0a       	sbc	r13, r21
    14d6:	c6 01       	movw	r24, r12
    14d8:	b5 01       	movw	r22, r10
    14da:	a4 01       	movw	r20, r8
    14dc:	93 01       	movw	r18, r6
    14de:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
    14e2:	7b 01       	movw	r14, r22
    14e4:	8c 01       	movw	r16, r24
    14e6:	c6 01       	movw	r24, r12
    14e8:	b5 01       	movw	r22, r10
    14ea:	a4 01       	movw	r20, r8
    14ec:	93 01       	movw	r18, r6
    14ee:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
    14f2:	ca 01       	movw	r24, r20
    14f4:	b9 01       	movw	r22, r18
    14f6:	29 96       	adiw	r28, 0x09	; 9
    14f8:	2c ad       	ldd	r18, Y+60	; 0x3c
    14fa:	3d ad       	ldd	r19, Y+61	; 0x3d
    14fc:	4e ad       	ldd	r20, Y+62	; 0x3e
    14fe:	5f ad       	ldd	r21, Y+63	; 0x3f
    1500:	29 97       	sbiw	r28, 0x09	; 9
    1502:	0e 94 34 3a 	call	0x7468	; 0x7468 <__mulsi3>
    1506:	9b 01       	movw	r18, r22
    1508:	ac 01       	movw	r20, r24
    150a:	87 01       	movw	r16, r14
    150c:	ff 24       	eor	r15, r15
    150e:	ee 24       	eor	r14, r14
    1510:	89 a9       	ldd	r24, Y+49	; 0x31
    1512:	9a a9       	ldd	r25, Y+50	; 0x32
    1514:	ab a9       	ldd	r26, Y+51	; 0x33
    1516:	bc a9       	ldd	r27, Y+52	; 0x34
    1518:	a0 70       	andi	r26, 0x00	; 0
    151a:	b0 70       	andi	r27, 0x00	; 0
    151c:	e8 2a       	or	r14, r24
    151e:	f9 2a       	or	r15, r25
    1520:	0a 2b       	or	r16, r26
    1522:	1b 2b       	or	r17, r27
    1524:	e2 16       	cp	r14, r18
    1526:	f3 06       	cpc	r15, r19
    1528:	04 07       	cpc	r16, r20
    152a:	15 07       	cpc	r17, r21
    152c:	90 f4       	brcc	.+36     	; 0x1552 <__umoddi3+0x680>
    152e:	e2 0c       	add	r14, r2
    1530:	f3 1c       	adc	r15, r3
    1532:	04 1d       	adc	r16, r4
    1534:	15 1d       	adc	r17, r5
    1536:	e2 14       	cp	r14, r2
    1538:	f3 04       	cpc	r15, r3
    153a:	04 05       	cpc	r16, r4
    153c:	15 05       	cpc	r17, r5
    153e:	48 f0       	brcs	.+18     	; 0x1552 <__umoddi3+0x680>
    1540:	e2 16       	cp	r14, r18
    1542:	f3 06       	cpc	r15, r19
    1544:	04 07       	cpc	r16, r20
    1546:	15 07       	cpc	r17, r21
    1548:	20 f4       	brcc	.+8      	; 0x1552 <__umoddi3+0x680>
    154a:	e2 0c       	add	r14, r2
    154c:	f3 1c       	adc	r15, r3
    154e:	04 1d       	adc	r16, r4
    1550:	15 1d       	adc	r17, r5
    1552:	e2 1a       	sub	r14, r18
    1554:	f3 0a       	sbc	r15, r19
    1556:	04 0b       	sbc	r16, r20
    1558:	15 0b       	sbc	r17, r21
    155a:	d8 01       	movw	r26, r16
    155c:	c7 01       	movw	r24, r14
    155e:	09 ac       	ldd	r0, Y+57	; 0x39
    1560:	04 c0       	rjmp	.+8      	; 0x156a <__umoddi3+0x698>
    1562:	b6 95       	lsr	r27
    1564:	a7 95       	ror	r26
    1566:	97 95       	ror	r25
    1568:	87 95       	ror	r24
    156a:	0a 94       	dec	r0
    156c:	d2 f7       	brpl	.-12     	; 0x1562 <__umoddi3+0x690>
    156e:	89 8b       	std	Y+17, r24	; 0x11
    1570:	9a 8b       	std	Y+18, r25	; 0x12
    1572:	ab 8b       	std	Y+19, r26	; 0x13
    1574:	bc 8b       	std	Y+20, r27	; 0x14
    1576:	1d 8a       	std	Y+21, r1	; 0x15
    1578:	1e 8a       	std	Y+22, r1	; 0x16
    157a:	1f 8a       	std	Y+23, r1	; 0x17
    157c:	18 8e       	std	Y+24, r1	; 0x18
    157e:	28 2f       	mov	r18, r24
    1580:	3a 89       	ldd	r19, Y+18	; 0x12
    1582:	4b 89       	ldd	r20, Y+19	; 0x13
    1584:	5c 89       	ldd	r21, Y+20	; 0x14
    1586:	6d 89       	ldd	r22, Y+21	; 0x15
    1588:	0c c3       	rjmp	.+1560   	; 0x1ba2 <__umoddi3+0xcd0>
    158a:	6a 14       	cp	r6, r10
    158c:	7b 04       	cpc	r7, r11
    158e:	8c 04       	cpc	r8, r12
    1590:	9d 04       	cpc	r9, r13
    1592:	08 f4       	brcc	.+2      	; 0x1596 <__umoddi3+0x6c4>
    1594:	09 c3       	rjmp	.+1554   	; 0x1ba8 <__umoddi3+0xcd6>
    1596:	00 e0       	ldi	r16, 0x00	; 0
    1598:	a0 16       	cp	r10, r16
    159a:	00 e0       	ldi	r16, 0x00	; 0
    159c:	b0 06       	cpc	r11, r16
    159e:	01 e0       	ldi	r16, 0x01	; 1
    15a0:	c0 06       	cpc	r12, r16
    15a2:	00 e0       	ldi	r16, 0x00	; 0
    15a4:	d0 06       	cpc	r13, r16
    15a6:	88 f4       	brcc	.+34     	; 0x15ca <__umoddi3+0x6f8>
    15a8:	1f ef       	ldi	r17, 0xFF	; 255
    15aa:	a1 16       	cp	r10, r17
    15ac:	b1 04       	cpc	r11, r1
    15ae:	c1 04       	cpc	r12, r1
    15b0:	d1 04       	cpc	r13, r1
    15b2:	39 f0       	breq	.+14     	; 0x15c2 <__umoddi3+0x6f0>
    15b4:	30 f0       	brcs	.+12     	; 0x15c2 <__umoddi3+0x6f0>
    15b6:	28 e0       	ldi	r18, 0x08	; 8
    15b8:	e2 2e       	mov	r14, r18
    15ba:	f1 2c       	mov	r15, r1
    15bc:	01 2d       	mov	r16, r1
    15be:	11 2d       	mov	r17, r1
    15c0:	18 c0       	rjmp	.+48     	; 0x15f2 <__umoddi3+0x720>
    15c2:	ee 24       	eor	r14, r14
    15c4:	ff 24       	eor	r15, r15
    15c6:	87 01       	movw	r16, r14
    15c8:	14 c0       	rjmp	.+40     	; 0x15f2 <__umoddi3+0x720>
    15ca:	40 e0       	ldi	r20, 0x00	; 0
    15cc:	a4 16       	cp	r10, r20
    15ce:	40 e0       	ldi	r20, 0x00	; 0
    15d0:	b4 06       	cpc	r11, r20
    15d2:	40 e0       	ldi	r20, 0x00	; 0
    15d4:	c4 06       	cpc	r12, r20
    15d6:	41 e0       	ldi	r20, 0x01	; 1
    15d8:	d4 06       	cpc	r13, r20
    15da:	30 f0       	brcs	.+12     	; 0x15e8 <__umoddi3+0x716>
    15dc:	98 e1       	ldi	r25, 0x18	; 24
    15de:	e9 2e       	mov	r14, r25
    15e0:	f1 2c       	mov	r15, r1
    15e2:	01 2d       	mov	r16, r1
    15e4:	11 2d       	mov	r17, r1
    15e6:	05 c0       	rjmp	.+10     	; 0x15f2 <__umoddi3+0x720>
    15e8:	80 e1       	ldi	r24, 0x10	; 16
    15ea:	e8 2e       	mov	r14, r24
    15ec:	f1 2c       	mov	r15, r1
    15ee:	01 2d       	mov	r16, r1
    15f0:	11 2d       	mov	r17, r1
    15f2:	d6 01       	movw	r26, r12
    15f4:	c5 01       	movw	r24, r10
    15f6:	0e 2c       	mov	r0, r14
    15f8:	04 c0       	rjmp	.+8      	; 0x1602 <__umoddi3+0x730>
    15fa:	b6 95       	lsr	r27
    15fc:	a7 95       	ror	r26
    15fe:	97 95       	ror	r25
    1600:	87 95       	ror	r24
    1602:	0a 94       	dec	r0
    1604:	d2 f7       	brpl	.-12     	; 0x15fa <__umoddi3+0x728>
    1606:	83 52       	subi	r24, 0x23	; 35
    1608:	9f 4f       	sbci	r25, 0xFF	; 255
    160a:	dc 01       	movw	r26, r24
    160c:	2c 91       	ld	r18, X
    160e:	80 e2       	ldi	r24, 0x20	; 32
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	a0 e0       	ldi	r26, 0x00	; 0
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	8e 19       	sub	r24, r14
    1618:	9f 09       	sbc	r25, r15
    161a:	a0 0b       	sbc	r26, r16
    161c:	b1 0b       	sbc	r27, r17
    161e:	82 1b       	sub	r24, r18
    1620:	91 09       	sbc	r25, r1
    1622:	a1 09       	sbc	r26, r1
    1624:	b1 09       	sbc	r27, r1
    1626:	00 97       	sbiw	r24, 0x00	; 0
    1628:	a1 05       	cpc	r26, r1
    162a:	b1 05       	cpc	r27, r1
    162c:	09 f0       	breq	.+2      	; 0x1630 <__umoddi3+0x75e>
    162e:	4f c0       	rjmp	.+158    	; 0x16ce <__umoddi3+0x7fc>
    1630:	a6 14       	cp	r10, r6
    1632:	b7 04       	cpc	r11, r7
    1634:	c8 04       	cpc	r12, r8
    1636:	d9 04       	cpc	r13, r9
    1638:	58 f0       	brcs	.+22     	; 0x1650 <__umoddi3+0x77e>
    163a:	6c 96       	adiw	r28, 0x1c	; 28
    163c:	ec ac       	ldd	r14, Y+60	; 0x3c
    163e:	fd ac       	ldd	r15, Y+61	; 0x3d
    1640:	0e ad       	ldd	r16, Y+62	; 0x3e
    1642:	1f ad       	ldd	r17, Y+63	; 0x3f
    1644:	6c 97       	sbiw	r28, 0x1c	; 28
    1646:	e2 14       	cp	r14, r2
    1648:	f3 04       	cpc	r15, r3
    164a:	04 05       	cpc	r16, r4
    164c:	15 05       	cpc	r17, r5
    164e:	68 f1       	brcs	.+90     	; 0x16aa <__umoddi3+0x7d8>
    1650:	6c 96       	adiw	r28, 0x1c	; 28
    1652:	ec ac       	ldd	r14, Y+60	; 0x3c
    1654:	fd ac       	ldd	r15, Y+61	; 0x3d
    1656:	0e ad       	ldd	r16, Y+62	; 0x3e
    1658:	1f ad       	ldd	r17, Y+63	; 0x3f
    165a:	6c 97       	sbiw	r28, 0x1c	; 28
    165c:	e2 18       	sub	r14, r2
    165e:	f3 08       	sbc	r15, r3
    1660:	04 09       	sbc	r16, r4
    1662:	15 09       	sbc	r17, r5
    1664:	a4 01       	movw	r20, r8
    1666:	93 01       	movw	r18, r6
    1668:	2a 19       	sub	r18, r10
    166a:	3b 09       	sbc	r19, r11
    166c:	4c 09       	sbc	r20, r12
    166e:	5d 09       	sbc	r21, r13
    1670:	aa 24       	eor	r10, r10
    1672:	bb 24       	eor	r11, r11
    1674:	65 01       	movw	r12, r10
    1676:	6c 96       	adiw	r28, 0x1c	; 28
    1678:	6c ad       	ldd	r22, Y+60	; 0x3c
    167a:	7d ad       	ldd	r23, Y+61	; 0x3d
    167c:	8e ad       	ldd	r24, Y+62	; 0x3e
    167e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1680:	6c 97       	sbiw	r28, 0x1c	; 28
    1682:	6e 15       	cp	r22, r14
    1684:	7f 05       	cpc	r23, r15
    1686:	80 07       	cpc	r24, r16
    1688:	91 07       	cpc	r25, r17
    168a:	28 f4       	brcc	.+10     	; 0x1696 <__umoddi3+0x7c4>
    168c:	b1 e0       	ldi	r27, 0x01	; 1
    168e:	ab 2e       	mov	r10, r27
    1690:	b1 2c       	mov	r11, r1
    1692:	c1 2c       	mov	r12, r1
    1694:	d1 2c       	mov	r13, r1
    1696:	da 01       	movw	r26, r20
    1698:	c9 01       	movw	r24, r18
    169a:	8a 19       	sub	r24, r10
    169c:	9b 09       	sbc	r25, r11
    169e:	ac 09       	sbc	r26, r12
    16a0:	bd 09       	sbc	r27, r13
    16a2:	8d ab       	std	Y+53, r24	; 0x35
    16a4:	9e ab       	std	Y+54, r25	; 0x36
    16a6:	af ab       	std	Y+55, r26	; 0x37
    16a8:	b8 af       	std	Y+56, r27	; 0x38
    16aa:	e9 8a       	std	Y+17, r14	; 0x11
    16ac:	fa 8a       	std	Y+18, r15	; 0x12
    16ae:	0b 8b       	std	Y+19, r16	; 0x13
    16b0:	1c 8b       	std	Y+20, r17	; 0x14
    16b2:	6d a8       	ldd	r6, Y+53	; 0x35
    16b4:	7e a8       	ldd	r7, Y+54	; 0x36
    16b6:	8f a8       	ldd	r8, Y+55	; 0x37
    16b8:	98 ac       	ldd	r9, Y+56	; 0x38
    16ba:	6d 8a       	std	Y+21, r6	; 0x15
    16bc:	7e 8a       	std	Y+22, r7	; 0x16
    16be:	8f 8a       	std	Y+23, r8	; 0x17
    16c0:	98 8e       	std	Y+24, r9	; 0x18
    16c2:	2e 2d       	mov	r18, r14
    16c4:	3a 89       	ldd	r19, Y+18	; 0x12
    16c6:	4b 89       	ldd	r20, Y+19	; 0x13
    16c8:	5c 89       	ldd	r21, Y+20	; 0x14
    16ca:	6d a9       	ldd	r22, Y+53	; 0x35
    16cc:	6a c2       	rjmp	.+1236   	; 0x1ba2 <__umoddi3+0xcd0>
    16ce:	67 96       	adiw	r28, 0x17	; 23
    16d0:	8f af       	std	Y+63, r24	; 0x3f
    16d2:	67 97       	sbiw	r28, 0x17	; 23
    16d4:	a6 01       	movw	r20, r12
    16d6:	95 01       	movw	r18, r10
    16d8:	08 2e       	mov	r0, r24
    16da:	04 c0       	rjmp	.+8      	; 0x16e4 <__umoddi3+0x812>
    16dc:	22 0f       	add	r18, r18
    16de:	33 1f       	adc	r19, r19
    16e0:	44 1f       	adc	r20, r20
    16e2:	55 1f       	adc	r21, r21
    16e4:	0a 94       	dec	r0
    16e6:	d2 f7       	brpl	.-12     	; 0x16dc <__umoddi3+0x80a>
    16e8:	a0 e2       	ldi	r26, 0x20	; 32
    16ea:	aa 2e       	mov	r10, r26
    16ec:	a8 1a       	sub	r10, r24
    16ee:	66 96       	adiw	r28, 0x16	; 22
    16f0:	af ae       	std	Y+63, r10	; 0x3f
    16f2:	66 97       	sbiw	r28, 0x16	; 22
    16f4:	d2 01       	movw	r26, r4
    16f6:	c1 01       	movw	r24, r2
    16f8:	04 c0       	rjmp	.+8      	; 0x1702 <__umoddi3+0x830>
    16fa:	b6 95       	lsr	r27
    16fc:	a7 95       	ror	r26
    16fe:	97 95       	ror	r25
    1700:	87 95       	ror	r24
    1702:	aa 94       	dec	r10
    1704:	d2 f7       	brpl	.-12     	; 0x16fa <__umoddi3+0x828>
    1706:	6c 01       	movw	r12, r24
    1708:	7d 01       	movw	r14, r26
    170a:	c2 2a       	or	r12, r18
    170c:	d3 2a       	or	r13, r19
    170e:	e4 2a       	or	r14, r20
    1710:	f5 2a       	or	r15, r21
    1712:	c9 a6       	std	Y+41, r12	; 0x29
    1714:	da a6       	std	Y+42, r13	; 0x2a
    1716:	eb a6       	std	Y+43, r14	; 0x2b
    1718:	fc a6       	std	Y+44, r15	; 0x2c
    171a:	82 01       	movw	r16, r4
    171c:	71 01       	movw	r14, r2
    171e:	67 96       	adiw	r28, 0x17	; 23
    1720:	0f ac       	ldd	r0, Y+63	; 0x3f
    1722:	67 97       	sbiw	r28, 0x17	; 23
    1724:	04 c0       	rjmp	.+8      	; 0x172e <__umoddi3+0x85c>
    1726:	ee 0c       	add	r14, r14
    1728:	ff 1c       	adc	r15, r15
    172a:	00 1f       	adc	r16, r16
    172c:	11 1f       	adc	r17, r17
    172e:	0a 94       	dec	r0
    1730:	d2 f7       	brpl	.-12     	; 0x1726 <__umoddi3+0x854>
    1732:	ed a2       	std	Y+37, r14	; 0x25
    1734:	fe a2       	std	Y+38, r15	; 0x26
    1736:	0f a3       	std	Y+39, r16	; 0x27
    1738:	18 a7       	std	Y+40, r17	; 0x28
    173a:	64 01       	movw	r12, r8
    173c:	53 01       	movw	r10, r6
    173e:	66 96       	adiw	r28, 0x16	; 22
    1740:	0f ac       	ldd	r0, Y+63	; 0x3f
    1742:	66 97       	sbiw	r28, 0x16	; 22
    1744:	04 c0       	rjmp	.+8      	; 0x174e <__umoddi3+0x87c>
    1746:	d6 94       	lsr	r13
    1748:	c7 94       	ror	r12
    174a:	b7 94       	ror	r11
    174c:	a7 94       	ror	r10
    174e:	0a 94       	dec	r0
    1750:	d2 f7       	brpl	.-12     	; 0x1746 <__umoddi3+0x874>
    1752:	a4 01       	movw	r20, r8
    1754:	93 01       	movw	r18, r6
    1756:	67 96       	adiw	r28, 0x17	; 23
    1758:	0f ac       	ldd	r0, Y+63	; 0x3f
    175a:	67 97       	sbiw	r28, 0x17	; 23
    175c:	04 c0       	rjmp	.+8      	; 0x1766 <__umoddi3+0x894>
    175e:	22 0f       	add	r18, r18
    1760:	33 1f       	adc	r19, r19
    1762:	44 1f       	adc	r20, r20
    1764:	55 1f       	adc	r21, r21
    1766:	0a 94       	dec	r0
    1768:	d2 f7       	brpl	.-12     	; 0x175e <__umoddi3+0x88c>
    176a:	6c 96       	adiw	r28, 0x1c	; 28
    176c:	8c ad       	ldd	r24, Y+60	; 0x3c
    176e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1770:	ae ad       	ldd	r26, Y+62	; 0x3e
    1772:	bf ad       	ldd	r27, Y+63	; 0x3f
    1774:	6c 97       	sbiw	r28, 0x1c	; 28
    1776:	66 96       	adiw	r28, 0x16	; 22
    1778:	0f ac       	ldd	r0, Y+63	; 0x3f
    177a:	66 97       	sbiw	r28, 0x16	; 22
    177c:	04 c0       	rjmp	.+8      	; 0x1786 <__umoddi3+0x8b4>
    177e:	b6 95       	lsr	r27
    1780:	a7 95       	ror	r26
    1782:	97 95       	ror	r25
    1784:	87 95       	ror	r24
    1786:	0a 94       	dec	r0
    1788:	d2 f7       	brpl	.-12     	; 0x177e <__umoddi3+0x8ac>
    178a:	3c 01       	movw	r6, r24
    178c:	4d 01       	movw	r8, r26
    178e:	62 2a       	or	r6, r18
    1790:	73 2a       	or	r7, r19
    1792:	84 2a       	or	r8, r20
    1794:	95 2a       	or	r9, r21
    1796:	69 a2       	std	Y+33, r6	; 0x21
    1798:	7a a2       	std	Y+34, r7	; 0x22
    179a:	8b a2       	std	Y+35, r8	; 0x23
    179c:	9c a2       	std	Y+36, r9	; 0x24
    179e:	6c 96       	adiw	r28, 0x1c	; 28
    17a0:	ec ac       	ldd	r14, Y+60	; 0x3c
    17a2:	fd ac       	ldd	r15, Y+61	; 0x3d
    17a4:	0e ad       	ldd	r16, Y+62	; 0x3e
    17a6:	1f ad       	ldd	r17, Y+63	; 0x3f
    17a8:	6c 97       	sbiw	r28, 0x1c	; 28
    17aa:	67 96       	adiw	r28, 0x17	; 23
    17ac:	0f ac       	ldd	r0, Y+63	; 0x3f
    17ae:	67 97       	sbiw	r28, 0x17	; 23
    17b0:	04 c0       	rjmp	.+8      	; 0x17ba <__umoddi3+0x8e8>
    17b2:	ee 0c       	add	r14, r14
    17b4:	ff 1c       	adc	r15, r15
    17b6:	00 1f       	adc	r16, r16
    17b8:	11 1f       	adc	r17, r17
    17ba:	0a 94       	dec	r0
    17bc:	d2 f7       	brpl	.-12     	; 0x17b2 <__umoddi3+0x8e0>
    17be:	ed 8e       	std	Y+29, r14	; 0x1d
    17c0:	fe 8e       	std	Y+30, r15	; 0x1e
    17c2:	0f 8f       	std	Y+31, r16	; 0x1f
    17c4:	18 a3       	std	Y+32, r17	; 0x20
    17c6:	49 a5       	ldd	r20, Y+41	; 0x29
    17c8:	5a a5       	ldd	r21, Y+42	; 0x2a
    17ca:	6b a5       	ldd	r22, Y+43	; 0x2b
    17cc:	7c a5       	ldd	r23, Y+44	; 0x2c
    17ce:	3b 01       	movw	r6, r22
    17d0:	88 24       	eor	r8, r8
    17d2:	99 24       	eor	r9, r9
    17d4:	60 70       	andi	r22, 0x00	; 0
    17d6:	70 70       	andi	r23, 0x00	; 0
    17d8:	2d 96       	adiw	r28, 0x0d	; 13
    17da:	4c af       	std	Y+60, r20	; 0x3c
    17dc:	5d af       	std	Y+61, r21	; 0x3d
    17de:	6e af       	std	Y+62, r22	; 0x3e
    17e0:	7f af       	std	Y+63, r23	; 0x3f
    17e2:	2d 97       	sbiw	r28, 0x0d	; 13
    17e4:	c6 01       	movw	r24, r12
    17e6:	b5 01       	movw	r22, r10
    17e8:	a4 01       	movw	r20, r8
    17ea:	93 01       	movw	r18, r6
    17ec:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
    17f0:	7b 01       	movw	r14, r22
    17f2:	8c 01       	movw	r16, r24
    17f4:	c6 01       	movw	r24, r12
    17f6:	b5 01       	movw	r22, r10
    17f8:	a4 01       	movw	r20, r8
    17fa:	93 01       	movw	r18, r6
    17fc:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
    1800:	c9 01       	movw	r24, r18
    1802:	da 01       	movw	r26, r20
    1804:	1c 01       	movw	r2, r24
    1806:	2d 01       	movw	r4, r26
    1808:	c2 01       	movw	r24, r4
    180a:	b1 01       	movw	r22, r2
    180c:	2d 96       	adiw	r28, 0x0d	; 13
    180e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1810:	3d ad       	ldd	r19, Y+61	; 0x3d
    1812:	4e ad       	ldd	r20, Y+62	; 0x3e
    1814:	5f ad       	ldd	r21, Y+63	; 0x3f
    1816:	2d 97       	sbiw	r28, 0x0d	; 13
    1818:	0e 94 34 3a 	call	0x7468	; 0x7468 <__mulsi3>
    181c:	9b 01       	movw	r18, r22
    181e:	ac 01       	movw	r20, r24
    1820:	87 01       	movw	r16, r14
    1822:	ff 24       	eor	r15, r15
    1824:	ee 24       	eor	r14, r14
    1826:	a9 a0       	ldd	r10, Y+33	; 0x21
    1828:	ba a0       	ldd	r11, Y+34	; 0x22
    182a:	cb a0       	ldd	r12, Y+35	; 0x23
    182c:	dc a0       	ldd	r13, Y+36	; 0x24
    182e:	c6 01       	movw	r24, r12
    1830:	aa 27       	eor	r26, r26
    1832:	bb 27       	eor	r27, r27
    1834:	57 01       	movw	r10, r14
    1836:	68 01       	movw	r12, r16
    1838:	a8 2a       	or	r10, r24
    183a:	b9 2a       	or	r11, r25
    183c:	ca 2a       	or	r12, r26
    183e:	db 2a       	or	r13, r27
    1840:	a2 16       	cp	r10, r18
    1842:	b3 06       	cpc	r11, r19
    1844:	c4 06       	cpc	r12, r20
    1846:	d5 06       	cpc	r13, r21
    1848:	00 f5       	brcc	.+64     	; 0x188a <__umoddi3+0x9b8>
    184a:	08 94       	sec
    184c:	21 08       	sbc	r2, r1
    184e:	31 08       	sbc	r3, r1
    1850:	41 08       	sbc	r4, r1
    1852:	51 08       	sbc	r5, r1
    1854:	e9 a4       	ldd	r14, Y+41	; 0x29
    1856:	fa a4       	ldd	r15, Y+42	; 0x2a
    1858:	0b a5       	ldd	r16, Y+43	; 0x2b
    185a:	1c a5       	ldd	r17, Y+44	; 0x2c
    185c:	ae 0c       	add	r10, r14
    185e:	bf 1c       	adc	r11, r15
    1860:	c0 1e       	adc	r12, r16
    1862:	d1 1e       	adc	r13, r17
    1864:	ae 14       	cp	r10, r14
    1866:	bf 04       	cpc	r11, r15
    1868:	c0 06       	cpc	r12, r16
    186a:	d1 06       	cpc	r13, r17
    186c:	70 f0       	brcs	.+28     	; 0x188a <__umoddi3+0x9b8>
    186e:	a2 16       	cp	r10, r18
    1870:	b3 06       	cpc	r11, r19
    1872:	c4 06       	cpc	r12, r20
    1874:	d5 06       	cpc	r13, r21
    1876:	48 f4       	brcc	.+18     	; 0x188a <__umoddi3+0x9b8>
    1878:	08 94       	sec
    187a:	21 08       	sbc	r2, r1
    187c:	31 08       	sbc	r3, r1
    187e:	41 08       	sbc	r4, r1
    1880:	51 08       	sbc	r5, r1
    1882:	ae 0c       	add	r10, r14
    1884:	bf 1c       	adc	r11, r15
    1886:	c0 1e       	adc	r12, r16
    1888:	d1 1e       	adc	r13, r17
    188a:	a2 1a       	sub	r10, r18
    188c:	b3 0a       	sbc	r11, r19
    188e:	c4 0a       	sbc	r12, r20
    1890:	d5 0a       	sbc	r13, r21
    1892:	c6 01       	movw	r24, r12
    1894:	b5 01       	movw	r22, r10
    1896:	a4 01       	movw	r20, r8
    1898:	93 01       	movw	r18, r6
    189a:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
    189e:	7b 01       	movw	r14, r22
    18a0:	8c 01       	movw	r16, r24
    18a2:	c6 01       	movw	r24, r12
    18a4:	b5 01       	movw	r22, r10
    18a6:	a4 01       	movw	r20, r8
    18a8:	93 01       	movw	r18, r6
    18aa:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <__udivmodsi4>
    18ae:	c9 01       	movw	r24, r18
    18b0:	da 01       	movw	r26, r20
    18b2:	3c 01       	movw	r6, r24
    18b4:	4d 01       	movw	r8, r26
    18b6:	c4 01       	movw	r24, r8
    18b8:	b3 01       	movw	r22, r6
    18ba:	2d 96       	adiw	r28, 0x0d	; 13
    18bc:	2c ad       	ldd	r18, Y+60	; 0x3c
    18be:	3d ad       	ldd	r19, Y+61	; 0x3d
    18c0:	4e ad       	ldd	r20, Y+62	; 0x3e
    18c2:	5f ad       	ldd	r21, Y+63	; 0x3f
    18c4:	2d 97       	sbiw	r28, 0x0d	; 13
    18c6:	0e 94 34 3a 	call	0x7468	; 0x7468 <__mulsi3>
    18ca:	9b 01       	movw	r18, r22
    18cc:	ac 01       	movw	r20, r24
    18ce:	87 01       	movw	r16, r14
    18d0:	ff 24       	eor	r15, r15
    18d2:	ee 24       	eor	r14, r14
    18d4:	89 a1       	ldd	r24, Y+33	; 0x21
    18d6:	9a a1       	ldd	r25, Y+34	; 0x22
    18d8:	ab a1       	ldd	r26, Y+35	; 0x23
    18da:	bc a1       	ldd	r27, Y+36	; 0x24
    18dc:	a0 70       	andi	r26, 0x00	; 0
    18de:	b0 70       	andi	r27, 0x00	; 0
    18e0:	57 01       	movw	r10, r14
    18e2:	68 01       	movw	r12, r16
    18e4:	a8 2a       	or	r10, r24
    18e6:	b9 2a       	or	r11, r25
    18e8:	ca 2a       	or	r12, r26
    18ea:	db 2a       	or	r13, r27
    18ec:	a2 16       	cp	r10, r18
    18ee:	b3 06       	cpc	r11, r19
    18f0:	c4 06       	cpc	r12, r20
    18f2:	d5 06       	cpc	r13, r21
    18f4:	00 f5       	brcc	.+64     	; 0x1936 <__umoddi3+0xa64>
    18f6:	08 94       	sec
    18f8:	61 08       	sbc	r6, r1
    18fa:	71 08       	sbc	r7, r1
    18fc:	81 08       	sbc	r8, r1
    18fe:	91 08       	sbc	r9, r1
    1900:	69 a5       	ldd	r22, Y+41	; 0x29
    1902:	7a a5       	ldd	r23, Y+42	; 0x2a
    1904:	8b a5       	ldd	r24, Y+43	; 0x2b
    1906:	9c a5       	ldd	r25, Y+44	; 0x2c
    1908:	a6 0e       	add	r10, r22
    190a:	b7 1e       	adc	r11, r23
    190c:	c8 1e       	adc	r12, r24
    190e:	d9 1e       	adc	r13, r25
    1910:	a6 16       	cp	r10, r22
    1912:	b7 06       	cpc	r11, r23
    1914:	c8 06       	cpc	r12, r24
    1916:	d9 06       	cpc	r13, r25
    1918:	70 f0       	brcs	.+28     	; 0x1936 <__umoddi3+0xa64>
    191a:	a2 16       	cp	r10, r18
    191c:	b3 06       	cpc	r11, r19
    191e:	c4 06       	cpc	r12, r20
    1920:	d5 06       	cpc	r13, r21
    1922:	48 f4       	brcc	.+18     	; 0x1936 <__umoddi3+0xa64>
    1924:	08 94       	sec
    1926:	61 08       	sbc	r6, r1
    1928:	71 08       	sbc	r7, r1
    192a:	81 08       	sbc	r8, r1
    192c:	91 08       	sbc	r9, r1
    192e:	a6 0e       	add	r10, r22
    1930:	b7 1e       	adc	r11, r23
    1932:	c8 1e       	adc	r12, r24
    1934:	d9 1e       	adc	r13, r25
    1936:	d6 01       	movw	r26, r12
    1938:	c5 01       	movw	r24, r10
    193a:	82 1b       	sub	r24, r18
    193c:	93 0b       	sbc	r25, r19
    193e:	a4 0b       	sbc	r26, r20
    1940:	b5 0b       	sbc	r27, r21
    1942:	89 8f       	std	Y+25, r24	; 0x19
    1944:	9a 8f       	std	Y+26, r25	; 0x1a
    1946:	ab 8f       	std	Y+27, r26	; 0x1b
    1948:	bc 8f       	std	Y+28, r27	; 0x1c
    194a:	d1 01       	movw	r26, r2
    194c:	99 27       	eor	r25, r25
    194e:	88 27       	eor	r24, r24
    1950:	84 01       	movw	r16, r8
    1952:	73 01       	movw	r14, r6
    1954:	e8 2a       	or	r14, r24
    1956:	f9 2a       	or	r15, r25
    1958:	0a 2b       	or	r16, r26
    195a:	1b 2b       	or	r17, r27
    195c:	4f ef       	ldi	r20, 0xFF	; 255
    195e:	a4 2e       	mov	r10, r20
    1960:	4f ef       	ldi	r20, 0xFF	; 255
    1962:	b4 2e       	mov	r11, r20
    1964:	c1 2c       	mov	r12, r1
    1966:	d1 2c       	mov	r13, r1
    1968:	ae 20       	and	r10, r14
    196a:	bf 20       	and	r11, r15
    196c:	c0 22       	and	r12, r16
    196e:	d1 22       	and	r13, r17
    1970:	78 01       	movw	r14, r16
    1972:	00 27       	eor	r16, r16
    1974:	11 27       	eor	r17, r17
    1976:	6d a0       	ldd	r6, Y+37	; 0x25
    1978:	7e a0       	ldd	r7, Y+38	; 0x26
    197a:	8f a0       	ldd	r8, Y+39	; 0x27
    197c:	98 a4       	ldd	r9, Y+40	; 0x28
    197e:	4f ef       	ldi	r20, 0xFF	; 255
    1980:	5f ef       	ldi	r21, 0xFF	; 255
    1982:	60 e0       	ldi	r22, 0x00	; 0
    1984:	70 e0       	ldi	r23, 0x00	; 0
    1986:	64 22       	and	r6, r20
    1988:	75 22       	and	r7, r21
    198a:	86 22       	and	r8, r22
    198c:	97 22       	and	r9, r23
    198e:	8d a1       	ldd	r24, Y+37	; 0x25
    1990:	9e a1       	ldd	r25, Y+38	; 0x26
    1992:	af a1       	ldd	r26, Y+39	; 0x27
    1994:	b8 a5       	ldd	r27, Y+40	; 0x28
    1996:	bd 01       	movw	r22, r26
    1998:	88 27       	eor	r24, r24
    199a:	99 27       	eor	r25, r25
    199c:	65 96       	adiw	r28, 0x15	; 21
    199e:	6c af       	std	Y+60, r22	; 0x3c
    19a0:	7d af       	std	Y+61, r23	; 0x3d
    19a2:	8e af       	std	Y+62, r24	; 0x3e
    19a4:	9f af       	std	Y+63, r25	; 0x3f
    19a6:	65 97       	sbiw	r28, 0x15	; 21
    19a8:	c6 01       	movw	r24, r12
    19aa:	b5 01       	movw	r22, r10
    19ac:	a4 01       	movw	r20, r8
    19ae:	93 01       	movw	r18, r6
    19b0:	0e 94 34 3a 	call	0x7468	; 0x7468 <__mulsi3>
    19b4:	61 96       	adiw	r28, 0x11	; 17
    19b6:	6c af       	std	Y+60, r22	; 0x3c
    19b8:	7d af       	std	Y+61, r23	; 0x3d
    19ba:	8e af       	std	Y+62, r24	; 0x3e
    19bc:	9f af       	std	Y+63, r25	; 0x3f
    19be:	61 97       	sbiw	r28, 0x11	; 17
    19c0:	c6 01       	movw	r24, r12
    19c2:	b5 01       	movw	r22, r10
    19c4:	65 96       	adiw	r28, 0x15	; 21
    19c6:	2c ad       	ldd	r18, Y+60	; 0x3c
    19c8:	3d ad       	ldd	r19, Y+61	; 0x3d
    19ca:	4e ad       	ldd	r20, Y+62	; 0x3e
    19cc:	5f ad       	ldd	r21, Y+63	; 0x3f
    19ce:	65 97       	sbiw	r28, 0x15	; 21
    19d0:	0e 94 34 3a 	call	0x7468	; 0x7468 <__mulsi3>
    19d4:	1b 01       	movw	r2, r22
    19d6:	2c 01       	movw	r4, r24
    19d8:	c8 01       	movw	r24, r16
    19da:	b7 01       	movw	r22, r14
    19dc:	a4 01       	movw	r20, r8
    19de:	93 01       	movw	r18, r6
    19e0:	0e 94 34 3a 	call	0x7468	; 0x7468 <__mulsi3>
    19e4:	5b 01       	movw	r10, r22
    19e6:	6c 01       	movw	r12, r24
    19e8:	c8 01       	movw	r24, r16
    19ea:	b7 01       	movw	r22, r14
    19ec:	65 96       	adiw	r28, 0x15	; 21
    19ee:	2c ad       	ldd	r18, Y+60	; 0x3c
    19f0:	3d ad       	ldd	r19, Y+61	; 0x3d
    19f2:	4e ad       	ldd	r20, Y+62	; 0x3e
    19f4:	5f ad       	ldd	r21, Y+63	; 0x3f
    19f6:	65 97       	sbiw	r28, 0x15	; 21
    19f8:	0e 94 34 3a 	call	0x7468	; 0x7468 <__mulsi3>
    19fc:	7b 01       	movw	r14, r22
    19fe:	8c 01       	movw	r16, r24
    1a00:	a6 01       	movw	r20, r12
    1a02:	95 01       	movw	r18, r10
    1a04:	22 0d       	add	r18, r2
    1a06:	33 1d       	adc	r19, r3
    1a08:	44 1d       	adc	r20, r4
    1a0a:	55 1d       	adc	r21, r5
    1a0c:	61 96       	adiw	r28, 0x11	; 17
    1a0e:	6c ac       	ldd	r6, Y+60	; 0x3c
    1a10:	7d ac       	ldd	r7, Y+61	; 0x3d
    1a12:	8e ac       	ldd	r8, Y+62	; 0x3e
    1a14:	9f ac       	ldd	r9, Y+63	; 0x3f
    1a16:	61 97       	sbiw	r28, 0x11	; 17
    1a18:	c4 01       	movw	r24, r8
    1a1a:	aa 27       	eor	r26, r26
    1a1c:	bb 27       	eor	r27, r27
    1a1e:	28 0f       	add	r18, r24
    1a20:	39 1f       	adc	r19, r25
    1a22:	4a 1f       	adc	r20, r26
    1a24:	5b 1f       	adc	r21, r27
    1a26:	2a 15       	cp	r18, r10
    1a28:	3b 05       	cpc	r19, r11
    1a2a:	4c 05       	cpc	r20, r12
    1a2c:	5d 05       	cpc	r21, r13
    1a2e:	48 f4       	brcc	.+18     	; 0x1a42 <__umoddi3+0xb70>
    1a30:	81 2c       	mov	r8, r1
    1a32:	91 2c       	mov	r9, r1
    1a34:	e1 e0       	ldi	r30, 0x01	; 1
    1a36:	ae 2e       	mov	r10, r30
    1a38:	b1 2c       	mov	r11, r1
    1a3a:	e8 0c       	add	r14, r8
    1a3c:	f9 1c       	adc	r15, r9
    1a3e:	0a 1d       	adc	r16, r10
    1a40:	1b 1d       	adc	r17, r11
    1a42:	ca 01       	movw	r24, r20
    1a44:	aa 27       	eor	r26, r26
    1a46:	bb 27       	eor	r27, r27
    1a48:	57 01       	movw	r10, r14
    1a4a:	68 01       	movw	r12, r16
    1a4c:	a8 0e       	add	r10, r24
    1a4e:	b9 1e       	adc	r11, r25
    1a50:	ca 1e       	adc	r12, r26
    1a52:	db 1e       	adc	r13, r27
    1a54:	a9 01       	movw	r20, r18
    1a56:	33 27       	eor	r19, r19
    1a58:	22 27       	eor	r18, r18
    1a5a:	61 96       	adiw	r28, 0x11	; 17
    1a5c:	8c ad       	ldd	r24, Y+60	; 0x3c
    1a5e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1a60:	ae ad       	ldd	r26, Y+62	; 0x3e
    1a62:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a64:	61 97       	sbiw	r28, 0x11	; 17
    1a66:	a0 70       	andi	r26, 0x00	; 0
    1a68:	b0 70       	andi	r27, 0x00	; 0
    1a6a:	28 0f       	add	r18, r24
    1a6c:	39 1f       	adc	r19, r25
    1a6e:	4a 1f       	adc	r20, r26
    1a70:	5b 1f       	adc	r21, r27
    1a72:	e9 8c       	ldd	r14, Y+25	; 0x19
    1a74:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1a76:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1a78:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1a7a:	ea 14       	cp	r14, r10
    1a7c:	fb 04       	cpc	r15, r11
    1a7e:	0c 05       	cpc	r16, r12
    1a80:	1d 05       	cpc	r17, r13
    1a82:	70 f0       	brcs	.+28     	; 0x1aa0 <__umoddi3+0xbce>
    1a84:	ae 14       	cp	r10, r14
    1a86:	bf 04       	cpc	r11, r15
    1a88:	c0 06       	cpc	r12, r16
    1a8a:	d1 06       	cpc	r13, r17
    1a8c:	69 f5       	brne	.+90     	; 0x1ae8 <__umoddi3+0xc16>
    1a8e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1a90:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1a92:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a94:	98 a1       	ldd	r25, Y+32	; 0x20
    1a96:	62 17       	cp	r22, r18
    1a98:	73 07       	cpc	r23, r19
    1a9a:	84 07       	cpc	r24, r20
    1a9c:	95 07       	cpc	r25, r21
    1a9e:	20 f5       	brcc	.+72     	; 0x1ae8 <__umoddi3+0xc16>
    1aa0:	da 01       	movw	r26, r20
    1aa2:	c9 01       	movw	r24, r18
    1aa4:	6d a0       	ldd	r6, Y+37	; 0x25
    1aa6:	7e a0       	ldd	r7, Y+38	; 0x26
    1aa8:	8f a0       	ldd	r8, Y+39	; 0x27
    1aaa:	98 a4       	ldd	r9, Y+40	; 0x28
    1aac:	86 19       	sub	r24, r6
    1aae:	97 09       	sbc	r25, r7
    1ab0:	a8 09       	sbc	r26, r8
    1ab2:	b9 09       	sbc	r27, r9
    1ab4:	e9 a4       	ldd	r14, Y+41	; 0x29
    1ab6:	fa a4       	ldd	r15, Y+42	; 0x2a
    1ab8:	0b a5       	ldd	r16, Y+43	; 0x2b
    1aba:	1c a5       	ldd	r17, Y+44	; 0x2c
    1abc:	ae 18       	sub	r10, r14
    1abe:	bf 08       	sbc	r11, r15
    1ac0:	c0 0a       	sbc	r12, r16
    1ac2:	d1 0a       	sbc	r13, r17
    1ac4:	ee 24       	eor	r14, r14
    1ac6:	ff 24       	eor	r15, r15
    1ac8:	87 01       	movw	r16, r14
    1aca:	28 17       	cp	r18, r24
    1acc:	39 07       	cpc	r19, r25
    1ace:	4a 07       	cpc	r20, r26
    1ad0:	5b 07       	cpc	r21, r27
    1ad2:	28 f4       	brcc	.+10     	; 0x1ade <__umoddi3+0xc0c>
    1ad4:	21 e0       	ldi	r18, 0x01	; 1
    1ad6:	e2 2e       	mov	r14, r18
    1ad8:	f1 2c       	mov	r15, r1
    1ada:	01 2d       	mov	r16, r1
    1adc:	11 2d       	mov	r17, r1
    1ade:	ae 18       	sub	r10, r14
    1ae0:	bf 08       	sbc	r11, r15
    1ae2:	c0 0a       	sbc	r12, r16
    1ae4:	d1 0a       	sbc	r13, r17
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <__umoddi3+0xc1a>
    1ae8:	da 01       	movw	r26, r20
    1aea:	c9 01       	movw	r24, r18
    1aec:	6d 8c       	ldd	r6, Y+29	; 0x1d
    1aee:	7e 8c       	ldd	r7, Y+30	; 0x1e
    1af0:	8f 8c       	ldd	r8, Y+31	; 0x1f
    1af2:	98 a0       	ldd	r9, Y+32	; 0x20
    1af4:	68 1a       	sub	r6, r24
    1af6:	79 0a       	sbc	r7, r25
    1af8:	8a 0a       	sbc	r8, r26
    1afa:	9b 0a       	sbc	r9, r27
    1afc:	49 8d       	ldd	r20, Y+25	; 0x19
    1afe:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1b00:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1b02:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1b04:	4a 19       	sub	r20, r10
    1b06:	5b 09       	sbc	r21, r11
    1b08:	6c 09       	sbc	r22, r12
    1b0a:	7d 09       	sbc	r23, r13
    1b0c:	5a 01       	movw	r10, r20
    1b0e:	6b 01       	movw	r12, r22
    1b10:	22 24       	eor	r2, r2
    1b12:	33 24       	eor	r3, r3
    1b14:	21 01       	movw	r4, r2
    1b16:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1b18:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1b1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b1c:	98 a1       	ldd	r25, Y+32	; 0x20
    1b1e:	66 15       	cp	r22, r6
    1b20:	77 05       	cpc	r23, r7
    1b22:	88 05       	cpc	r24, r8
    1b24:	99 05       	cpc	r25, r9
    1b26:	28 f4       	brcc	.+10     	; 0x1b32 <__umoddi3+0xc60>
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	28 2e       	mov	r2, r24
    1b2c:	31 2c       	mov	r3, r1
    1b2e:	41 2c       	mov	r4, r1
    1b30:	51 2c       	mov	r5, r1
    1b32:	86 01       	movw	r16, r12
    1b34:	75 01       	movw	r14, r10
    1b36:	e2 18       	sub	r14, r2
    1b38:	f3 08       	sbc	r15, r3
    1b3a:	04 09       	sbc	r16, r4
    1b3c:	15 09       	sbc	r17, r5
    1b3e:	a8 01       	movw	r20, r16
    1b40:	97 01       	movw	r18, r14
    1b42:	66 96       	adiw	r28, 0x16	; 22
    1b44:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b46:	66 97       	sbiw	r28, 0x16	; 22
    1b48:	04 c0       	rjmp	.+8      	; 0x1b52 <__umoddi3+0xc80>
    1b4a:	22 0f       	add	r18, r18
    1b4c:	33 1f       	adc	r19, r19
    1b4e:	44 1f       	adc	r20, r20
    1b50:	55 1f       	adc	r21, r21
    1b52:	0a 94       	dec	r0
    1b54:	d2 f7       	brpl	.-12     	; 0x1b4a <__umoddi3+0xc78>
    1b56:	d4 01       	movw	r26, r8
    1b58:	c3 01       	movw	r24, r6
    1b5a:	67 96       	adiw	r28, 0x17	; 23
    1b5c:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b5e:	67 97       	sbiw	r28, 0x17	; 23
    1b60:	04 c0       	rjmp	.+8      	; 0x1b6a <__umoddi3+0xc98>
    1b62:	b6 95       	lsr	r27
    1b64:	a7 95       	ror	r26
    1b66:	97 95       	ror	r25
    1b68:	87 95       	ror	r24
    1b6a:	0a 94       	dec	r0
    1b6c:	d2 f7       	brpl	.-12     	; 0x1b62 <__umoddi3+0xc90>
    1b6e:	28 2b       	or	r18, r24
    1b70:	39 2b       	or	r19, r25
    1b72:	4a 2b       	or	r20, r26
    1b74:	5b 2b       	or	r21, r27
    1b76:	29 8b       	std	Y+17, r18	; 0x11
    1b78:	3a 8b       	std	Y+18, r19	; 0x12
    1b7a:	4b 8b       	std	Y+19, r20	; 0x13
    1b7c:	5c 8b       	std	Y+20, r21	; 0x14
    1b7e:	67 96       	adiw	r28, 0x17	; 23
    1b80:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b82:	67 97       	sbiw	r28, 0x17	; 23
    1b84:	04 c0       	rjmp	.+8      	; 0x1b8e <__umoddi3+0xcbc>
    1b86:	16 95       	lsr	r17
    1b88:	07 95       	ror	r16
    1b8a:	f7 94       	ror	r15
    1b8c:	e7 94       	ror	r14
    1b8e:	0a 94       	dec	r0
    1b90:	d2 f7       	brpl	.-12     	; 0x1b86 <__umoddi3+0xcb4>
    1b92:	ed 8a       	std	Y+21, r14	; 0x15
    1b94:	fe 8a       	std	Y+22, r15	; 0x16
    1b96:	0f 8b       	std	Y+23, r16	; 0x17
    1b98:	18 8f       	std	Y+24, r17	; 0x18
    1b9a:	3a 89       	ldd	r19, Y+18	; 0x12
    1b9c:	4b 89       	ldd	r20, Y+19	; 0x13
    1b9e:	5c 89       	ldd	r21, Y+20	; 0x14
    1ba0:	6e 2d       	mov	r22, r14
    1ba2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba8:	c5 5a       	subi	r28, 0xA5	; 165
    1baa:	df 4f       	sbci	r29, 0xFF	; 255
    1bac:	e2 e1       	ldi	r30, 0x12	; 18
    1bae:	0c 94 91 3a 	jmp	0x7522	; 0x7522 <__epilogue_restores__>

00001bb2 <_fpadd_parts>:
    1bb2:	a0 e0       	ldi	r26, 0x00	; 0
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	ef ed       	ldi	r30, 0xDF	; 223
    1bb8:	fd e0       	ldi	r31, 0x0D	; 13
    1bba:	0c 94 75 3a 	jmp	0x74ea	; 0x74ea <__prologue_saves__>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	2b 01       	movw	r4, r22
    1bc2:	fa 01       	movw	r30, r20
    1bc4:	9c 91       	ld	r25, X
    1bc6:	92 30       	cpi	r25, 0x02	; 2
    1bc8:	08 f4       	brcc	.+2      	; 0x1bcc <_fpadd_parts+0x1a>
    1bca:	39 c1       	rjmp	.+626    	; 0x1e3e <_fpadd_parts+0x28c>
    1bcc:	eb 01       	movw	r28, r22
    1bce:	88 81       	ld	r24, Y
    1bd0:	82 30       	cpi	r24, 0x02	; 2
    1bd2:	08 f4       	brcc	.+2      	; 0x1bd6 <_fpadd_parts+0x24>
    1bd4:	33 c1       	rjmp	.+614    	; 0x1e3c <_fpadd_parts+0x28a>
    1bd6:	94 30       	cpi	r25, 0x04	; 4
    1bd8:	69 f4       	brne	.+26     	; 0x1bf4 <_fpadd_parts+0x42>
    1bda:	84 30       	cpi	r24, 0x04	; 4
    1bdc:	09 f0       	breq	.+2      	; 0x1be0 <_fpadd_parts+0x2e>
    1bde:	2f c1       	rjmp	.+606    	; 0x1e3e <_fpadd_parts+0x28c>
    1be0:	11 96       	adiw	r26, 0x01	; 1
    1be2:	9c 91       	ld	r25, X
    1be4:	11 97       	sbiw	r26, 0x01	; 1
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	98 17       	cp	r25, r24
    1bea:	09 f4       	brne	.+2      	; 0x1bee <_fpadd_parts+0x3c>
    1bec:	28 c1       	rjmp	.+592    	; 0x1e3e <_fpadd_parts+0x28c>
    1bee:	a5 ed       	ldi	r26, 0xD5	; 213
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	25 c1       	rjmp	.+586    	; 0x1e3e <_fpadd_parts+0x28c>
    1bf4:	84 30       	cpi	r24, 0x04	; 4
    1bf6:	09 f4       	brne	.+2      	; 0x1bfa <_fpadd_parts+0x48>
    1bf8:	21 c1       	rjmp	.+578    	; 0x1e3c <_fpadd_parts+0x28a>
    1bfa:	82 30       	cpi	r24, 0x02	; 2
    1bfc:	a9 f4       	brne	.+42     	; 0x1c28 <_fpadd_parts+0x76>
    1bfe:	92 30       	cpi	r25, 0x02	; 2
    1c00:	09 f0       	breq	.+2      	; 0x1c04 <_fpadd_parts+0x52>
    1c02:	1d c1       	rjmp	.+570    	; 0x1e3e <_fpadd_parts+0x28c>
    1c04:	9a 01       	movw	r18, r20
    1c06:	ad 01       	movw	r20, r26
    1c08:	88 e0       	ldi	r24, 0x08	; 8
    1c0a:	ea 01       	movw	r28, r20
    1c0c:	09 90       	ld	r0, Y+
    1c0e:	ae 01       	movw	r20, r28
    1c10:	e9 01       	movw	r28, r18
    1c12:	09 92       	st	Y+, r0
    1c14:	9e 01       	movw	r18, r28
    1c16:	81 50       	subi	r24, 0x01	; 1
    1c18:	c1 f7       	brne	.-16     	; 0x1c0a <_fpadd_parts+0x58>
    1c1a:	e2 01       	movw	r28, r4
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	11 96       	adiw	r26, 0x01	; 1
    1c20:	9c 91       	ld	r25, X
    1c22:	89 23       	and	r24, r25
    1c24:	81 83       	std	Z+1, r24	; 0x01
    1c26:	08 c1       	rjmp	.+528    	; 0x1e38 <_fpadd_parts+0x286>
    1c28:	92 30       	cpi	r25, 0x02	; 2
    1c2a:	09 f4       	brne	.+2      	; 0x1c2e <_fpadd_parts+0x7c>
    1c2c:	07 c1       	rjmp	.+526    	; 0x1e3c <_fpadd_parts+0x28a>
    1c2e:	12 96       	adiw	r26, 0x02	; 2
    1c30:	2d 90       	ld	r2, X+
    1c32:	3c 90       	ld	r3, X
    1c34:	13 97       	sbiw	r26, 0x03	; 3
    1c36:	eb 01       	movw	r28, r22
    1c38:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c3c:	14 96       	adiw	r26, 0x04	; 4
    1c3e:	ad 90       	ld	r10, X+
    1c40:	bd 90       	ld	r11, X+
    1c42:	cd 90       	ld	r12, X+
    1c44:	dc 90       	ld	r13, X
    1c46:	17 97       	sbiw	r26, 0x07	; 7
    1c48:	ec 80       	ldd	r14, Y+4	; 0x04
    1c4a:	fd 80       	ldd	r15, Y+5	; 0x05
    1c4c:	0e 81       	ldd	r16, Y+6	; 0x06
    1c4e:	1f 81       	ldd	r17, Y+7	; 0x07
    1c50:	91 01       	movw	r18, r2
    1c52:	28 1b       	sub	r18, r24
    1c54:	39 0b       	sbc	r19, r25
    1c56:	b9 01       	movw	r22, r18
    1c58:	37 ff       	sbrs	r19, 7
    1c5a:	04 c0       	rjmp	.+8      	; 0x1c64 <_fpadd_parts+0xb2>
    1c5c:	66 27       	eor	r22, r22
    1c5e:	77 27       	eor	r23, r23
    1c60:	62 1b       	sub	r22, r18
    1c62:	73 0b       	sbc	r23, r19
    1c64:	60 32       	cpi	r22, 0x20	; 32
    1c66:	71 05       	cpc	r23, r1
    1c68:	0c f0       	brlt	.+2      	; 0x1c6c <_fpadd_parts+0xba>
    1c6a:	61 c0       	rjmp	.+194    	; 0x1d2e <_fpadd_parts+0x17c>
    1c6c:	12 16       	cp	r1, r18
    1c6e:	13 06       	cpc	r1, r19
    1c70:	6c f5       	brge	.+90     	; 0x1ccc <_fpadd_parts+0x11a>
    1c72:	37 01       	movw	r6, r14
    1c74:	48 01       	movw	r8, r16
    1c76:	06 2e       	mov	r0, r22
    1c78:	04 c0       	rjmp	.+8      	; 0x1c82 <_fpadd_parts+0xd0>
    1c7a:	96 94       	lsr	r9
    1c7c:	87 94       	ror	r8
    1c7e:	77 94       	ror	r7
    1c80:	67 94       	ror	r6
    1c82:	0a 94       	dec	r0
    1c84:	d2 f7       	brpl	.-12     	; 0x1c7a <_fpadd_parts+0xc8>
    1c86:	21 e0       	ldi	r18, 0x01	; 1
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	40 e0       	ldi	r20, 0x00	; 0
    1c8c:	50 e0       	ldi	r21, 0x00	; 0
    1c8e:	04 c0       	rjmp	.+8      	; 0x1c98 <_fpadd_parts+0xe6>
    1c90:	22 0f       	add	r18, r18
    1c92:	33 1f       	adc	r19, r19
    1c94:	44 1f       	adc	r20, r20
    1c96:	55 1f       	adc	r21, r21
    1c98:	6a 95       	dec	r22
    1c9a:	d2 f7       	brpl	.-12     	; 0x1c90 <_fpadd_parts+0xde>
    1c9c:	21 50       	subi	r18, 0x01	; 1
    1c9e:	30 40       	sbci	r19, 0x00	; 0
    1ca0:	40 40       	sbci	r20, 0x00	; 0
    1ca2:	50 40       	sbci	r21, 0x00	; 0
    1ca4:	2e 21       	and	r18, r14
    1ca6:	3f 21       	and	r19, r15
    1ca8:	40 23       	and	r20, r16
    1caa:	51 23       	and	r21, r17
    1cac:	21 15       	cp	r18, r1
    1cae:	31 05       	cpc	r19, r1
    1cb0:	41 05       	cpc	r20, r1
    1cb2:	51 05       	cpc	r21, r1
    1cb4:	21 f0       	breq	.+8      	; 0x1cbe <_fpadd_parts+0x10c>
    1cb6:	21 e0       	ldi	r18, 0x01	; 1
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e0       	ldi	r20, 0x00	; 0
    1cbc:	50 e0       	ldi	r21, 0x00	; 0
    1cbe:	79 01       	movw	r14, r18
    1cc0:	8a 01       	movw	r16, r20
    1cc2:	e6 28       	or	r14, r6
    1cc4:	f7 28       	or	r15, r7
    1cc6:	08 29       	or	r16, r8
    1cc8:	19 29       	or	r17, r9
    1cca:	3c c0       	rjmp	.+120    	; 0x1d44 <_fpadd_parts+0x192>
    1ccc:	23 2b       	or	r18, r19
    1cce:	d1 f1       	breq	.+116    	; 0x1d44 <_fpadd_parts+0x192>
    1cd0:	26 0e       	add	r2, r22
    1cd2:	37 1e       	adc	r3, r23
    1cd4:	35 01       	movw	r6, r10
    1cd6:	46 01       	movw	r8, r12
    1cd8:	06 2e       	mov	r0, r22
    1cda:	04 c0       	rjmp	.+8      	; 0x1ce4 <_fpadd_parts+0x132>
    1cdc:	96 94       	lsr	r9
    1cde:	87 94       	ror	r8
    1ce0:	77 94       	ror	r7
    1ce2:	67 94       	ror	r6
    1ce4:	0a 94       	dec	r0
    1ce6:	d2 f7       	brpl	.-12     	; 0x1cdc <_fpadd_parts+0x12a>
    1ce8:	21 e0       	ldi	r18, 0x01	; 1
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	40 e0       	ldi	r20, 0x00	; 0
    1cee:	50 e0       	ldi	r21, 0x00	; 0
    1cf0:	04 c0       	rjmp	.+8      	; 0x1cfa <_fpadd_parts+0x148>
    1cf2:	22 0f       	add	r18, r18
    1cf4:	33 1f       	adc	r19, r19
    1cf6:	44 1f       	adc	r20, r20
    1cf8:	55 1f       	adc	r21, r21
    1cfa:	6a 95       	dec	r22
    1cfc:	d2 f7       	brpl	.-12     	; 0x1cf2 <_fpadd_parts+0x140>
    1cfe:	21 50       	subi	r18, 0x01	; 1
    1d00:	30 40       	sbci	r19, 0x00	; 0
    1d02:	40 40       	sbci	r20, 0x00	; 0
    1d04:	50 40       	sbci	r21, 0x00	; 0
    1d06:	2a 21       	and	r18, r10
    1d08:	3b 21       	and	r19, r11
    1d0a:	4c 21       	and	r20, r12
    1d0c:	5d 21       	and	r21, r13
    1d0e:	21 15       	cp	r18, r1
    1d10:	31 05       	cpc	r19, r1
    1d12:	41 05       	cpc	r20, r1
    1d14:	51 05       	cpc	r21, r1
    1d16:	21 f0       	breq	.+8      	; 0x1d20 <_fpadd_parts+0x16e>
    1d18:	21 e0       	ldi	r18, 0x01	; 1
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	40 e0       	ldi	r20, 0x00	; 0
    1d1e:	50 e0       	ldi	r21, 0x00	; 0
    1d20:	59 01       	movw	r10, r18
    1d22:	6a 01       	movw	r12, r20
    1d24:	a6 28       	or	r10, r6
    1d26:	b7 28       	or	r11, r7
    1d28:	c8 28       	or	r12, r8
    1d2a:	d9 28       	or	r13, r9
    1d2c:	0b c0       	rjmp	.+22     	; 0x1d44 <_fpadd_parts+0x192>
    1d2e:	82 15       	cp	r24, r2
    1d30:	93 05       	cpc	r25, r3
    1d32:	2c f0       	brlt	.+10     	; 0x1d3e <_fpadd_parts+0x18c>
    1d34:	1c 01       	movw	r2, r24
    1d36:	aa 24       	eor	r10, r10
    1d38:	bb 24       	eor	r11, r11
    1d3a:	65 01       	movw	r12, r10
    1d3c:	03 c0       	rjmp	.+6      	; 0x1d44 <_fpadd_parts+0x192>
    1d3e:	ee 24       	eor	r14, r14
    1d40:	ff 24       	eor	r15, r15
    1d42:	87 01       	movw	r16, r14
    1d44:	11 96       	adiw	r26, 0x01	; 1
    1d46:	9c 91       	ld	r25, X
    1d48:	d2 01       	movw	r26, r4
    1d4a:	11 96       	adiw	r26, 0x01	; 1
    1d4c:	8c 91       	ld	r24, X
    1d4e:	98 17       	cp	r25, r24
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <_fpadd_parts+0x1a2>
    1d52:	45 c0       	rjmp	.+138    	; 0x1dde <_fpadd_parts+0x22c>
    1d54:	99 23       	and	r25, r25
    1d56:	39 f0       	breq	.+14     	; 0x1d66 <_fpadd_parts+0x1b4>
    1d58:	a8 01       	movw	r20, r16
    1d5a:	97 01       	movw	r18, r14
    1d5c:	2a 19       	sub	r18, r10
    1d5e:	3b 09       	sbc	r19, r11
    1d60:	4c 09       	sbc	r20, r12
    1d62:	5d 09       	sbc	r21, r13
    1d64:	06 c0       	rjmp	.+12     	; 0x1d72 <_fpadd_parts+0x1c0>
    1d66:	a6 01       	movw	r20, r12
    1d68:	95 01       	movw	r18, r10
    1d6a:	2e 19       	sub	r18, r14
    1d6c:	3f 09       	sbc	r19, r15
    1d6e:	40 0b       	sbc	r20, r16
    1d70:	51 0b       	sbc	r21, r17
    1d72:	57 fd       	sbrc	r21, 7
    1d74:	08 c0       	rjmp	.+16     	; 0x1d86 <_fpadd_parts+0x1d4>
    1d76:	11 82       	std	Z+1, r1	; 0x01
    1d78:	33 82       	std	Z+3, r3	; 0x03
    1d7a:	22 82       	std	Z+2, r2	; 0x02
    1d7c:	24 83       	std	Z+4, r18	; 0x04
    1d7e:	35 83       	std	Z+5, r19	; 0x05
    1d80:	46 83       	std	Z+6, r20	; 0x06
    1d82:	57 83       	std	Z+7, r21	; 0x07
    1d84:	1d c0       	rjmp	.+58     	; 0x1dc0 <_fpadd_parts+0x20e>
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	81 83       	std	Z+1, r24	; 0x01
    1d8a:	33 82       	std	Z+3, r3	; 0x03
    1d8c:	22 82       	std	Z+2, r2	; 0x02
    1d8e:	88 27       	eor	r24, r24
    1d90:	99 27       	eor	r25, r25
    1d92:	dc 01       	movw	r26, r24
    1d94:	82 1b       	sub	r24, r18
    1d96:	93 0b       	sbc	r25, r19
    1d98:	a4 0b       	sbc	r26, r20
    1d9a:	b5 0b       	sbc	r27, r21
    1d9c:	84 83       	std	Z+4, r24	; 0x04
    1d9e:	95 83       	std	Z+5, r25	; 0x05
    1da0:	a6 83       	std	Z+6, r26	; 0x06
    1da2:	b7 83       	std	Z+7, r27	; 0x07
    1da4:	0d c0       	rjmp	.+26     	; 0x1dc0 <_fpadd_parts+0x20e>
    1da6:	22 0f       	add	r18, r18
    1da8:	33 1f       	adc	r19, r19
    1daa:	44 1f       	adc	r20, r20
    1dac:	55 1f       	adc	r21, r21
    1dae:	24 83       	std	Z+4, r18	; 0x04
    1db0:	35 83       	std	Z+5, r19	; 0x05
    1db2:	46 83       	std	Z+6, r20	; 0x06
    1db4:	57 83       	std	Z+7, r21	; 0x07
    1db6:	82 81       	ldd	r24, Z+2	; 0x02
    1db8:	93 81       	ldd	r25, Z+3	; 0x03
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	93 83       	std	Z+3, r25	; 0x03
    1dbe:	82 83       	std	Z+2, r24	; 0x02
    1dc0:	24 81       	ldd	r18, Z+4	; 0x04
    1dc2:	35 81       	ldd	r19, Z+5	; 0x05
    1dc4:	46 81       	ldd	r20, Z+6	; 0x06
    1dc6:	57 81       	ldd	r21, Z+7	; 0x07
    1dc8:	da 01       	movw	r26, r20
    1dca:	c9 01       	movw	r24, r18
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	a1 09       	sbc	r26, r1
    1dd0:	b1 09       	sbc	r27, r1
    1dd2:	8f 5f       	subi	r24, 0xFF	; 255
    1dd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd6:	af 4f       	sbci	r26, 0xFF	; 255
    1dd8:	bf 43       	sbci	r27, 0x3F	; 63
    1dda:	28 f3       	brcs	.-54     	; 0x1da6 <_fpadd_parts+0x1f4>
    1ddc:	0b c0       	rjmp	.+22     	; 0x1df4 <_fpadd_parts+0x242>
    1dde:	91 83       	std	Z+1, r25	; 0x01
    1de0:	33 82       	std	Z+3, r3	; 0x03
    1de2:	22 82       	std	Z+2, r2	; 0x02
    1de4:	ea 0c       	add	r14, r10
    1de6:	fb 1c       	adc	r15, r11
    1de8:	0c 1d       	adc	r16, r12
    1dea:	1d 1d       	adc	r17, r13
    1dec:	e4 82       	std	Z+4, r14	; 0x04
    1dee:	f5 82       	std	Z+5, r15	; 0x05
    1df0:	06 83       	std	Z+6, r16	; 0x06
    1df2:	17 83       	std	Z+7, r17	; 0x07
    1df4:	83 e0       	ldi	r24, 0x03	; 3
    1df6:	80 83       	st	Z, r24
    1df8:	24 81       	ldd	r18, Z+4	; 0x04
    1dfa:	35 81       	ldd	r19, Z+5	; 0x05
    1dfc:	46 81       	ldd	r20, Z+6	; 0x06
    1dfe:	57 81       	ldd	r21, Z+7	; 0x07
    1e00:	57 ff       	sbrs	r21, 7
    1e02:	1a c0       	rjmp	.+52     	; 0x1e38 <_fpadd_parts+0x286>
    1e04:	c9 01       	movw	r24, r18
    1e06:	aa 27       	eor	r26, r26
    1e08:	97 fd       	sbrc	r25, 7
    1e0a:	a0 95       	com	r26
    1e0c:	ba 2f       	mov	r27, r26
    1e0e:	81 70       	andi	r24, 0x01	; 1
    1e10:	90 70       	andi	r25, 0x00	; 0
    1e12:	a0 70       	andi	r26, 0x00	; 0
    1e14:	b0 70       	andi	r27, 0x00	; 0
    1e16:	56 95       	lsr	r21
    1e18:	47 95       	ror	r20
    1e1a:	37 95       	ror	r19
    1e1c:	27 95       	ror	r18
    1e1e:	82 2b       	or	r24, r18
    1e20:	93 2b       	or	r25, r19
    1e22:	a4 2b       	or	r26, r20
    1e24:	b5 2b       	or	r27, r21
    1e26:	84 83       	std	Z+4, r24	; 0x04
    1e28:	95 83       	std	Z+5, r25	; 0x05
    1e2a:	a6 83       	std	Z+6, r26	; 0x06
    1e2c:	b7 83       	std	Z+7, r27	; 0x07
    1e2e:	82 81       	ldd	r24, Z+2	; 0x02
    1e30:	93 81       	ldd	r25, Z+3	; 0x03
    1e32:	01 96       	adiw	r24, 0x01	; 1
    1e34:	93 83       	std	Z+3, r25	; 0x03
    1e36:	82 83       	std	Z+2, r24	; 0x02
    1e38:	df 01       	movw	r26, r30
    1e3a:	01 c0       	rjmp	.+2      	; 0x1e3e <_fpadd_parts+0x28c>
    1e3c:	d2 01       	movw	r26, r4
    1e3e:	cd 01       	movw	r24, r26
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
    1e44:	e2 e1       	ldi	r30, 0x12	; 18
    1e46:	0c 94 91 3a 	jmp	0x7522	; 0x7522 <__epilogue_restores__>

00001e4a <__subsf3>:
    1e4a:	a0 e2       	ldi	r26, 0x20	; 32
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	eb e2       	ldi	r30, 0x2B	; 43
    1e50:	ff e0       	ldi	r31, 0x0F	; 15
    1e52:	0c 94 81 3a 	jmp	0x7502	; 0x7502 <__prologue_saves__+0x18>
    1e56:	69 83       	std	Y+1, r22	; 0x01
    1e58:	7a 83       	std	Y+2, r23	; 0x02
    1e5a:	8b 83       	std	Y+3, r24	; 0x03
    1e5c:	9c 83       	std	Y+4, r25	; 0x04
    1e5e:	2d 83       	std	Y+5, r18	; 0x05
    1e60:	3e 83       	std	Y+6, r19	; 0x06
    1e62:	4f 83       	std	Y+7, r20	; 0x07
    1e64:	58 87       	std	Y+8, r21	; 0x08
    1e66:	e9 e0       	ldi	r30, 0x09	; 9
    1e68:	ee 2e       	mov	r14, r30
    1e6a:	f1 2c       	mov	r15, r1
    1e6c:	ec 0e       	add	r14, r28
    1e6e:	fd 1e       	adc	r15, r29
    1e70:	ce 01       	movw	r24, r28
    1e72:	01 96       	adiw	r24, 0x01	; 1
    1e74:	b7 01       	movw	r22, r14
    1e76:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1e7a:	8e 01       	movw	r16, r28
    1e7c:	0f 5e       	subi	r16, 0xEF	; 239
    1e7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e80:	ce 01       	movw	r24, r28
    1e82:	05 96       	adiw	r24, 0x05	; 5
    1e84:	b8 01       	movw	r22, r16
    1e86:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1e8a:	8a 89       	ldd	r24, Y+18	; 0x12
    1e8c:	91 e0       	ldi	r25, 0x01	; 1
    1e8e:	89 27       	eor	r24, r25
    1e90:	8a 8b       	std	Y+18, r24	; 0x12
    1e92:	c7 01       	movw	r24, r14
    1e94:	b8 01       	movw	r22, r16
    1e96:	ae 01       	movw	r20, r28
    1e98:	47 5e       	subi	r20, 0xE7	; 231
    1e9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e9c:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <_fpadd_parts>
    1ea0:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__pack_f>
    1ea4:	a0 96       	adiw	r28, 0x20	; 32
    1ea6:	e6 e0       	ldi	r30, 0x06	; 6
    1ea8:	0c 94 9d 3a 	jmp	0x753a	; 0x753a <__epilogue_restores__+0x18>

00001eac <__addsf3>:
    1eac:	a0 e2       	ldi	r26, 0x20	; 32
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	ec e5       	ldi	r30, 0x5C	; 92
    1eb2:	ff e0       	ldi	r31, 0x0F	; 15
    1eb4:	0c 94 81 3a 	jmp	0x7502	; 0x7502 <__prologue_saves__+0x18>
    1eb8:	69 83       	std	Y+1, r22	; 0x01
    1eba:	7a 83       	std	Y+2, r23	; 0x02
    1ebc:	8b 83       	std	Y+3, r24	; 0x03
    1ebe:	9c 83       	std	Y+4, r25	; 0x04
    1ec0:	2d 83       	std	Y+5, r18	; 0x05
    1ec2:	3e 83       	std	Y+6, r19	; 0x06
    1ec4:	4f 83       	std	Y+7, r20	; 0x07
    1ec6:	58 87       	std	Y+8, r21	; 0x08
    1ec8:	f9 e0       	ldi	r31, 0x09	; 9
    1eca:	ef 2e       	mov	r14, r31
    1ecc:	f1 2c       	mov	r15, r1
    1ece:	ec 0e       	add	r14, r28
    1ed0:	fd 1e       	adc	r15, r29
    1ed2:	ce 01       	movw	r24, r28
    1ed4:	01 96       	adiw	r24, 0x01	; 1
    1ed6:	b7 01       	movw	r22, r14
    1ed8:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1edc:	8e 01       	movw	r16, r28
    1ede:	0f 5e       	subi	r16, 0xEF	; 239
    1ee0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee2:	ce 01       	movw	r24, r28
    1ee4:	05 96       	adiw	r24, 0x05	; 5
    1ee6:	b8 01       	movw	r22, r16
    1ee8:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1eec:	c7 01       	movw	r24, r14
    1eee:	b8 01       	movw	r22, r16
    1ef0:	ae 01       	movw	r20, r28
    1ef2:	47 5e       	subi	r20, 0xE7	; 231
    1ef4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef6:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <_fpadd_parts>
    1efa:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__pack_f>
    1efe:	a0 96       	adiw	r28, 0x20	; 32
    1f00:	e6 e0       	ldi	r30, 0x06	; 6
    1f02:	0c 94 9d 3a 	jmp	0x753a	; 0x753a <__epilogue_restores__+0x18>

00001f06 <__mulsf3>:
    1f06:	a0 e2       	ldi	r26, 0x20	; 32
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	e9 e8       	ldi	r30, 0x89	; 137
    1f0c:	ff e0       	ldi	r31, 0x0F	; 15
    1f0e:	0c 94 75 3a 	jmp	0x74ea	; 0x74ea <__prologue_saves__>
    1f12:	69 83       	std	Y+1, r22	; 0x01
    1f14:	7a 83       	std	Y+2, r23	; 0x02
    1f16:	8b 83       	std	Y+3, r24	; 0x03
    1f18:	9c 83       	std	Y+4, r25	; 0x04
    1f1a:	2d 83       	std	Y+5, r18	; 0x05
    1f1c:	3e 83       	std	Y+6, r19	; 0x06
    1f1e:	4f 83       	std	Y+7, r20	; 0x07
    1f20:	58 87       	std	Y+8, r21	; 0x08
    1f22:	ce 01       	movw	r24, r28
    1f24:	01 96       	adiw	r24, 0x01	; 1
    1f26:	be 01       	movw	r22, r28
    1f28:	67 5f       	subi	r22, 0xF7	; 247
    1f2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f2c:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1f30:	ce 01       	movw	r24, r28
    1f32:	05 96       	adiw	r24, 0x05	; 5
    1f34:	be 01       	movw	r22, r28
    1f36:	6f 5e       	subi	r22, 0xEF	; 239
    1f38:	7f 4f       	sbci	r23, 0xFF	; 255
    1f3a:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1f3e:	99 85       	ldd	r25, Y+9	; 0x09
    1f40:	92 30       	cpi	r25, 0x02	; 2
    1f42:	88 f0       	brcs	.+34     	; 0x1f66 <__mulsf3+0x60>
    1f44:	89 89       	ldd	r24, Y+17	; 0x11
    1f46:	82 30       	cpi	r24, 0x02	; 2
    1f48:	c8 f0       	brcs	.+50     	; 0x1f7c <__mulsf3+0x76>
    1f4a:	94 30       	cpi	r25, 0x04	; 4
    1f4c:	19 f4       	brne	.+6      	; 0x1f54 <__mulsf3+0x4e>
    1f4e:	82 30       	cpi	r24, 0x02	; 2
    1f50:	51 f4       	brne	.+20     	; 0x1f66 <__mulsf3+0x60>
    1f52:	04 c0       	rjmp	.+8      	; 0x1f5c <__mulsf3+0x56>
    1f54:	84 30       	cpi	r24, 0x04	; 4
    1f56:	29 f4       	brne	.+10     	; 0x1f62 <__mulsf3+0x5c>
    1f58:	92 30       	cpi	r25, 0x02	; 2
    1f5a:	81 f4       	brne	.+32     	; 0x1f7c <__mulsf3+0x76>
    1f5c:	85 ed       	ldi	r24, 0xD5	; 213
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	c6 c0       	rjmp	.+396    	; 0x20ee <__mulsf3+0x1e8>
    1f62:	92 30       	cpi	r25, 0x02	; 2
    1f64:	49 f4       	brne	.+18     	; 0x1f78 <__mulsf3+0x72>
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6a:	8a 89       	ldd	r24, Y+18	; 0x12
    1f6c:	98 13       	cpse	r25, r24
    1f6e:	21 e0       	ldi	r18, 0x01	; 1
    1f70:	2a 87       	std	Y+10, r18	; 0x0a
    1f72:	ce 01       	movw	r24, r28
    1f74:	09 96       	adiw	r24, 0x09	; 9
    1f76:	bb c0       	rjmp	.+374    	; 0x20ee <__mulsf3+0x1e8>
    1f78:	82 30       	cpi	r24, 0x02	; 2
    1f7a:	49 f4       	brne	.+18     	; 0x1f8e <__mulsf3+0x88>
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f80:	8a 89       	ldd	r24, Y+18	; 0x12
    1f82:	98 13       	cpse	r25, r24
    1f84:	21 e0       	ldi	r18, 0x01	; 1
    1f86:	2a 8b       	std	Y+18, r18	; 0x12
    1f88:	ce 01       	movw	r24, r28
    1f8a:	41 96       	adiw	r24, 0x11	; 17
    1f8c:	b0 c0       	rjmp	.+352    	; 0x20ee <__mulsf3+0x1e8>
    1f8e:	2d 84       	ldd	r2, Y+13	; 0x0d
    1f90:	3e 84       	ldd	r3, Y+14	; 0x0e
    1f92:	4f 84       	ldd	r4, Y+15	; 0x0f
    1f94:	58 88       	ldd	r5, Y+16	; 0x10
    1f96:	6d 88       	ldd	r6, Y+21	; 0x15
    1f98:	7e 88       	ldd	r7, Y+22	; 0x16
    1f9a:	8f 88       	ldd	r8, Y+23	; 0x17
    1f9c:	98 8c       	ldd	r9, Y+24	; 0x18
    1f9e:	ee 24       	eor	r14, r14
    1fa0:	ff 24       	eor	r15, r15
    1fa2:	87 01       	movw	r16, r14
    1fa4:	aa 24       	eor	r10, r10
    1fa6:	bb 24       	eor	r11, r11
    1fa8:	65 01       	movw	r12, r10
    1faa:	40 e0       	ldi	r20, 0x00	; 0
    1fac:	50 e0       	ldi	r21, 0x00	; 0
    1fae:	60 e0       	ldi	r22, 0x00	; 0
    1fb0:	70 e0       	ldi	r23, 0x00	; 0
    1fb2:	e0 e0       	ldi	r30, 0x00	; 0
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	c1 01       	movw	r24, r2
    1fb8:	81 70       	andi	r24, 0x01	; 1
    1fba:	90 70       	andi	r25, 0x00	; 0
    1fbc:	89 2b       	or	r24, r25
    1fbe:	e9 f0       	breq	.+58     	; 0x1ffa <__mulsf3+0xf4>
    1fc0:	e6 0c       	add	r14, r6
    1fc2:	f7 1c       	adc	r15, r7
    1fc4:	08 1d       	adc	r16, r8
    1fc6:	19 1d       	adc	r17, r9
    1fc8:	9a 01       	movw	r18, r20
    1fca:	ab 01       	movw	r20, r22
    1fcc:	2a 0d       	add	r18, r10
    1fce:	3b 1d       	adc	r19, r11
    1fd0:	4c 1d       	adc	r20, r12
    1fd2:	5d 1d       	adc	r21, r13
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	a0 e0       	ldi	r26, 0x00	; 0
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e6 14       	cp	r14, r6
    1fde:	f7 04       	cpc	r15, r7
    1fe0:	08 05       	cpc	r16, r8
    1fe2:	19 05       	cpc	r17, r9
    1fe4:	20 f4       	brcc	.+8      	; 0x1fee <__mulsf3+0xe8>
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	a0 e0       	ldi	r26, 0x00	; 0
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	ba 01       	movw	r22, r20
    1ff0:	a9 01       	movw	r20, r18
    1ff2:	48 0f       	add	r20, r24
    1ff4:	59 1f       	adc	r21, r25
    1ff6:	6a 1f       	adc	r22, r26
    1ff8:	7b 1f       	adc	r23, r27
    1ffa:	aa 0c       	add	r10, r10
    1ffc:	bb 1c       	adc	r11, r11
    1ffe:	cc 1c       	adc	r12, r12
    2000:	dd 1c       	adc	r13, r13
    2002:	97 fe       	sbrs	r9, 7
    2004:	08 c0       	rjmp	.+16     	; 0x2016 <__mulsf3+0x110>
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	a0 e0       	ldi	r26, 0x00	; 0
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	a8 2a       	or	r10, r24
    2010:	b9 2a       	or	r11, r25
    2012:	ca 2a       	or	r12, r26
    2014:	db 2a       	or	r13, r27
    2016:	31 96       	adiw	r30, 0x01	; 1
    2018:	e0 32       	cpi	r30, 0x20	; 32
    201a:	f1 05       	cpc	r31, r1
    201c:	49 f0       	breq	.+18     	; 0x2030 <__mulsf3+0x12a>
    201e:	66 0c       	add	r6, r6
    2020:	77 1c       	adc	r7, r7
    2022:	88 1c       	adc	r8, r8
    2024:	99 1c       	adc	r9, r9
    2026:	56 94       	lsr	r5
    2028:	47 94       	ror	r4
    202a:	37 94       	ror	r3
    202c:	27 94       	ror	r2
    202e:	c3 cf       	rjmp	.-122    	; 0x1fb6 <__mulsf3+0xb0>
    2030:	fa 85       	ldd	r31, Y+10	; 0x0a
    2032:	ea 89       	ldd	r30, Y+18	; 0x12
    2034:	2b 89       	ldd	r18, Y+19	; 0x13
    2036:	3c 89       	ldd	r19, Y+20	; 0x14
    2038:	8b 85       	ldd	r24, Y+11	; 0x0b
    203a:	9c 85       	ldd	r25, Y+12	; 0x0c
    203c:	28 0f       	add	r18, r24
    203e:	39 1f       	adc	r19, r25
    2040:	2e 5f       	subi	r18, 0xFE	; 254
    2042:	3f 4f       	sbci	r19, 0xFF	; 255
    2044:	17 c0       	rjmp	.+46     	; 0x2074 <__mulsf3+0x16e>
    2046:	ca 01       	movw	r24, r20
    2048:	81 70       	andi	r24, 0x01	; 1
    204a:	90 70       	andi	r25, 0x00	; 0
    204c:	89 2b       	or	r24, r25
    204e:	61 f0       	breq	.+24     	; 0x2068 <__mulsf3+0x162>
    2050:	16 95       	lsr	r17
    2052:	07 95       	ror	r16
    2054:	f7 94       	ror	r15
    2056:	e7 94       	ror	r14
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	a0 e0       	ldi	r26, 0x00	; 0
    205e:	b0 e8       	ldi	r27, 0x80	; 128
    2060:	e8 2a       	or	r14, r24
    2062:	f9 2a       	or	r15, r25
    2064:	0a 2b       	or	r16, r26
    2066:	1b 2b       	or	r17, r27
    2068:	76 95       	lsr	r23
    206a:	67 95       	ror	r22
    206c:	57 95       	ror	r21
    206e:	47 95       	ror	r20
    2070:	2f 5f       	subi	r18, 0xFF	; 255
    2072:	3f 4f       	sbci	r19, 0xFF	; 255
    2074:	77 fd       	sbrc	r23, 7
    2076:	e7 cf       	rjmp	.-50     	; 0x2046 <__mulsf3+0x140>
    2078:	0c c0       	rjmp	.+24     	; 0x2092 <__mulsf3+0x18c>
    207a:	44 0f       	add	r20, r20
    207c:	55 1f       	adc	r21, r21
    207e:	66 1f       	adc	r22, r22
    2080:	77 1f       	adc	r23, r23
    2082:	17 fd       	sbrc	r17, 7
    2084:	41 60       	ori	r20, 0x01	; 1
    2086:	ee 0c       	add	r14, r14
    2088:	ff 1c       	adc	r15, r15
    208a:	00 1f       	adc	r16, r16
    208c:	11 1f       	adc	r17, r17
    208e:	21 50       	subi	r18, 0x01	; 1
    2090:	30 40       	sbci	r19, 0x00	; 0
    2092:	40 30       	cpi	r20, 0x00	; 0
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	59 07       	cpc	r21, r25
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	69 07       	cpc	r22, r25
    209c:	90 e4       	ldi	r25, 0x40	; 64
    209e:	79 07       	cpc	r23, r25
    20a0:	60 f3       	brcs	.-40     	; 0x207a <__mulsf3+0x174>
    20a2:	2b 8f       	std	Y+27, r18	; 0x1b
    20a4:	3c 8f       	std	Y+28, r19	; 0x1c
    20a6:	db 01       	movw	r26, r22
    20a8:	ca 01       	movw	r24, r20
    20aa:	8f 77       	andi	r24, 0x7F	; 127
    20ac:	90 70       	andi	r25, 0x00	; 0
    20ae:	a0 70       	andi	r26, 0x00	; 0
    20b0:	b0 70       	andi	r27, 0x00	; 0
    20b2:	80 34       	cpi	r24, 0x40	; 64
    20b4:	91 05       	cpc	r25, r1
    20b6:	a1 05       	cpc	r26, r1
    20b8:	b1 05       	cpc	r27, r1
    20ba:	61 f4       	brne	.+24     	; 0x20d4 <__mulsf3+0x1ce>
    20bc:	47 fd       	sbrc	r20, 7
    20be:	0a c0       	rjmp	.+20     	; 0x20d4 <__mulsf3+0x1ce>
    20c0:	e1 14       	cp	r14, r1
    20c2:	f1 04       	cpc	r15, r1
    20c4:	01 05       	cpc	r16, r1
    20c6:	11 05       	cpc	r17, r1
    20c8:	29 f0       	breq	.+10     	; 0x20d4 <__mulsf3+0x1ce>
    20ca:	40 5c       	subi	r20, 0xC0	; 192
    20cc:	5f 4f       	sbci	r21, 0xFF	; 255
    20ce:	6f 4f       	sbci	r22, 0xFF	; 255
    20d0:	7f 4f       	sbci	r23, 0xFF	; 255
    20d2:	40 78       	andi	r20, 0x80	; 128
    20d4:	1a 8e       	std	Y+26, r1	; 0x1a
    20d6:	fe 17       	cp	r31, r30
    20d8:	11 f0       	breq	.+4      	; 0x20de <__mulsf3+0x1d8>
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	8a 8f       	std	Y+26, r24	; 0x1a
    20de:	4d 8f       	std	Y+29, r20	; 0x1d
    20e0:	5e 8f       	std	Y+30, r21	; 0x1e
    20e2:	6f 8f       	std	Y+31, r22	; 0x1f
    20e4:	78 a3       	std	Y+32, r23	; 0x20
    20e6:	83 e0       	ldi	r24, 0x03	; 3
    20e8:	89 8f       	std	Y+25, r24	; 0x19
    20ea:	ce 01       	movw	r24, r28
    20ec:	49 96       	adiw	r24, 0x19	; 25
    20ee:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__pack_f>
    20f2:	a0 96       	adiw	r28, 0x20	; 32
    20f4:	e2 e1       	ldi	r30, 0x12	; 18
    20f6:	0c 94 91 3a 	jmp	0x7522	; 0x7522 <__epilogue_restores__>

000020fa <__gtsf2>:
    20fa:	a8 e1       	ldi	r26, 0x18	; 24
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e3 e8       	ldi	r30, 0x83	; 131
    2100:	f0 e1       	ldi	r31, 0x10	; 16
    2102:	0c 94 81 3a 	jmp	0x7502	; 0x7502 <__prologue_saves__+0x18>
    2106:	69 83       	std	Y+1, r22	; 0x01
    2108:	7a 83       	std	Y+2, r23	; 0x02
    210a:	8b 83       	std	Y+3, r24	; 0x03
    210c:	9c 83       	std	Y+4, r25	; 0x04
    210e:	2d 83       	std	Y+5, r18	; 0x05
    2110:	3e 83       	std	Y+6, r19	; 0x06
    2112:	4f 83       	std	Y+7, r20	; 0x07
    2114:	58 87       	std	Y+8, r21	; 0x08
    2116:	89 e0       	ldi	r24, 0x09	; 9
    2118:	e8 2e       	mov	r14, r24
    211a:	f1 2c       	mov	r15, r1
    211c:	ec 0e       	add	r14, r28
    211e:	fd 1e       	adc	r15, r29
    2120:	ce 01       	movw	r24, r28
    2122:	01 96       	adiw	r24, 0x01	; 1
    2124:	b7 01       	movw	r22, r14
    2126:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    212a:	8e 01       	movw	r16, r28
    212c:	0f 5e       	subi	r16, 0xEF	; 239
    212e:	1f 4f       	sbci	r17, 0xFF	; 255
    2130:	ce 01       	movw	r24, r28
    2132:	05 96       	adiw	r24, 0x05	; 5
    2134:	b8 01       	movw	r22, r16
    2136:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    213a:	89 85       	ldd	r24, Y+9	; 0x09
    213c:	82 30       	cpi	r24, 0x02	; 2
    213e:	40 f0       	brcs	.+16     	; 0x2150 <__gtsf2+0x56>
    2140:	89 89       	ldd	r24, Y+17	; 0x11
    2142:	82 30       	cpi	r24, 0x02	; 2
    2144:	28 f0       	brcs	.+10     	; 0x2150 <__gtsf2+0x56>
    2146:	c7 01       	movw	r24, r14
    2148:	b8 01       	movw	r22, r16
    214a:	0e 94 ae 12 	call	0x255c	; 0x255c <__fpcmp_parts_f>
    214e:	01 c0       	rjmp	.+2      	; 0x2152 <__gtsf2+0x58>
    2150:	8f ef       	ldi	r24, 0xFF	; 255
    2152:	68 96       	adiw	r28, 0x18	; 24
    2154:	e6 e0       	ldi	r30, 0x06	; 6
    2156:	0c 94 9d 3a 	jmp	0x753a	; 0x753a <__epilogue_restores__+0x18>

0000215a <__gesf2>:
    215a:	a8 e1       	ldi	r26, 0x18	; 24
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	e3 eb       	ldi	r30, 0xB3	; 179
    2160:	f0 e1       	ldi	r31, 0x10	; 16
    2162:	0c 94 81 3a 	jmp	0x7502	; 0x7502 <__prologue_saves__+0x18>
    2166:	69 83       	std	Y+1, r22	; 0x01
    2168:	7a 83       	std	Y+2, r23	; 0x02
    216a:	8b 83       	std	Y+3, r24	; 0x03
    216c:	9c 83       	std	Y+4, r25	; 0x04
    216e:	2d 83       	std	Y+5, r18	; 0x05
    2170:	3e 83       	std	Y+6, r19	; 0x06
    2172:	4f 83       	std	Y+7, r20	; 0x07
    2174:	58 87       	std	Y+8, r21	; 0x08
    2176:	89 e0       	ldi	r24, 0x09	; 9
    2178:	e8 2e       	mov	r14, r24
    217a:	f1 2c       	mov	r15, r1
    217c:	ec 0e       	add	r14, r28
    217e:	fd 1e       	adc	r15, r29
    2180:	ce 01       	movw	r24, r28
    2182:	01 96       	adiw	r24, 0x01	; 1
    2184:	b7 01       	movw	r22, r14
    2186:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    218a:	8e 01       	movw	r16, r28
    218c:	0f 5e       	subi	r16, 0xEF	; 239
    218e:	1f 4f       	sbci	r17, 0xFF	; 255
    2190:	ce 01       	movw	r24, r28
    2192:	05 96       	adiw	r24, 0x05	; 5
    2194:	b8 01       	movw	r22, r16
    2196:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    219a:	89 85       	ldd	r24, Y+9	; 0x09
    219c:	82 30       	cpi	r24, 0x02	; 2
    219e:	40 f0       	brcs	.+16     	; 0x21b0 <__gesf2+0x56>
    21a0:	89 89       	ldd	r24, Y+17	; 0x11
    21a2:	82 30       	cpi	r24, 0x02	; 2
    21a4:	28 f0       	brcs	.+10     	; 0x21b0 <__gesf2+0x56>
    21a6:	c7 01       	movw	r24, r14
    21a8:	b8 01       	movw	r22, r16
    21aa:	0e 94 ae 12 	call	0x255c	; 0x255c <__fpcmp_parts_f>
    21ae:	01 c0       	rjmp	.+2      	; 0x21b2 <__gesf2+0x58>
    21b0:	8f ef       	ldi	r24, 0xFF	; 255
    21b2:	68 96       	adiw	r28, 0x18	; 24
    21b4:	e6 e0       	ldi	r30, 0x06	; 6
    21b6:	0c 94 9d 3a 	jmp	0x753a	; 0x753a <__epilogue_restores__+0x18>

000021ba <__ltsf2>:
    21ba:	a8 e1       	ldi	r26, 0x18	; 24
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	e3 ee       	ldi	r30, 0xE3	; 227
    21c0:	f0 e1       	ldi	r31, 0x10	; 16
    21c2:	0c 94 81 3a 	jmp	0x7502	; 0x7502 <__prologue_saves__+0x18>
    21c6:	69 83       	std	Y+1, r22	; 0x01
    21c8:	7a 83       	std	Y+2, r23	; 0x02
    21ca:	8b 83       	std	Y+3, r24	; 0x03
    21cc:	9c 83       	std	Y+4, r25	; 0x04
    21ce:	2d 83       	std	Y+5, r18	; 0x05
    21d0:	3e 83       	std	Y+6, r19	; 0x06
    21d2:	4f 83       	std	Y+7, r20	; 0x07
    21d4:	58 87       	std	Y+8, r21	; 0x08
    21d6:	89 e0       	ldi	r24, 0x09	; 9
    21d8:	e8 2e       	mov	r14, r24
    21da:	f1 2c       	mov	r15, r1
    21dc:	ec 0e       	add	r14, r28
    21de:	fd 1e       	adc	r15, r29
    21e0:	ce 01       	movw	r24, r28
    21e2:	01 96       	adiw	r24, 0x01	; 1
    21e4:	b7 01       	movw	r22, r14
    21e6:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    21ea:	8e 01       	movw	r16, r28
    21ec:	0f 5e       	subi	r16, 0xEF	; 239
    21ee:	1f 4f       	sbci	r17, 0xFF	; 255
    21f0:	ce 01       	movw	r24, r28
    21f2:	05 96       	adiw	r24, 0x05	; 5
    21f4:	b8 01       	movw	r22, r16
    21f6:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    21fa:	89 85       	ldd	r24, Y+9	; 0x09
    21fc:	82 30       	cpi	r24, 0x02	; 2
    21fe:	40 f0       	brcs	.+16     	; 0x2210 <__ltsf2+0x56>
    2200:	89 89       	ldd	r24, Y+17	; 0x11
    2202:	82 30       	cpi	r24, 0x02	; 2
    2204:	28 f0       	brcs	.+10     	; 0x2210 <__ltsf2+0x56>
    2206:	c7 01       	movw	r24, r14
    2208:	b8 01       	movw	r22, r16
    220a:	0e 94 ae 12 	call	0x255c	; 0x255c <__fpcmp_parts_f>
    220e:	01 c0       	rjmp	.+2      	; 0x2212 <__ltsf2+0x58>
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	68 96       	adiw	r28, 0x18	; 24
    2214:	e6 e0       	ldi	r30, 0x06	; 6
    2216:	0c 94 9d 3a 	jmp	0x753a	; 0x753a <__epilogue_restores__+0x18>

0000221a <__fixsfsi>:
    221a:	ac e0       	ldi	r26, 0x0C	; 12
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	e3 e1       	ldi	r30, 0x13	; 19
    2220:	f1 e1       	ldi	r31, 0x11	; 17
    2222:	0c 94 85 3a 	jmp	0x750a	; 0x750a <__prologue_saves__+0x20>
    2226:	69 83       	std	Y+1, r22	; 0x01
    2228:	7a 83       	std	Y+2, r23	; 0x02
    222a:	8b 83       	std	Y+3, r24	; 0x03
    222c:	9c 83       	std	Y+4, r25	; 0x04
    222e:	ce 01       	movw	r24, r28
    2230:	01 96       	adiw	r24, 0x01	; 1
    2232:	be 01       	movw	r22, r28
    2234:	6b 5f       	subi	r22, 0xFB	; 251
    2236:	7f 4f       	sbci	r23, 0xFF	; 255
    2238:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    223c:	8d 81       	ldd	r24, Y+5	; 0x05
    223e:	82 30       	cpi	r24, 0x02	; 2
    2240:	61 f1       	breq	.+88     	; 0x229a <__fixsfsi+0x80>
    2242:	82 30       	cpi	r24, 0x02	; 2
    2244:	50 f1       	brcs	.+84     	; 0x229a <__fixsfsi+0x80>
    2246:	84 30       	cpi	r24, 0x04	; 4
    2248:	21 f4       	brne	.+8      	; 0x2252 <__fixsfsi+0x38>
    224a:	8e 81       	ldd	r24, Y+6	; 0x06
    224c:	88 23       	and	r24, r24
    224e:	51 f1       	breq	.+84     	; 0x22a4 <__fixsfsi+0x8a>
    2250:	2e c0       	rjmp	.+92     	; 0x22ae <__fixsfsi+0x94>
    2252:	2f 81       	ldd	r18, Y+7	; 0x07
    2254:	38 85       	ldd	r19, Y+8	; 0x08
    2256:	37 fd       	sbrc	r19, 7
    2258:	20 c0       	rjmp	.+64     	; 0x229a <__fixsfsi+0x80>
    225a:	6e 81       	ldd	r22, Y+6	; 0x06
    225c:	2f 31       	cpi	r18, 0x1F	; 31
    225e:	31 05       	cpc	r19, r1
    2260:	1c f0       	brlt	.+6      	; 0x2268 <__fixsfsi+0x4e>
    2262:	66 23       	and	r22, r22
    2264:	f9 f0       	breq	.+62     	; 0x22a4 <__fixsfsi+0x8a>
    2266:	23 c0       	rjmp	.+70     	; 0x22ae <__fixsfsi+0x94>
    2268:	8e e1       	ldi	r24, 0x1E	; 30
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	82 1b       	sub	r24, r18
    226e:	93 0b       	sbc	r25, r19
    2270:	29 85       	ldd	r18, Y+9	; 0x09
    2272:	3a 85       	ldd	r19, Y+10	; 0x0a
    2274:	4b 85       	ldd	r20, Y+11	; 0x0b
    2276:	5c 85       	ldd	r21, Y+12	; 0x0c
    2278:	04 c0       	rjmp	.+8      	; 0x2282 <__fixsfsi+0x68>
    227a:	56 95       	lsr	r21
    227c:	47 95       	ror	r20
    227e:	37 95       	ror	r19
    2280:	27 95       	ror	r18
    2282:	8a 95       	dec	r24
    2284:	d2 f7       	brpl	.-12     	; 0x227a <__fixsfsi+0x60>
    2286:	66 23       	and	r22, r22
    2288:	b1 f0       	breq	.+44     	; 0x22b6 <__fixsfsi+0x9c>
    228a:	50 95       	com	r21
    228c:	40 95       	com	r20
    228e:	30 95       	com	r19
    2290:	21 95       	neg	r18
    2292:	3f 4f       	sbci	r19, 0xFF	; 255
    2294:	4f 4f       	sbci	r20, 0xFF	; 255
    2296:	5f 4f       	sbci	r21, 0xFF	; 255
    2298:	0e c0       	rjmp	.+28     	; 0x22b6 <__fixsfsi+0x9c>
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	40 e0       	ldi	r20, 0x00	; 0
    22a0:	50 e0       	ldi	r21, 0x00	; 0
    22a2:	09 c0       	rjmp	.+18     	; 0x22b6 <__fixsfsi+0x9c>
    22a4:	2f ef       	ldi	r18, 0xFF	; 255
    22a6:	3f ef       	ldi	r19, 0xFF	; 255
    22a8:	4f ef       	ldi	r20, 0xFF	; 255
    22aa:	5f e7       	ldi	r21, 0x7F	; 127
    22ac:	04 c0       	rjmp	.+8      	; 0x22b6 <__fixsfsi+0x9c>
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	40 e0       	ldi	r20, 0x00	; 0
    22b4:	50 e8       	ldi	r21, 0x80	; 128
    22b6:	b9 01       	movw	r22, r18
    22b8:	ca 01       	movw	r24, r20
    22ba:	2c 96       	adiw	r28, 0x0c	; 12
    22bc:	e2 e0       	ldi	r30, 0x02	; 2
    22be:	0c 94 a1 3a 	jmp	0x7542	; 0x7542 <__epilogue_restores__+0x20>

000022c2 <__pack_f>:
    22c2:	df 92       	push	r13
    22c4:	ef 92       	push	r14
    22c6:	ff 92       	push	r15
    22c8:	0f 93       	push	r16
    22ca:	1f 93       	push	r17
    22cc:	fc 01       	movw	r30, r24
    22ce:	e4 80       	ldd	r14, Z+4	; 0x04
    22d0:	f5 80       	ldd	r15, Z+5	; 0x05
    22d2:	06 81       	ldd	r16, Z+6	; 0x06
    22d4:	17 81       	ldd	r17, Z+7	; 0x07
    22d6:	d1 80       	ldd	r13, Z+1	; 0x01
    22d8:	80 81       	ld	r24, Z
    22da:	82 30       	cpi	r24, 0x02	; 2
    22dc:	48 f4       	brcc	.+18     	; 0x22f0 <__pack_f+0x2e>
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	a0 e1       	ldi	r26, 0x10	; 16
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	e8 2a       	or	r14, r24
    22e8:	f9 2a       	or	r15, r25
    22ea:	0a 2b       	or	r16, r26
    22ec:	1b 2b       	or	r17, r27
    22ee:	a5 c0       	rjmp	.+330    	; 0x243a <__pack_f+0x178>
    22f0:	84 30       	cpi	r24, 0x04	; 4
    22f2:	09 f4       	brne	.+2      	; 0x22f6 <__pack_f+0x34>
    22f4:	9f c0       	rjmp	.+318    	; 0x2434 <__pack_f+0x172>
    22f6:	82 30       	cpi	r24, 0x02	; 2
    22f8:	21 f4       	brne	.+8      	; 0x2302 <__pack_f+0x40>
    22fa:	ee 24       	eor	r14, r14
    22fc:	ff 24       	eor	r15, r15
    22fe:	87 01       	movw	r16, r14
    2300:	05 c0       	rjmp	.+10     	; 0x230c <__pack_f+0x4a>
    2302:	e1 14       	cp	r14, r1
    2304:	f1 04       	cpc	r15, r1
    2306:	01 05       	cpc	r16, r1
    2308:	11 05       	cpc	r17, r1
    230a:	19 f4       	brne	.+6      	; 0x2312 <__pack_f+0x50>
    230c:	e0 e0       	ldi	r30, 0x00	; 0
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	96 c0       	rjmp	.+300    	; 0x243e <__pack_f+0x17c>
    2312:	62 81       	ldd	r22, Z+2	; 0x02
    2314:	73 81       	ldd	r23, Z+3	; 0x03
    2316:	9f ef       	ldi	r25, 0xFF	; 255
    2318:	62 38       	cpi	r22, 0x82	; 130
    231a:	79 07       	cpc	r23, r25
    231c:	0c f0       	brlt	.+2      	; 0x2320 <__pack_f+0x5e>
    231e:	5b c0       	rjmp	.+182    	; 0x23d6 <__pack_f+0x114>
    2320:	22 e8       	ldi	r18, 0x82	; 130
    2322:	3f ef       	ldi	r19, 0xFF	; 255
    2324:	26 1b       	sub	r18, r22
    2326:	37 0b       	sbc	r19, r23
    2328:	2a 31       	cpi	r18, 0x1A	; 26
    232a:	31 05       	cpc	r19, r1
    232c:	2c f0       	brlt	.+10     	; 0x2338 <__pack_f+0x76>
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e0       	ldi	r20, 0x00	; 0
    2334:	50 e0       	ldi	r21, 0x00	; 0
    2336:	2a c0       	rjmp	.+84     	; 0x238c <__pack_f+0xca>
    2338:	b8 01       	movw	r22, r16
    233a:	a7 01       	movw	r20, r14
    233c:	02 2e       	mov	r0, r18
    233e:	04 c0       	rjmp	.+8      	; 0x2348 <__pack_f+0x86>
    2340:	76 95       	lsr	r23
    2342:	67 95       	ror	r22
    2344:	57 95       	ror	r21
    2346:	47 95       	ror	r20
    2348:	0a 94       	dec	r0
    234a:	d2 f7       	brpl	.-12     	; 0x2340 <__pack_f+0x7e>
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	a0 e0       	ldi	r26, 0x00	; 0
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	04 c0       	rjmp	.+8      	; 0x235e <__pack_f+0x9c>
    2356:	88 0f       	add	r24, r24
    2358:	99 1f       	adc	r25, r25
    235a:	aa 1f       	adc	r26, r26
    235c:	bb 1f       	adc	r27, r27
    235e:	2a 95       	dec	r18
    2360:	d2 f7       	brpl	.-12     	; 0x2356 <__pack_f+0x94>
    2362:	01 97       	sbiw	r24, 0x01	; 1
    2364:	a1 09       	sbc	r26, r1
    2366:	b1 09       	sbc	r27, r1
    2368:	8e 21       	and	r24, r14
    236a:	9f 21       	and	r25, r15
    236c:	a0 23       	and	r26, r16
    236e:	b1 23       	and	r27, r17
    2370:	00 97       	sbiw	r24, 0x00	; 0
    2372:	a1 05       	cpc	r26, r1
    2374:	b1 05       	cpc	r27, r1
    2376:	21 f0       	breq	.+8      	; 0x2380 <__pack_f+0xbe>
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	a0 e0       	ldi	r26, 0x00	; 0
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	9a 01       	movw	r18, r20
    2382:	ab 01       	movw	r20, r22
    2384:	28 2b       	or	r18, r24
    2386:	39 2b       	or	r19, r25
    2388:	4a 2b       	or	r20, r26
    238a:	5b 2b       	or	r21, r27
    238c:	da 01       	movw	r26, r20
    238e:	c9 01       	movw	r24, r18
    2390:	8f 77       	andi	r24, 0x7F	; 127
    2392:	90 70       	andi	r25, 0x00	; 0
    2394:	a0 70       	andi	r26, 0x00	; 0
    2396:	b0 70       	andi	r27, 0x00	; 0
    2398:	80 34       	cpi	r24, 0x40	; 64
    239a:	91 05       	cpc	r25, r1
    239c:	a1 05       	cpc	r26, r1
    239e:	b1 05       	cpc	r27, r1
    23a0:	39 f4       	brne	.+14     	; 0x23b0 <__pack_f+0xee>
    23a2:	27 ff       	sbrs	r18, 7
    23a4:	09 c0       	rjmp	.+18     	; 0x23b8 <__pack_f+0xf6>
    23a6:	20 5c       	subi	r18, 0xC0	; 192
    23a8:	3f 4f       	sbci	r19, 0xFF	; 255
    23aa:	4f 4f       	sbci	r20, 0xFF	; 255
    23ac:	5f 4f       	sbci	r21, 0xFF	; 255
    23ae:	04 c0       	rjmp	.+8      	; 0x23b8 <__pack_f+0xf6>
    23b0:	21 5c       	subi	r18, 0xC1	; 193
    23b2:	3f 4f       	sbci	r19, 0xFF	; 255
    23b4:	4f 4f       	sbci	r20, 0xFF	; 255
    23b6:	5f 4f       	sbci	r21, 0xFF	; 255
    23b8:	e0 e0       	ldi	r30, 0x00	; 0
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	20 30       	cpi	r18, 0x00	; 0
    23be:	a0 e0       	ldi	r26, 0x00	; 0
    23c0:	3a 07       	cpc	r19, r26
    23c2:	a0 e0       	ldi	r26, 0x00	; 0
    23c4:	4a 07       	cpc	r20, r26
    23c6:	a0 e4       	ldi	r26, 0x40	; 64
    23c8:	5a 07       	cpc	r21, r26
    23ca:	10 f0       	brcs	.+4      	; 0x23d0 <__pack_f+0x10e>
    23cc:	e1 e0       	ldi	r30, 0x01	; 1
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	79 01       	movw	r14, r18
    23d2:	8a 01       	movw	r16, r20
    23d4:	27 c0       	rjmp	.+78     	; 0x2424 <__pack_f+0x162>
    23d6:	60 38       	cpi	r22, 0x80	; 128
    23d8:	71 05       	cpc	r23, r1
    23da:	64 f5       	brge	.+88     	; 0x2434 <__pack_f+0x172>
    23dc:	fb 01       	movw	r30, r22
    23de:	e1 58       	subi	r30, 0x81	; 129
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	d8 01       	movw	r26, r16
    23e4:	c7 01       	movw	r24, r14
    23e6:	8f 77       	andi	r24, 0x7F	; 127
    23e8:	90 70       	andi	r25, 0x00	; 0
    23ea:	a0 70       	andi	r26, 0x00	; 0
    23ec:	b0 70       	andi	r27, 0x00	; 0
    23ee:	80 34       	cpi	r24, 0x40	; 64
    23f0:	91 05       	cpc	r25, r1
    23f2:	a1 05       	cpc	r26, r1
    23f4:	b1 05       	cpc	r27, r1
    23f6:	39 f4       	brne	.+14     	; 0x2406 <__pack_f+0x144>
    23f8:	e7 fe       	sbrs	r14, 7
    23fa:	0d c0       	rjmp	.+26     	; 0x2416 <__pack_f+0x154>
    23fc:	80 e4       	ldi	r24, 0x40	; 64
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	a0 e0       	ldi	r26, 0x00	; 0
    2402:	b0 e0       	ldi	r27, 0x00	; 0
    2404:	04 c0       	rjmp	.+8      	; 0x240e <__pack_f+0x14c>
    2406:	8f e3       	ldi	r24, 0x3F	; 63
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	a0 e0       	ldi	r26, 0x00	; 0
    240c:	b0 e0       	ldi	r27, 0x00	; 0
    240e:	e8 0e       	add	r14, r24
    2410:	f9 1e       	adc	r15, r25
    2412:	0a 1f       	adc	r16, r26
    2414:	1b 1f       	adc	r17, r27
    2416:	17 ff       	sbrs	r17, 7
    2418:	05 c0       	rjmp	.+10     	; 0x2424 <__pack_f+0x162>
    241a:	16 95       	lsr	r17
    241c:	07 95       	ror	r16
    241e:	f7 94       	ror	r15
    2420:	e7 94       	ror	r14
    2422:	31 96       	adiw	r30, 0x01	; 1
    2424:	87 e0       	ldi	r24, 0x07	; 7
    2426:	16 95       	lsr	r17
    2428:	07 95       	ror	r16
    242a:	f7 94       	ror	r15
    242c:	e7 94       	ror	r14
    242e:	8a 95       	dec	r24
    2430:	d1 f7       	brne	.-12     	; 0x2426 <__pack_f+0x164>
    2432:	05 c0       	rjmp	.+10     	; 0x243e <__pack_f+0x17c>
    2434:	ee 24       	eor	r14, r14
    2436:	ff 24       	eor	r15, r15
    2438:	87 01       	movw	r16, r14
    243a:	ef ef       	ldi	r30, 0xFF	; 255
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	6e 2f       	mov	r22, r30
    2440:	67 95       	ror	r22
    2442:	66 27       	eor	r22, r22
    2444:	67 95       	ror	r22
    2446:	90 2f       	mov	r25, r16
    2448:	9f 77       	andi	r25, 0x7F	; 127
    244a:	d7 94       	ror	r13
    244c:	dd 24       	eor	r13, r13
    244e:	d7 94       	ror	r13
    2450:	8e 2f       	mov	r24, r30
    2452:	86 95       	lsr	r24
    2454:	49 2f       	mov	r20, r25
    2456:	46 2b       	or	r20, r22
    2458:	58 2f       	mov	r21, r24
    245a:	5d 29       	or	r21, r13
    245c:	b7 01       	movw	r22, r14
    245e:	ca 01       	movw	r24, r20
    2460:	1f 91       	pop	r17
    2462:	0f 91       	pop	r16
    2464:	ff 90       	pop	r15
    2466:	ef 90       	pop	r14
    2468:	df 90       	pop	r13
    246a:	08 95       	ret

0000246c <__unpack_f>:
    246c:	fc 01       	movw	r30, r24
    246e:	db 01       	movw	r26, r22
    2470:	40 81       	ld	r20, Z
    2472:	51 81       	ldd	r21, Z+1	; 0x01
    2474:	22 81       	ldd	r18, Z+2	; 0x02
    2476:	62 2f       	mov	r22, r18
    2478:	6f 77       	andi	r22, 0x7F	; 127
    247a:	70 e0       	ldi	r23, 0x00	; 0
    247c:	22 1f       	adc	r18, r18
    247e:	22 27       	eor	r18, r18
    2480:	22 1f       	adc	r18, r18
    2482:	93 81       	ldd	r25, Z+3	; 0x03
    2484:	89 2f       	mov	r24, r25
    2486:	88 0f       	add	r24, r24
    2488:	82 2b       	or	r24, r18
    248a:	28 2f       	mov	r18, r24
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	99 1f       	adc	r25, r25
    2490:	99 27       	eor	r25, r25
    2492:	99 1f       	adc	r25, r25
    2494:	11 96       	adiw	r26, 0x01	; 1
    2496:	9c 93       	st	X, r25
    2498:	11 97       	sbiw	r26, 0x01	; 1
    249a:	21 15       	cp	r18, r1
    249c:	31 05       	cpc	r19, r1
    249e:	a9 f5       	brne	.+106    	; 0x250a <__unpack_f+0x9e>
    24a0:	41 15       	cp	r20, r1
    24a2:	51 05       	cpc	r21, r1
    24a4:	61 05       	cpc	r22, r1
    24a6:	71 05       	cpc	r23, r1
    24a8:	11 f4       	brne	.+4      	; 0x24ae <__unpack_f+0x42>
    24aa:	82 e0       	ldi	r24, 0x02	; 2
    24ac:	37 c0       	rjmp	.+110    	; 0x251c <__unpack_f+0xb0>
    24ae:	82 e8       	ldi	r24, 0x82	; 130
    24b0:	9f ef       	ldi	r25, 0xFF	; 255
    24b2:	13 96       	adiw	r26, 0x03	; 3
    24b4:	9c 93       	st	X, r25
    24b6:	8e 93       	st	-X, r24
    24b8:	12 97       	sbiw	r26, 0x02	; 2
    24ba:	9a 01       	movw	r18, r20
    24bc:	ab 01       	movw	r20, r22
    24be:	67 e0       	ldi	r22, 0x07	; 7
    24c0:	22 0f       	add	r18, r18
    24c2:	33 1f       	adc	r19, r19
    24c4:	44 1f       	adc	r20, r20
    24c6:	55 1f       	adc	r21, r21
    24c8:	6a 95       	dec	r22
    24ca:	d1 f7       	brne	.-12     	; 0x24c0 <__unpack_f+0x54>
    24cc:	83 e0       	ldi	r24, 0x03	; 3
    24ce:	8c 93       	st	X, r24
    24d0:	0d c0       	rjmp	.+26     	; 0x24ec <__unpack_f+0x80>
    24d2:	22 0f       	add	r18, r18
    24d4:	33 1f       	adc	r19, r19
    24d6:	44 1f       	adc	r20, r20
    24d8:	55 1f       	adc	r21, r21
    24da:	12 96       	adiw	r26, 0x02	; 2
    24dc:	8d 91       	ld	r24, X+
    24de:	9c 91       	ld	r25, X
    24e0:	13 97       	sbiw	r26, 0x03	; 3
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	13 96       	adiw	r26, 0x03	; 3
    24e6:	9c 93       	st	X, r25
    24e8:	8e 93       	st	-X, r24
    24ea:	12 97       	sbiw	r26, 0x02	; 2
    24ec:	20 30       	cpi	r18, 0x00	; 0
    24ee:	80 e0       	ldi	r24, 0x00	; 0
    24f0:	38 07       	cpc	r19, r24
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	48 07       	cpc	r20, r24
    24f6:	80 e4       	ldi	r24, 0x40	; 64
    24f8:	58 07       	cpc	r21, r24
    24fa:	58 f3       	brcs	.-42     	; 0x24d2 <__unpack_f+0x66>
    24fc:	14 96       	adiw	r26, 0x04	; 4
    24fe:	2d 93       	st	X+, r18
    2500:	3d 93       	st	X+, r19
    2502:	4d 93       	st	X+, r20
    2504:	5c 93       	st	X, r21
    2506:	17 97       	sbiw	r26, 0x07	; 7
    2508:	08 95       	ret
    250a:	2f 3f       	cpi	r18, 0xFF	; 255
    250c:	31 05       	cpc	r19, r1
    250e:	79 f4       	brne	.+30     	; 0x252e <__unpack_f+0xc2>
    2510:	41 15       	cp	r20, r1
    2512:	51 05       	cpc	r21, r1
    2514:	61 05       	cpc	r22, r1
    2516:	71 05       	cpc	r23, r1
    2518:	19 f4       	brne	.+6      	; 0x2520 <__unpack_f+0xb4>
    251a:	84 e0       	ldi	r24, 0x04	; 4
    251c:	8c 93       	st	X, r24
    251e:	08 95       	ret
    2520:	64 ff       	sbrs	r22, 4
    2522:	03 c0       	rjmp	.+6      	; 0x252a <__unpack_f+0xbe>
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	8c 93       	st	X, r24
    2528:	12 c0       	rjmp	.+36     	; 0x254e <__unpack_f+0xe2>
    252a:	1c 92       	st	X, r1
    252c:	10 c0       	rjmp	.+32     	; 0x254e <__unpack_f+0xe2>
    252e:	2f 57       	subi	r18, 0x7F	; 127
    2530:	30 40       	sbci	r19, 0x00	; 0
    2532:	13 96       	adiw	r26, 0x03	; 3
    2534:	3c 93       	st	X, r19
    2536:	2e 93       	st	-X, r18
    2538:	12 97       	sbiw	r26, 0x02	; 2
    253a:	83 e0       	ldi	r24, 0x03	; 3
    253c:	8c 93       	st	X, r24
    253e:	87 e0       	ldi	r24, 0x07	; 7
    2540:	44 0f       	add	r20, r20
    2542:	55 1f       	adc	r21, r21
    2544:	66 1f       	adc	r22, r22
    2546:	77 1f       	adc	r23, r23
    2548:	8a 95       	dec	r24
    254a:	d1 f7       	brne	.-12     	; 0x2540 <__unpack_f+0xd4>
    254c:	70 64       	ori	r23, 0x40	; 64
    254e:	14 96       	adiw	r26, 0x04	; 4
    2550:	4d 93       	st	X+, r20
    2552:	5d 93       	st	X+, r21
    2554:	6d 93       	st	X+, r22
    2556:	7c 93       	st	X, r23
    2558:	17 97       	sbiw	r26, 0x07	; 7
    255a:	08 95       	ret

0000255c <__fpcmp_parts_f>:
    255c:	1f 93       	push	r17
    255e:	dc 01       	movw	r26, r24
    2560:	fb 01       	movw	r30, r22
    2562:	9c 91       	ld	r25, X
    2564:	92 30       	cpi	r25, 0x02	; 2
    2566:	08 f4       	brcc	.+2      	; 0x256a <__fpcmp_parts_f+0xe>
    2568:	47 c0       	rjmp	.+142    	; 0x25f8 <__fpcmp_parts_f+0x9c>
    256a:	80 81       	ld	r24, Z
    256c:	82 30       	cpi	r24, 0x02	; 2
    256e:	08 f4       	brcc	.+2      	; 0x2572 <__fpcmp_parts_f+0x16>
    2570:	43 c0       	rjmp	.+134    	; 0x25f8 <__fpcmp_parts_f+0x9c>
    2572:	94 30       	cpi	r25, 0x04	; 4
    2574:	51 f4       	brne	.+20     	; 0x258a <__fpcmp_parts_f+0x2e>
    2576:	11 96       	adiw	r26, 0x01	; 1
    2578:	1c 91       	ld	r17, X
    257a:	84 30       	cpi	r24, 0x04	; 4
    257c:	99 f5       	brne	.+102    	; 0x25e4 <__fpcmp_parts_f+0x88>
    257e:	81 81       	ldd	r24, Z+1	; 0x01
    2580:	68 2f       	mov	r22, r24
    2582:	70 e0       	ldi	r23, 0x00	; 0
    2584:	61 1b       	sub	r22, r17
    2586:	71 09       	sbc	r23, r1
    2588:	3f c0       	rjmp	.+126    	; 0x2608 <__fpcmp_parts_f+0xac>
    258a:	84 30       	cpi	r24, 0x04	; 4
    258c:	21 f0       	breq	.+8      	; 0x2596 <__fpcmp_parts_f+0x3a>
    258e:	92 30       	cpi	r25, 0x02	; 2
    2590:	31 f4       	brne	.+12     	; 0x259e <__fpcmp_parts_f+0x42>
    2592:	82 30       	cpi	r24, 0x02	; 2
    2594:	b9 f1       	breq	.+110    	; 0x2604 <__fpcmp_parts_f+0xa8>
    2596:	81 81       	ldd	r24, Z+1	; 0x01
    2598:	88 23       	and	r24, r24
    259a:	89 f1       	breq	.+98     	; 0x25fe <__fpcmp_parts_f+0xa2>
    259c:	2d c0       	rjmp	.+90     	; 0x25f8 <__fpcmp_parts_f+0x9c>
    259e:	11 96       	adiw	r26, 0x01	; 1
    25a0:	1c 91       	ld	r17, X
    25a2:	11 97       	sbiw	r26, 0x01	; 1
    25a4:	82 30       	cpi	r24, 0x02	; 2
    25a6:	f1 f0       	breq	.+60     	; 0x25e4 <__fpcmp_parts_f+0x88>
    25a8:	81 81       	ldd	r24, Z+1	; 0x01
    25aa:	18 17       	cp	r17, r24
    25ac:	d9 f4       	brne	.+54     	; 0x25e4 <__fpcmp_parts_f+0x88>
    25ae:	12 96       	adiw	r26, 0x02	; 2
    25b0:	2d 91       	ld	r18, X+
    25b2:	3c 91       	ld	r19, X
    25b4:	13 97       	sbiw	r26, 0x03	; 3
    25b6:	82 81       	ldd	r24, Z+2	; 0x02
    25b8:	93 81       	ldd	r25, Z+3	; 0x03
    25ba:	82 17       	cp	r24, r18
    25bc:	93 07       	cpc	r25, r19
    25be:	94 f0       	brlt	.+36     	; 0x25e4 <__fpcmp_parts_f+0x88>
    25c0:	28 17       	cp	r18, r24
    25c2:	39 07       	cpc	r19, r25
    25c4:	bc f0       	brlt	.+46     	; 0x25f4 <__fpcmp_parts_f+0x98>
    25c6:	14 96       	adiw	r26, 0x04	; 4
    25c8:	8d 91       	ld	r24, X+
    25ca:	9d 91       	ld	r25, X+
    25cc:	0d 90       	ld	r0, X+
    25ce:	bc 91       	ld	r27, X
    25d0:	a0 2d       	mov	r26, r0
    25d2:	24 81       	ldd	r18, Z+4	; 0x04
    25d4:	35 81       	ldd	r19, Z+5	; 0x05
    25d6:	46 81       	ldd	r20, Z+6	; 0x06
    25d8:	57 81       	ldd	r21, Z+7	; 0x07
    25da:	28 17       	cp	r18, r24
    25dc:	39 07       	cpc	r19, r25
    25de:	4a 07       	cpc	r20, r26
    25e0:	5b 07       	cpc	r21, r27
    25e2:	18 f4       	brcc	.+6      	; 0x25ea <__fpcmp_parts_f+0x8e>
    25e4:	11 23       	and	r17, r17
    25e6:	41 f0       	breq	.+16     	; 0x25f8 <__fpcmp_parts_f+0x9c>
    25e8:	0a c0       	rjmp	.+20     	; 0x25fe <__fpcmp_parts_f+0xa2>
    25ea:	82 17       	cp	r24, r18
    25ec:	93 07       	cpc	r25, r19
    25ee:	a4 07       	cpc	r26, r20
    25f0:	b5 07       	cpc	r27, r21
    25f2:	40 f4       	brcc	.+16     	; 0x2604 <__fpcmp_parts_f+0xa8>
    25f4:	11 23       	and	r17, r17
    25f6:	19 f0       	breq	.+6      	; 0x25fe <__fpcmp_parts_f+0xa2>
    25f8:	61 e0       	ldi	r22, 0x01	; 1
    25fa:	70 e0       	ldi	r23, 0x00	; 0
    25fc:	05 c0       	rjmp	.+10     	; 0x2608 <__fpcmp_parts_f+0xac>
    25fe:	6f ef       	ldi	r22, 0xFF	; 255
    2600:	7f ef       	ldi	r23, 0xFF	; 255
    2602:	02 c0       	rjmp	.+4      	; 0x2608 <__fpcmp_parts_f+0xac>
    2604:	60 e0       	ldi	r22, 0x00	; 0
    2606:	70 e0       	ldi	r23, 0x00	; 0
    2608:	cb 01       	movw	r24, r22
    260a:	1f 91       	pop	r17
    260c:	08 95       	ret

0000260e <Timer_enuTimer_Init>:
void (*G_Call_3)(void)=Null_ptr;
const Timer_Config* G_ConfigPtr=Null_ptr;


ErrorStatus Timer_enuTimer_Init(const Timer_Config* ConfigPtr)
{
    260e:	df 93       	push	r29
    2610:	cf 93       	push	r28
    2612:	00 d0       	rcall	.+0      	; 0x2614 <Timer_enuTimer_Init+0x6>
    2614:	0f 92       	push	r0
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    261a:	9b 83       	std	Y+3, r25	; 0x03
    261c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 ErrorStatus=enu_OK;
    261e:	19 82       	std	Y+1, r1	; 0x01
	if(ConfigPtr==Null_ptr)
    2620:	8a 81       	ldd	r24, Y+2	; 0x02
    2622:	9b 81       	ldd	r25, Y+3	; 0x03
    2624:	00 97       	sbiw	r24, 0x00	; 0
    2626:	19 f4       	brne	.+6      	; 0x262e <Timer_enuTimer_Init+0x20>
	{
		ErrorStatus=Error_NullPtr;
    2628:	81 e0       	ldi	r24, 0x01	; 1
    262a:	89 83       	std	Y+1, r24	; 0x01
    262c:	06 c0       	rjmp	.+12     	; 0x263a <Timer_enuTimer_Init+0x2c>
	}
	else
	{
		G_ConfigPtr=  ConfigPtr;
    262e:	8a 81       	ldd	r24, Y+2	; 0x02
    2630:	9b 81       	ldd	r25, Y+3	; 0x03
    2632:	90 93 fb 01 	sts	0x01FB, r25
    2636:	80 93 fa 01 	sts	0x01FA, r24
	}



	//timer0
	if(ConfigPtr->Timer==Timer0)
    263a:	ea 81       	ldd	r30, Y+2	; 0x02
    263c:	fb 81       	ldd	r31, Y+3	; 0x03
    263e:	84 81       	ldd	r24, Z+4	; 0x04
    2640:	88 23       	and	r24, r24
    2642:	19 f4       	brne	.+6      	; 0x264a <Timer_enuTimer_Init+0x3c>
	{
		Timer0_Init();
    2644:	0e 94 3b 13 	call	0x2676	; 0x2676 <Timer0_Init>
    2648:	0f c0       	rjmp	.+30     	; 0x2668 <Timer_enuTimer_Init+0x5a>
	}
	else if(ConfigPtr->Timer==Timer1)
    264a:	ea 81       	ldd	r30, Y+2	; 0x02
    264c:	fb 81       	ldd	r31, Y+3	; 0x03
    264e:	84 81       	ldd	r24, Z+4	; 0x04
    2650:	81 30       	cpi	r24, 0x01	; 1
    2652:	19 f4       	brne	.+6      	; 0x265a <Timer_enuTimer_Init+0x4c>
	{

		Timer1_Init();
    2654:	0e 94 a8 14 	call	0x2950	; 0x2950 <Timer1_Init>
    2658:	07 c0       	rjmp	.+14     	; 0x2668 <Timer_enuTimer_Init+0x5a>
	}
	else if(ConfigPtr->Timer==Timer2)
    265a:	ea 81       	ldd	r30, Y+2	; 0x02
    265c:	fb 81       	ldd	r31, Y+3	; 0x03
    265e:	84 81       	ldd	r24, Z+4	; 0x04
    2660:	82 30       	cpi	r24, 0x02	; 2
    2662:	11 f4       	brne	.+4      	; 0x2668 <Timer_enuTimer_Init+0x5a>
	{
		Timer2_Init();
    2664:	0e 94 77 16 	call	0x2cee	; 0x2cee <Timer2_Init>
	}
	return ErrorStatus;
    2668:	89 81       	ldd	r24, Y+1	; 0x01
}
    266a:	0f 90       	pop	r0
    266c:	0f 90       	pop	r0
    266e:	0f 90       	pop	r0
    2670:	cf 91       	pop	r28
    2672:	df 91       	pop	r29
    2674:	08 95       	ret

00002676 <Timer0_Init>:




void Timer0_Init(void)
{
    2676:	df 93       	push	r29
    2678:	cf 93       	push	r28
    267a:	cd b7       	in	r28, 0x3d	; 61
    267c:	de b7       	in	r29, 0x3e	; 62
	//timer0 OVF
	if(G_ConfigPtr->Mode==Normal)
    267e:	e0 91 fa 01 	lds	r30, 0x01FA
    2682:	f0 91 fb 01 	lds	r31, 0x01FB
    2686:	85 81       	ldd	r24, Z+5	; 0x05
    2688:	88 23       	and	r24, r24
    268a:	29 f5       	brne	.+74     	; 0x26d6 <Timer0_Init+0x60>
	{
		SET_BIT(TCCR0,7);
    268c:	a3 e5       	ldi	r26, 0x53	; 83
    268e:	b0 e0       	ldi	r27, 0x00	; 0
    2690:	e3 e5       	ldi	r30, 0x53	; 83
    2692:	f0 e0       	ldi	r31, 0x00	; 0
    2694:	80 81       	ld	r24, Z
    2696:	80 68       	ori	r24, 0x80	; 128
    2698:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,3);
    269a:	a3 e5       	ldi	r26, 0x53	; 83
    269c:	b0 e0       	ldi	r27, 0x00	; 0
    269e:	e3 e5       	ldi	r30, 0x53	; 83
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	80 81       	ld	r24, Z
    26a4:	87 7f       	andi	r24, 0xF7	; 247
    26a6:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,6);
    26a8:	a3 e5       	ldi	r26, 0x53	; 83
    26aa:	b0 e0       	ldi	r27, 0x00	; 0
    26ac:	e3 e5       	ldi	r30, 0x53	; 83
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	80 81       	ld	r24, Z
    26b2:	8f 7b       	andi	r24, 0xBF	; 191
    26b4:	8c 93       	st	X, r24
		TCCR0=(TCCR0 & 0xF8) | (TIMER_PRESCALER);
    26b6:	a3 e5       	ldi	r26, 0x53	; 83
    26b8:	b0 e0       	ldi	r27, 0x00	; 0
    26ba:	e3 e5       	ldi	r30, 0x53	; 83
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	80 81       	ld	r24, Z
    26c0:	88 7f       	andi	r24, 0xF8	; 248
    26c2:	85 60       	ori	r24, 0x05	; 5
    26c4:	8c 93       	st	X, r24
#if(Timer_INTERRUPT==DISABLE_INTERRUPT)
		CLEAR_BIT(TIMSK,0);
#elif(Timer_INTERRUPT==ENABLE_INTERRUPT)
		SET_BIT(TIMSK,0);
    26c6:	a9 e5       	ldi	r26, 0x59	; 89
    26c8:	b0 e0       	ldi	r27, 0x00	; 0
    26ca:	e9 e5       	ldi	r30, 0x59	; 89
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
    26ce:	80 81       	ld	r24, Z
    26d0:	81 60       	ori	r24, 0x01	; 1
    26d2:	8c 93       	st	X, r24
    26d4:	3a c1       	rjmp	.+628    	; 0x294a <Timer0_Init+0x2d4>

	}


	//Timer0 CTC
	else if(G_ConfigPtr->Mode==CTC)
    26d6:	e0 91 fa 01 	lds	r30, 0x01FA
    26da:	f0 91 fb 01 	lds	r31, 0x01FB
    26de:	85 81       	ldd	r24, Z+5	; 0x05
    26e0:	81 30       	cpi	r24, 0x01	; 1
    26e2:	09 f0       	breq	.+2      	; 0x26e6 <Timer0_Init+0x70>
    26e4:	74 c0       	rjmp	.+232    	; 0x27ce <Timer0_Init+0x158>
	{
		SET_BIT(TCCR0,7);
    26e6:	a3 e5       	ldi	r26, 0x53	; 83
    26e8:	b0 e0       	ldi	r27, 0x00	; 0
    26ea:	e3 e5       	ldi	r30, 0x53	; 83
    26ec:	f0 e0       	ldi	r31, 0x00	; 0
    26ee:	80 81       	ld	r24, Z
    26f0:	80 68       	ori	r24, 0x80	; 128
    26f2:	8c 93       	st	X, r24
		SET_BIT(TCCR0,3);
    26f4:	a3 e5       	ldi	r26, 0x53	; 83
    26f6:	b0 e0       	ldi	r27, 0x00	; 0
    26f8:	e3 e5       	ldi	r30, 0x53	; 83
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	80 81       	ld	r24, Z
    26fe:	88 60       	ori	r24, 0x08	; 8
    2700:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,6);
    2702:	a3 e5       	ldi	r26, 0x53	; 83
    2704:	b0 e0       	ldi	r27, 0x00	; 0
    2706:	e3 e5       	ldi	r30, 0x53	; 83
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	80 81       	ld	r24, Z
    270c:	8f 7b       	andi	r24, 0xBF	; 191
    270e:	8c 93       	st	X, r24
		if(G_ConfigPtr->OC==Disconnect)
    2710:	e0 91 fa 01 	lds	r30, 0x01FA
    2714:	f0 91 fb 01 	lds	r31, 0x01FB
    2718:	86 81       	ldd	r24, Z+6	; 0x06
    271a:	88 23       	and	r24, r24
    271c:	79 f4       	brne	.+30     	; 0x273c <Timer0_Init+0xc6>
		{
			CLEAR_BIT(TCCR0,4);
    271e:	a3 e5       	ldi	r26, 0x53	; 83
    2720:	b0 e0       	ldi	r27, 0x00	; 0
    2722:	e3 e5       	ldi	r30, 0x53	; 83
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	80 81       	ld	r24, Z
    2728:	8f 7e       	andi	r24, 0xEF	; 239
    272a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,5);
    272c:	a3 e5       	ldi	r26, 0x53	; 83
    272e:	b0 e0       	ldi	r27, 0x00	; 0
    2730:	e3 e5       	ldi	r30, 0x53	; 83
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	80 81       	ld	r24, Z
    2736:	8f 7d       	andi	r24, 0xDF	; 223
    2738:	8c 93       	st	X, r24
    273a:	41 c0       	rjmp	.+130    	; 0x27be <Timer0_Init+0x148>
		}
		else if(G_ConfigPtr->OC==Toggle)
    273c:	e0 91 fa 01 	lds	r30, 0x01FA
    2740:	f0 91 fb 01 	lds	r31, 0x01FB
    2744:	86 81       	ldd	r24, Z+6	; 0x06
    2746:	81 30       	cpi	r24, 0x01	; 1
    2748:	79 f4       	brne	.+30     	; 0x2768 <Timer0_Init+0xf2>
		{
			SET_BIT(TCCR0,4);
    274a:	a3 e5       	ldi	r26, 0x53	; 83
    274c:	b0 e0       	ldi	r27, 0x00	; 0
    274e:	e3 e5       	ldi	r30, 0x53	; 83
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	80 81       	ld	r24, Z
    2754:	80 61       	ori	r24, 0x10	; 16
    2756:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,5);
    2758:	a3 e5       	ldi	r26, 0x53	; 83
    275a:	b0 e0       	ldi	r27, 0x00	; 0
    275c:	e3 e5       	ldi	r30, 0x53	; 83
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	80 81       	ld	r24, Z
    2762:	8f 7d       	andi	r24, 0xDF	; 223
    2764:	8c 93       	st	X, r24
    2766:	2b c0       	rjmp	.+86     	; 0x27be <Timer0_Init+0x148>
		}
		else if(G_ConfigPtr->OC==Clear)
    2768:	e0 91 fa 01 	lds	r30, 0x01FA
    276c:	f0 91 fb 01 	lds	r31, 0x01FB
    2770:	86 81       	ldd	r24, Z+6	; 0x06
    2772:	82 30       	cpi	r24, 0x02	; 2
    2774:	79 f4       	brne	.+30     	; 0x2794 <Timer0_Init+0x11e>
		{
			SET_BIT(TCCR0,5);
    2776:	a3 e5       	ldi	r26, 0x53	; 83
    2778:	b0 e0       	ldi	r27, 0x00	; 0
    277a:	e3 e5       	ldi	r30, 0x53	; 83
    277c:	f0 e0       	ldi	r31, 0x00	; 0
    277e:	80 81       	ld	r24, Z
    2780:	80 62       	ori	r24, 0x20	; 32
    2782:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,4);
    2784:	a3 e5       	ldi	r26, 0x53	; 83
    2786:	b0 e0       	ldi	r27, 0x00	; 0
    2788:	e3 e5       	ldi	r30, 0x53	; 83
    278a:	f0 e0       	ldi	r31, 0x00	; 0
    278c:	80 81       	ld	r24, Z
    278e:	8f 7e       	andi	r24, 0xEF	; 239
    2790:	8c 93       	st	X, r24
    2792:	15 c0       	rjmp	.+42     	; 0x27be <Timer0_Init+0x148>
		}
		else if(G_ConfigPtr->OC==set)
    2794:	e0 91 fa 01 	lds	r30, 0x01FA
    2798:	f0 91 fb 01 	lds	r31, 0x01FB
    279c:	86 81       	ldd	r24, Z+6	; 0x06
    279e:	83 30       	cpi	r24, 0x03	; 3
    27a0:	71 f4       	brne	.+28     	; 0x27be <Timer0_Init+0x148>
		{
			SET_BIT(TCCR0,5);
    27a2:	a3 e5       	ldi	r26, 0x53	; 83
    27a4:	b0 e0       	ldi	r27, 0x00	; 0
    27a6:	e3 e5       	ldi	r30, 0x53	; 83
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	80 81       	ld	r24, Z
    27ac:	80 62       	ori	r24, 0x20	; 32
    27ae:	8c 93       	st	X, r24
			SET_BIT(TCCR0,4);
    27b0:	a3 e5       	ldi	r26, 0x53	; 83
    27b2:	b0 e0       	ldi	r27, 0x00	; 0
    27b4:	e3 e5       	ldi	r30, 0x53	; 83
    27b6:	f0 e0       	ldi	r31, 0x00	; 0
    27b8:	80 81       	ld	r24, Z
    27ba:	80 61       	ori	r24, 0x10	; 16
    27bc:	8c 93       	st	X, r24
		}

#if(Timer_INTERRUPT==DISABLE_INTERRUPT)
		CLEAR_BIT(TIMSK,1);
#elif(Timer_INTERRUPT==ENABLE_INTERRUPT)
		SET_BIT(TIMSK,1);
    27be:	a9 e5       	ldi	r26, 0x59	; 89
    27c0:	b0 e0       	ldi	r27, 0x00	; 0
    27c2:	e9 e5       	ldi	r30, 0x59	; 89
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	80 81       	ld	r24, Z
    27c8:	82 60       	ori	r24, 0x02	; 2
    27ca:	8c 93       	st	X, r24
    27cc:	be c0       	rjmp	.+380    	; 0x294a <Timer0_Init+0x2d4>
#endif
	}

	else if(G_ConfigPtr->Mode==PWM)
    27ce:	e0 91 fa 01 	lds	r30, 0x01FA
    27d2:	f0 91 fb 01 	lds	r31, 0x01FB
    27d6:	85 81       	ldd	r24, Z+5	; 0x05
    27d8:	83 30       	cpi	r24, 0x03	; 3
    27da:	09 f0       	breq	.+2      	; 0x27de <Timer0_Init+0x168>
    27dc:	58 c0       	rjmp	.+176    	; 0x288e <Timer0_Init+0x218>
	{

		CLEAR_BIT(TCCR0,7);
    27de:	a3 e5       	ldi	r26, 0x53	; 83
    27e0:	b0 e0       	ldi	r27, 0x00	; 0
    27e2:	e3 e5       	ldi	r30, 0x53	; 83
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	80 81       	ld	r24, Z
    27e8:	8f 77       	andi	r24, 0x7F	; 127
    27ea:	8c 93       	st	X, r24
		SET_BIT(TCCR0,6);
    27ec:	a3 e5       	ldi	r26, 0x53	; 83
    27ee:	b0 e0       	ldi	r27, 0x00	; 0
    27f0:	e3 e5       	ldi	r30, 0x53	; 83
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	80 81       	ld	r24, Z
    27f6:	80 64       	ori	r24, 0x40	; 64
    27f8:	8c 93       	st	X, r24
		SET_BIT(TCCR0,3);
    27fa:	a3 e5       	ldi	r26, 0x53	; 83
    27fc:	b0 e0       	ldi	r27, 0x00	; 0
    27fe:	e3 e5       	ldi	r30, 0x53	; 83
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	80 81       	ld	r24, Z
    2804:	88 60       	ori	r24, 0x08	; 8
    2806:	8c 93       	st	X, r24
		if(G_ConfigPtr->OC==Disconnect)
    2808:	e0 91 fa 01 	lds	r30, 0x01FA
    280c:	f0 91 fb 01 	lds	r31, 0x01FB
    2810:	86 81       	ldd	r24, Z+6	; 0x06
    2812:	88 23       	and	r24, r24
    2814:	79 f4       	brne	.+30     	; 0x2834 <Timer0_Init+0x1be>
		{
			CLEAR_BIT(TCCR0,4);
    2816:	a3 e5       	ldi	r26, 0x53	; 83
    2818:	b0 e0       	ldi	r27, 0x00	; 0
    281a:	e3 e5       	ldi	r30, 0x53	; 83
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	80 81       	ld	r24, Z
    2820:	8f 7e       	andi	r24, 0xEF	; 239
    2822:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,5);
    2824:	a3 e5       	ldi	r26, 0x53	; 83
    2826:	b0 e0       	ldi	r27, 0x00	; 0
    2828:	e3 e5       	ldi	r30, 0x53	; 83
    282a:	f0 e0       	ldi	r31, 0x00	; 0
    282c:	80 81       	ld	r24, Z
    282e:	8f 7d       	andi	r24, 0xDF	; 223
    2830:	8c 93       	st	X, r24
    2832:	8b c0       	rjmp	.+278    	; 0x294a <Timer0_Init+0x2d4>
		}
		else if(G_ConfigPtr->OC==Clear)
    2834:	e0 91 fa 01 	lds	r30, 0x01FA
    2838:	f0 91 fb 01 	lds	r31, 0x01FB
    283c:	86 81       	ldd	r24, Z+6	; 0x06
    283e:	82 30       	cpi	r24, 0x02	; 2
    2840:	79 f4       	brne	.+30     	; 0x2860 <Timer0_Init+0x1ea>
		{
			SET_BIT(TCCR0,5);
    2842:	a3 e5       	ldi	r26, 0x53	; 83
    2844:	b0 e0       	ldi	r27, 0x00	; 0
    2846:	e3 e5       	ldi	r30, 0x53	; 83
    2848:	f0 e0       	ldi	r31, 0x00	; 0
    284a:	80 81       	ld	r24, Z
    284c:	80 62       	ori	r24, 0x20	; 32
    284e:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,4);
    2850:	a3 e5       	ldi	r26, 0x53	; 83
    2852:	b0 e0       	ldi	r27, 0x00	; 0
    2854:	e3 e5       	ldi	r30, 0x53	; 83
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	80 81       	ld	r24, Z
    285a:	8f 7e       	andi	r24, 0xEF	; 239
    285c:	8c 93       	st	X, r24
    285e:	75 c0       	rjmp	.+234    	; 0x294a <Timer0_Init+0x2d4>
		}
		else if(G_ConfigPtr->OC==set)
    2860:	e0 91 fa 01 	lds	r30, 0x01FA
    2864:	f0 91 fb 01 	lds	r31, 0x01FB
    2868:	86 81       	ldd	r24, Z+6	; 0x06
    286a:	83 30       	cpi	r24, 0x03	; 3
    286c:	09 f0       	breq	.+2      	; 0x2870 <Timer0_Init+0x1fa>
    286e:	6d c0       	rjmp	.+218    	; 0x294a <Timer0_Init+0x2d4>
		{
			SET_BIT(TCCR0,5);
    2870:	a3 e5       	ldi	r26, 0x53	; 83
    2872:	b0 e0       	ldi	r27, 0x00	; 0
    2874:	e3 e5       	ldi	r30, 0x53	; 83
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	80 81       	ld	r24, Z
    287a:	80 62       	ori	r24, 0x20	; 32
    287c:	8c 93       	st	X, r24
			SET_BIT(TCCR0,4);
    287e:	a3 e5       	ldi	r26, 0x53	; 83
    2880:	b0 e0       	ldi	r27, 0x00	; 0
    2882:	e3 e5       	ldi	r30, 0x53	; 83
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	80 81       	ld	r24, Z
    2888:	80 61       	ori	r24, 0x10	; 16
    288a:	8c 93       	st	X, r24
    288c:	5e c0       	rjmp	.+188    	; 0x294a <Timer0_Init+0x2d4>
		}
	}
	else if(G_ConfigPtr->Mode==Phase_Correct)
    288e:	e0 91 fa 01 	lds	r30, 0x01FA
    2892:	f0 91 fb 01 	lds	r31, 0x01FB
    2896:	85 81       	ldd	r24, Z+5	; 0x05
    2898:	82 30       	cpi	r24, 0x02	; 2
    289a:	09 f0       	breq	.+2      	; 0x289e <Timer0_Init+0x228>
    289c:	56 c0       	rjmp	.+172    	; 0x294a <Timer0_Init+0x2d4>
	{

		CLEAR_BIT(TCCR0,7);
    289e:	a3 e5       	ldi	r26, 0x53	; 83
    28a0:	b0 e0       	ldi	r27, 0x00	; 0
    28a2:	e3 e5       	ldi	r30, 0x53	; 83
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	80 81       	ld	r24, Z
    28a8:	8f 77       	andi	r24, 0x7F	; 127
    28aa:	8c 93       	st	X, r24
		SET_BIT(TCCR0,6);
    28ac:	a3 e5       	ldi	r26, 0x53	; 83
    28ae:	b0 e0       	ldi	r27, 0x00	; 0
    28b0:	e3 e5       	ldi	r30, 0x53	; 83
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	80 81       	ld	r24, Z
    28b6:	80 64       	ori	r24, 0x40	; 64
    28b8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,3);
    28ba:	a3 e5       	ldi	r26, 0x53	; 83
    28bc:	b0 e0       	ldi	r27, 0x00	; 0
    28be:	e3 e5       	ldi	r30, 0x53	; 83
    28c0:	f0 e0       	ldi	r31, 0x00	; 0
    28c2:	80 81       	ld	r24, Z
    28c4:	87 7f       	andi	r24, 0xF7	; 247
    28c6:	8c 93       	st	X, r24
		if(G_ConfigPtr->OC==Disconnect)
    28c8:	e0 91 fa 01 	lds	r30, 0x01FA
    28cc:	f0 91 fb 01 	lds	r31, 0x01FB
    28d0:	86 81       	ldd	r24, Z+6	; 0x06
    28d2:	88 23       	and	r24, r24
    28d4:	79 f4       	brne	.+30     	; 0x28f4 <Timer0_Init+0x27e>
		{
			CLEAR_BIT(TCCR0,4);
    28d6:	a3 e5       	ldi	r26, 0x53	; 83
    28d8:	b0 e0       	ldi	r27, 0x00	; 0
    28da:	e3 e5       	ldi	r30, 0x53	; 83
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	80 81       	ld	r24, Z
    28e0:	8f 7e       	andi	r24, 0xEF	; 239
    28e2:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,5);
    28e4:	a3 e5       	ldi	r26, 0x53	; 83
    28e6:	b0 e0       	ldi	r27, 0x00	; 0
    28e8:	e3 e5       	ldi	r30, 0x53	; 83
    28ea:	f0 e0       	ldi	r31, 0x00	; 0
    28ec:	80 81       	ld	r24, Z
    28ee:	8f 7d       	andi	r24, 0xDF	; 223
    28f0:	8c 93       	st	X, r24
    28f2:	2b c0       	rjmp	.+86     	; 0x294a <Timer0_Init+0x2d4>
		}
		else if(G_ConfigPtr->OC==Clear)
    28f4:	e0 91 fa 01 	lds	r30, 0x01FA
    28f8:	f0 91 fb 01 	lds	r31, 0x01FB
    28fc:	86 81       	ldd	r24, Z+6	; 0x06
    28fe:	82 30       	cpi	r24, 0x02	; 2
    2900:	79 f4       	brne	.+30     	; 0x2920 <Timer0_Init+0x2aa>
		{
			SET_BIT(TCCR0,5);
    2902:	a3 e5       	ldi	r26, 0x53	; 83
    2904:	b0 e0       	ldi	r27, 0x00	; 0
    2906:	e3 e5       	ldi	r30, 0x53	; 83
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	80 81       	ld	r24, Z
    290c:	80 62       	ori	r24, 0x20	; 32
    290e:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,4);
    2910:	a3 e5       	ldi	r26, 0x53	; 83
    2912:	b0 e0       	ldi	r27, 0x00	; 0
    2914:	e3 e5       	ldi	r30, 0x53	; 83
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	80 81       	ld	r24, Z
    291a:	8f 7e       	andi	r24, 0xEF	; 239
    291c:	8c 93       	st	X, r24
    291e:	15 c0       	rjmp	.+42     	; 0x294a <Timer0_Init+0x2d4>
		}
		else if(G_ConfigPtr->OC==set)
    2920:	e0 91 fa 01 	lds	r30, 0x01FA
    2924:	f0 91 fb 01 	lds	r31, 0x01FB
    2928:	86 81       	ldd	r24, Z+6	; 0x06
    292a:	83 30       	cpi	r24, 0x03	; 3
    292c:	71 f4       	brne	.+28     	; 0x294a <Timer0_Init+0x2d4>
		{
			SET_BIT(TCCR0,5);
    292e:	a3 e5       	ldi	r26, 0x53	; 83
    2930:	b0 e0       	ldi	r27, 0x00	; 0
    2932:	e3 e5       	ldi	r30, 0x53	; 83
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	80 81       	ld	r24, Z
    2938:	80 62       	ori	r24, 0x20	; 32
    293a:	8c 93       	st	X, r24
			SET_BIT(TCCR0,4);
    293c:	a3 e5       	ldi	r26, 0x53	; 83
    293e:	b0 e0       	ldi	r27, 0x00	; 0
    2940:	e3 e5       	ldi	r30, 0x53	; 83
    2942:	f0 e0       	ldi	r31, 0x00	; 0
    2944:	80 81       	ld	r24, Z
    2946:	80 61       	ori	r24, 0x10	; 16
    2948:	8c 93       	st	X, r24
		}
	}
}
    294a:	cf 91       	pop	r28
    294c:	df 91       	pop	r29
    294e:	08 95       	ret

00002950 <Timer1_Init>:
void Timer1_Init(void)
{
    2950:	df 93       	push	r29
    2952:	cf 93       	push	r28
    2954:	cd b7       	in	r28, 0x3d	; 61
    2956:	de b7       	in	r29, 0x3e	; 62
	if(G_ConfigPtr->Mode==Normal)
    2958:	e0 91 fa 01 	lds	r30, 0x01FA
    295c:	f0 91 fb 01 	lds	r31, 0x01FB
    2960:	85 81       	ldd	r24, Z+5	; 0x05
    2962:	88 23       	and	r24, r24
    2964:	91 f5       	brne	.+100    	; 0x29ca <Timer1_Init+0x7a>
	{
		SET_BIT(TCCR1A,2);
    2966:	af e4       	ldi	r26, 0x4F	; 79
    2968:	b0 e0       	ldi	r27, 0x00	; 0
    296a:	ef e4       	ldi	r30, 0x4F	; 79
    296c:	f0 e0       	ldi	r31, 0x00	; 0
    296e:	80 81       	ld	r24, Z
    2970:	84 60       	ori	r24, 0x04	; 4
    2972:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,3);
    2974:	af e4       	ldi	r26, 0x4F	; 79
    2976:	b0 e0       	ldi	r27, 0x00	; 0
    2978:	ef e4       	ldi	r30, 0x4F	; 79
    297a:	f0 e0       	ldi	r31, 0x00	; 0
    297c:	80 81       	ld	r24, Z
    297e:	88 60       	ori	r24, 0x08	; 8
    2980:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,0);
    2982:	af e4       	ldi	r26, 0x4F	; 79
    2984:	b0 e0       	ldi	r27, 0x00	; 0
    2986:	ef e4       	ldi	r30, 0x4F	; 79
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	80 81       	ld	r24, Z
    298c:	8e 7f       	andi	r24, 0xFE	; 254
    298e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,1);
    2990:	af e4       	ldi	r26, 0x4F	; 79
    2992:	b0 e0       	ldi	r27, 0x00	; 0
    2994:	ef e4       	ldi	r30, 0x4F	; 79
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	80 81       	ld	r24, Z
    299a:	8d 7f       	andi	r24, 0xFD	; 253
    299c:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,3);
    299e:	ae e4       	ldi	r26, 0x4E	; 78
    29a0:	b0 e0       	ldi	r27, 0x00	; 0
    29a2:	ee e4       	ldi	r30, 0x4E	; 78
    29a4:	f0 e0       	ldi	r31, 0x00	; 0
    29a6:	80 81       	ld	r24, Z
    29a8:	87 7f       	andi	r24, 0xF7	; 247
    29aa:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,4);
    29ac:	ae e4       	ldi	r26, 0x4E	; 78
    29ae:	b0 e0       	ldi	r27, 0x00	; 0
    29b0:	ee e4       	ldi	r30, 0x4E	; 78
    29b2:	f0 e0       	ldi	r31, 0x00	; 0
    29b4:	80 81       	ld	r24, Z
    29b6:	8f 7e       	andi	r24, 0xEF	; 239
    29b8:	8c 93       	st	X, r24
#if(Timer_INTERRUPT==DISABLE_INTERRUPT)
		CLEAR_BIT(TIMSK,2);
#elif(Timer_INTERRUPT==ENABLE_INTERRUPT)
		SET_BIT(TIMSK,2);
    29ba:	a9 e5       	ldi	r26, 0x59	; 89
    29bc:	b0 e0       	ldi	r27, 0x00	; 0
    29be:	e9 e5       	ldi	r30, 0x59	; 89
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	80 81       	ld	r24, Z
    29c4:	84 60       	ori	r24, 0x04	; 4
    29c6:	8c 93       	st	X, r24
    29c8:	8f c1       	rjmp	.+798    	; 0x2ce8 <Timer1_Init+0x398>
#endif
	}
	else if(G_ConfigPtr->Mode==CTC)
    29ca:	e0 91 fa 01 	lds	r30, 0x01FA
    29ce:	f0 91 fb 01 	lds	r31, 0x01FB
    29d2:	85 81       	ldd	r24, Z+5	; 0x05
    29d4:	81 30       	cpi	r24, 0x01	; 1
    29d6:	09 f0       	breq	.+2      	; 0x29da <Timer1_Init+0x8a>
    29d8:	89 c0       	rjmp	.+274    	; 0x2aec <Timer1_Init+0x19c>
	{

		SET_BIT(TCCR1A,2);
    29da:	af e4       	ldi	r26, 0x4F	; 79
    29dc:	b0 e0       	ldi	r27, 0x00	; 0
    29de:	ef e4       	ldi	r30, 0x4F	; 79
    29e0:	f0 e0       	ldi	r31, 0x00	; 0
    29e2:	80 81       	ld	r24, Z
    29e4:	84 60       	ori	r24, 0x04	; 4
    29e6:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,3);
    29e8:	af e4       	ldi	r26, 0x4F	; 79
    29ea:	b0 e0       	ldi	r27, 0x00	; 0
    29ec:	ef e4       	ldi	r30, 0x4F	; 79
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	80 81       	ld	r24, Z
    29f2:	88 60       	ori	r24, 0x08	; 8
    29f4:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,0);
    29f6:	af e4       	ldi	r26, 0x4F	; 79
    29f8:	b0 e0       	ldi	r27, 0x00	; 0
    29fa:	ef e4       	ldi	r30, 0x4F	; 79
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	80 81       	ld	r24, Z
    2a00:	8e 7f       	andi	r24, 0xFE	; 254
    2a02:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,1);
    2a04:	af e4       	ldi	r26, 0x4F	; 79
    2a06:	b0 e0       	ldi	r27, 0x00	; 0
    2a08:	ef e4       	ldi	r30, 0x4F	; 79
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	80 81       	ld	r24, Z
    2a0e:	8d 7f       	andi	r24, 0xFD	; 253
    2a10:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,3);
    2a12:	ae e4       	ldi	r26, 0x4E	; 78
    2a14:	b0 e0       	ldi	r27, 0x00	; 0
    2a16:	ee e4       	ldi	r30, 0x4E	; 78
    2a18:	f0 e0       	ldi	r31, 0x00	; 0
    2a1a:	80 81       	ld	r24, Z
    2a1c:	88 60       	ori	r24, 0x08	; 8
    2a1e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,4);
    2a20:	ae e4       	ldi	r26, 0x4E	; 78
    2a22:	b0 e0       	ldi	r27, 0x00	; 0
    2a24:	ee e4       	ldi	r30, 0x4E	; 78
    2a26:	f0 e0       	ldi	r31, 0x00	; 0
    2a28:	80 81       	ld	r24, Z
    2a2a:	8f 7e       	andi	r24, 0xEF	; 239
    2a2c:	8c 93       	st	X, r24
		if(G_ConfigPtr->OC==Disconnect)
    2a2e:	e0 91 fa 01 	lds	r30, 0x01FA
    2a32:	f0 91 fb 01 	lds	r31, 0x01FB
    2a36:	86 81       	ldd	r24, Z+6	; 0x06
    2a38:	88 23       	and	r24, r24
    2a3a:	79 f4       	brne	.+30     	; 0x2a5a <Timer1_Init+0x10a>
		{
			CLEAR_BIT(TCCR1A,6);
    2a3c:	af e4       	ldi	r26, 0x4F	; 79
    2a3e:	b0 e0       	ldi	r27, 0x00	; 0
    2a40:	ef e4       	ldi	r30, 0x4F	; 79
    2a42:	f0 e0       	ldi	r31, 0x00	; 0
    2a44:	80 81       	ld	r24, Z
    2a46:	8f 7b       	andi	r24, 0xBF	; 191
    2a48:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,7);
    2a4a:	af e4       	ldi	r26, 0x4F	; 79
    2a4c:	b0 e0       	ldi	r27, 0x00	; 0
    2a4e:	ef e4       	ldi	r30, 0x4F	; 79
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	80 81       	ld	r24, Z
    2a54:	8f 77       	andi	r24, 0x7F	; 127
    2a56:	8c 93       	st	X, r24
    2a58:	41 c0       	rjmp	.+130    	; 0x2adc <Timer1_Init+0x18c>
		}
		else if(G_ConfigPtr->OC==Toggle)
    2a5a:	e0 91 fa 01 	lds	r30, 0x01FA
    2a5e:	f0 91 fb 01 	lds	r31, 0x01FB
    2a62:	86 81       	ldd	r24, Z+6	; 0x06
    2a64:	81 30       	cpi	r24, 0x01	; 1
    2a66:	79 f4       	brne	.+30     	; 0x2a86 <Timer1_Init+0x136>
		{
			SET_BIT(TCCR1A,6);
    2a68:	af e4       	ldi	r26, 0x4F	; 79
    2a6a:	b0 e0       	ldi	r27, 0x00	; 0
    2a6c:	ef e4       	ldi	r30, 0x4F	; 79
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	80 81       	ld	r24, Z
    2a72:	80 64       	ori	r24, 0x40	; 64
    2a74:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,7);
    2a76:	af e4       	ldi	r26, 0x4F	; 79
    2a78:	b0 e0       	ldi	r27, 0x00	; 0
    2a7a:	ef e4       	ldi	r30, 0x4F	; 79
    2a7c:	f0 e0       	ldi	r31, 0x00	; 0
    2a7e:	80 81       	ld	r24, Z
    2a80:	8f 77       	andi	r24, 0x7F	; 127
    2a82:	8c 93       	st	X, r24
    2a84:	2b c0       	rjmp	.+86     	; 0x2adc <Timer1_Init+0x18c>
		}
		else if(G_ConfigPtr->OC==Clear)
    2a86:	e0 91 fa 01 	lds	r30, 0x01FA
    2a8a:	f0 91 fb 01 	lds	r31, 0x01FB
    2a8e:	86 81       	ldd	r24, Z+6	; 0x06
    2a90:	82 30       	cpi	r24, 0x02	; 2
    2a92:	79 f4       	brne	.+30     	; 0x2ab2 <Timer1_Init+0x162>
		{
			SET_BIT(TCCR1A,6);
    2a94:	af e4       	ldi	r26, 0x4F	; 79
    2a96:	b0 e0       	ldi	r27, 0x00	; 0
    2a98:	ef e4       	ldi	r30, 0x4F	; 79
    2a9a:	f0 e0       	ldi	r31, 0x00	; 0
    2a9c:	80 81       	ld	r24, Z
    2a9e:	80 64       	ori	r24, 0x40	; 64
    2aa0:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,7);
    2aa2:	af e4       	ldi	r26, 0x4F	; 79
    2aa4:	b0 e0       	ldi	r27, 0x00	; 0
    2aa6:	ef e4       	ldi	r30, 0x4F	; 79
    2aa8:	f0 e0       	ldi	r31, 0x00	; 0
    2aaa:	80 81       	ld	r24, Z
    2aac:	8f 77       	andi	r24, 0x7F	; 127
    2aae:	8c 93       	st	X, r24
    2ab0:	15 c0       	rjmp	.+42     	; 0x2adc <Timer1_Init+0x18c>
		}
		else if(G_ConfigPtr->OC==set)
    2ab2:	e0 91 fa 01 	lds	r30, 0x01FA
    2ab6:	f0 91 fb 01 	lds	r31, 0x01FB
    2aba:	86 81       	ldd	r24, Z+6	; 0x06
    2abc:	83 30       	cpi	r24, 0x03	; 3
    2abe:	71 f4       	brne	.+28     	; 0x2adc <Timer1_Init+0x18c>
		{
			SET_BIT(TCCR1A,6);
    2ac0:	af e4       	ldi	r26, 0x4F	; 79
    2ac2:	b0 e0       	ldi	r27, 0x00	; 0
    2ac4:	ef e4       	ldi	r30, 0x4F	; 79
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	80 81       	ld	r24, Z
    2aca:	80 64       	ori	r24, 0x40	; 64
    2acc:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,7);
    2ace:	af e4       	ldi	r26, 0x4F	; 79
    2ad0:	b0 e0       	ldi	r27, 0x00	; 0
    2ad2:	ef e4       	ldi	r30, 0x4F	; 79
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	80 81       	ld	r24, Z
    2ad8:	80 68       	ori	r24, 0x80	; 128
    2ada:	8c 93       	st	X, r24
		}
#if(Timer_INTERRUPT==DISABLE_INTERRUPT)
		CLEAR_BIT(TIMSK,4);
#elif(Timer_INTERRUPT==ENABLE_INTERRUPT)
		SET_BIT(TIMSK,4);
    2adc:	a9 e5       	ldi	r26, 0x59	; 89
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	e9 e5       	ldi	r30, 0x59	; 89
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	80 81       	ld	r24, Z
    2ae6:	80 61       	ori	r24, 0x10	; 16
    2ae8:	8c 93       	st	X, r24
    2aea:	fe c0       	rjmp	.+508    	; 0x2ce8 <Timer1_Init+0x398>
#endif
	}
	else if(G_ConfigPtr->Mode==PWM)
    2aec:	e0 91 fa 01 	lds	r30, 0x01FA
    2af0:	f0 91 fb 01 	lds	r31, 0x01FB
    2af4:	85 81       	ldd	r24, Z+5	; 0x05
    2af6:	83 30       	cpi	r24, 0x03	; 3
    2af8:	09 f0       	breq	.+2      	; 0x2afc <Timer1_Init+0x1ac>
    2afa:	83 c0       	rjmp	.+262    	; 0x2c02 <Timer1_Init+0x2b2>
	{

		CLEAR_BIT(TCCR1A,2);
    2afc:	af e4       	ldi	r26, 0x4F	; 79
    2afe:	b0 e0       	ldi	r27, 0x00	; 0
    2b00:	ef e4       	ldi	r30, 0x4F	; 79
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	80 81       	ld	r24, Z
    2b06:	8b 7f       	andi	r24, 0xFB	; 251
    2b08:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,3);
    2b0a:	af e4       	ldi	r26, 0x4F	; 79
    2b0c:	b0 e0       	ldi	r27, 0x00	; 0
    2b0e:	ef e4       	ldi	r30, 0x4F	; 79
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	80 81       	ld	r24, Z
    2b14:	87 7f       	andi	r24, 0xF7	; 247
    2b16:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,0);
    2b18:	af e4       	ldi	r26, 0x4F	; 79
    2b1a:	b0 e0       	ldi	r27, 0x00	; 0
    2b1c:	ef e4       	ldi	r30, 0x4F	; 79
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	80 81       	ld	r24, Z
    2b22:	81 60       	ori	r24, 0x01	; 1
    2b24:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,1);
    2b26:	af e4       	ldi	r26, 0x4F	; 79
    2b28:	b0 e0       	ldi	r27, 0x00	; 0
    2b2a:	ef e4       	ldi	r30, 0x4F	; 79
    2b2c:	f0 e0       	ldi	r31, 0x00	; 0
    2b2e:	80 81       	ld	r24, Z
    2b30:	82 60       	ori	r24, 0x02	; 2
    2b32:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,3);
    2b34:	ae e4       	ldi	r26, 0x4E	; 78
    2b36:	b0 e0       	ldi	r27, 0x00	; 0
    2b38:	ee e4       	ldi	r30, 0x4E	; 78
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	80 81       	ld	r24, Z
    2b3e:	88 60       	ori	r24, 0x08	; 8
    2b40:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,4);
    2b42:	ae e4       	ldi	r26, 0x4E	; 78
    2b44:	b0 e0       	ldi	r27, 0x00	; 0
    2b46:	ee e4       	ldi	r30, 0x4E	; 78
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	80 81       	ld	r24, Z
    2b4c:	80 61       	ori	r24, 0x10	; 16
    2b4e:	8c 93       	st	X, r24
		if(G_ConfigPtr->OC==Disconnect)
    2b50:	e0 91 fa 01 	lds	r30, 0x01FA
    2b54:	f0 91 fb 01 	lds	r31, 0x01FB
    2b58:	86 81       	ldd	r24, Z+6	; 0x06
    2b5a:	88 23       	and	r24, r24
    2b5c:	79 f4       	brne	.+30     	; 0x2b7c <Timer1_Init+0x22c>
		{
			CLEAR_BIT(TCCR1A,6);
    2b5e:	af e4       	ldi	r26, 0x4F	; 79
    2b60:	b0 e0       	ldi	r27, 0x00	; 0
    2b62:	ef e4       	ldi	r30, 0x4F	; 79
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	80 81       	ld	r24, Z
    2b68:	8f 7b       	andi	r24, 0xBF	; 191
    2b6a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,7);
    2b6c:	af e4       	ldi	r26, 0x4F	; 79
    2b6e:	b0 e0       	ldi	r27, 0x00	; 0
    2b70:	ef e4       	ldi	r30, 0x4F	; 79
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	80 81       	ld	r24, Z
    2b76:	8f 77       	andi	r24, 0x7F	; 127
    2b78:	8c 93       	st	X, r24
    2b7a:	b6 c0       	rjmp	.+364    	; 0x2ce8 <Timer1_Init+0x398>
		}
		else if(G_ConfigPtr->OC==Toggle)
    2b7c:	e0 91 fa 01 	lds	r30, 0x01FA
    2b80:	f0 91 fb 01 	lds	r31, 0x01FB
    2b84:	86 81       	ldd	r24, Z+6	; 0x06
    2b86:	81 30       	cpi	r24, 0x01	; 1
    2b88:	79 f4       	brne	.+30     	; 0x2ba8 <Timer1_Init+0x258>
		{
			SET_BIT(TCCR1A,6);
    2b8a:	af e4       	ldi	r26, 0x4F	; 79
    2b8c:	b0 e0       	ldi	r27, 0x00	; 0
    2b8e:	ef e4       	ldi	r30, 0x4F	; 79
    2b90:	f0 e0       	ldi	r31, 0x00	; 0
    2b92:	80 81       	ld	r24, Z
    2b94:	80 64       	ori	r24, 0x40	; 64
    2b96:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,7);
    2b98:	af e4       	ldi	r26, 0x4F	; 79
    2b9a:	b0 e0       	ldi	r27, 0x00	; 0
    2b9c:	ef e4       	ldi	r30, 0x4F	; 79
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	80 81       	ld	r24, Z
    2ba2:	8f 77       	andi	r24, 0x7F	; 127
    2ba4:	8c 93       	st	X, r24
    2ba6:	a0 c0       	rjmp	.+320    	; 0x2ce8 <Timer1_Init+0x398>
		}
		else if(G_ConfigPtr->OC==Clear)
    2ba8:	e0 91 fa 01 	lds	r30, 0x01FA
    2bac:	f0 91 fb 01 	lds	r31, 0x01FB
    2bb0:	86 81       	ldd	r24, Z+6	; 0x06
    2bb2:	82 30       	cpi	r24, 0x02	; 2
    2bb4:	79 f4       	brne	.+30     	; 0x2bd4 <Timer1_Init+0x284>
		{
			SET_BIT(TCCR1A,6);
    2bb6:	af e4       	ldi	r26, 0x4F	; 79
    2bb8:	b0 e0       	ldi	r27, 0x00	; 0
    2bba:	ef e4       	ldi	r30, 0x4F	; 79
    2bbc:	f0 e0       	ldi	r31, 0x00	; 0
    2bbe:	80 81       	ld	r24, Z
    2bc0:	80 64       	ori	r24, 0x40	; 64
    2bc2:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,7);
    2bc4:	af e4       	ldi	r26, 0x4F	; 79
    2bc6:	b0 e0       	ldi	r27, 0x00	; 0
    2bc8:	ef e4       	ldi	r30, 0x4F	; 79
    2bca:	f0 e0       	ldi	r31, 0x00	; 0
    2bcc:	80 81       	ld	r24, Z
    2bce:	8f 77       	andi	r24, 0x7F	; 127
    2bd0:	8c 93       	st	X, r24
    2bd2:	8a c0       	rjmp	.+276    	; 0x2ce8 <Timer1_Init+0x398>
		}
		else if(G_ConfigPtr->OC==set)
    2bd4:	e0 91 fa 01 	lds	r30, 0x01FA
    2bd8:	f0 91 fb 01 	lds	r31, 0x01FB
    2bdc:	86 81       	ldd	r24, Z+6	; 0x06
    2bde:	83 30       	cpi	r24, 0x03	; 3
    2be0:	09 f0       	breq	.+2      	; 0x2be4 <Timer1_Init+0x294>
    2be2:	82 c0       	rjmp	.+260    	; 0x2ce8 <Timer1_Init+0x398>
		{
			SET_BIT(TCCR1A,6);
    2be4:	af e4       	ldi	r26, 0x4F	; 79
    2be6:	b0 e0       	ldi	r27, 0x00	; 0
    2be8:	ef e4       	ldi	r30, 0x4F	; 79
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	80 81       	ld	r24, Z
    2bee:	80 64       	ori	r24, 0x40	; 64
    2bf0:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,7);
    2bf2:	af e4       	ldi	r26, 0x4F	; 79
    2bf4:	b0 e0       	ldi	r27, 0x00	; 0
    2bf6:	ef e4       	ldi	r30, 0x4F	; 79
    2bf8:	f0 e0       	ldi	r31, 0x00	; 0
    2bfa:	80 81       	ld	r24, Z
    2bfc:	80 68       	ori	r24, 0x80	; 128
    2bfe:	8c 93       	st	X, r24
    2c00:	73 c0       	rjmp	.+230    	; 0x2ce8 <Timer1_Init+0x398>
		}
	}
	else if(G_ConfigPtr->Mode==Phase_Correct)
    2c02:	e0 91 fa 01 	lds	r30, 0x01FA
    2c06:	f0 91 fb 01 	lds	r31, 0x01FB
    2c0a:	85 81       	ldd	r24, Z+5	; 0x05
    2c0c:	82 30       	cpi	r24, 0x02	; 2
    2c0e:	09 f0       	breq	.+2      	; 0x2c12 <Timer1_Init+0x2c2>
    2c10:	6b c0       	rjmp	.+214    	; 0x2ce8 <Timer1_Init+0x398>
	{

		CLEAR_BIT(TCCR1A,2);
    2c12:	af e4       	ldi	r26, 0x4F	; 79
    2c14:	b0 e0       	ldi	r27, 0x00	; 0
    2c16:	ef e4       	ldi	r30, 0x4F	; 79
    2c18:	f0 e0       	ldi	r31, 0x00	; 0
    2c1a:	80 81       	ld	r24, Z
    2c1c:	8b 7f       	andi	r24, 0xFB	; 251
    2c1e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,3);
    2c20:	af e4       	ldi	r26, 0x4F	; 79
    2c22:	b0 e0       	ldi	r27, 0x00	; 0
    2c24:	ef e4       	ldi	r30, 0x4F	; 79
    2c26:	f0 e0       	ldi	r31, 0x00	; 0
    2c28:	80 81       	ld	r24, Z
    2c2a:	87 7f       	andi	r24, 0xF7	; 247
    2c2c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,0);
    2c2e:	af e4       	ldi	r26, 0x4F	; 79
    2c30:	b0 e0       	ldi	r27, 0x00	; 0
    2c32:	ef e4       	ldi	r30, 0x4F	; 79
    2c34:	f0 e0       	ldi	r31, 0x00	; 0
    2c36:	80 81       	ld	r24, Z
    2c38:	81 60       	ori	r24, 0x01	; 1
    2c3a:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,1);
    2c3c:	af e4       	ldi	r26, 0x4F	; 79
    2c3e:	b0 e0       	ldi	r27, 0x00	; 0
    2c40:	ef e4       	ldi	r30, 0x4F	; 79
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	80 81       	ld	r24, Z
    2c46:	82 60       	ori	r24, 0x02	; 2
    2c48:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,3);
    2c4a:	ae e4       	ldi	r26, 0x4E	; 78
    2c4c:	b0 e0       	ldi	r27, 0x00	; 0
    2c4e:	ee e4       	ldi	r30, 0x4E	; 78
    2c50:	f0 e0       	ldi	r31, 0x00	; 0
    2c52:	80 81       	ld	r24, Z
    2c54:	87 7f       	andi	r24, 0xF7	; 247
    2c56:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,4);
    2c58:	ae e4       	ldi	r26, 0x4E	; 78
    2c5a:	b0 e0       	ldi	r27, 0x00	; 0
    2c5c:	ee e4       	ldi	r30, 0x4E	; 78
    2c5e:	f0 e0       	ldi	r31, 0x00	; 0
    2c60:	80 81       	ld	r24, Z
    2c62:	80 61       	ori	r24, 0x10	; 16
    2c64:	8c 93       	st	X, r24
		if(G_ConfigPtr->OC==Disconnect)
    2c66:	e0 91 fa 01 	lds	r30, 0x01FA
    2c6a:	f0 91 fb 01 	lds	r31, 0x01FB
    2c6e:	86 81       	ldd	r24, Z+6	; 0x06
    2c70:	88 23       	and	r24, r24
    2c72:	79 f4       	brne	.+30     	; 0x2c92 <Timer1_Init+0x342>
		{
			CLEAR_BIT(TCCR1A,6);
    2c74:	af e4       	ldi	r26, 0x4F	; 79
    2c76:	b0 e0       	ldi	r27, 0x00	; 0
    2c78:	ef e4       	ldi	r30, 0x4F	; 79
    2c7a:	f0 e0       	ldi	r31, 0x00	; 0
    2c7c:	80 81       	ld	r24, Z
    2c7e:	8f 7b       	andi	r24, 0xBF	; 191
    2c80:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,7);
    2c82:	af e4       	ldi	r26, 0x4F	; 79
    2c84:	b0 e0       	ldi	r27, 0x00	; 0
    2c86:	ef e4       	ldi	r30, 0x4F	; 79
    2c88:	f0 e0       	ldi	r31, 0x00	; 0
    2c8a:	80 81       	ld	r24, Z
    2c8c:	8f 77       	andi	r24, 0x7F	; 127
    2c8e:	8c 93       	st	X, r24
    2c90:	2b c0       	rjmp	.+86     	; 0x2ce8 <Timer1_Init+0x398>
		}

		else if(G_ConfigPtr->OC==Clear)
    2c92:	e0 91 fa 01 	lds	r30, 0x01FA
    2c96:	f0 91 fb 01 	lds	r31, 0x01FB
    2c9a:	86 81       	ldd	r24, Z+6	; 0x06
    2c9c:	82 30       	cpi	r24, 0x02	; 2
    2c9e:	79 f4       	brne	.+30     	; 0x2cbe <Timer1_Init+0x36e>
		{
			SET_BIT(TCCR1A,6);
    2ca0:	af e4       	ldi	r26, 0x4F	; 79
    2ca2:	b0 e0       	ldi	r27, 0x00	; 0
    2ca4:	ef e4       	ldi	r30, 0x4F	; 79
    2ca6:	f0 e0       	ldi	r31, 0x00	; 0
    2ca8:	80 81       	ld	r24, Z
    2caa:	80 64       	ori	r24, 0x40	; 64
    2cac:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,7);
    2cae:	af e4       	ldi	r26, 0x4F	; 79
    2cb0:	b0 e0       	ldi	r27, 0x00	; 0
    2cb2:	ef e4       	ldi	r30, 0x4F	; 79
    2cb4:	f0 e0       	ldi	r31, 0x00	; 0
    2cb6:	80 81       	ld	r24, Z
    2cb8:	8f 77       	andi	r24, 0x7F	; 127
    2cba:	8c 93       	st	X, r24
    2cbc:	15 c0       	rjmp	.+42     	; 0x2ce8 <Timer1_Init+0x398>
		}
		else if(G_ConfigPtr->OC==set)
    2cbe:	e0 91 fa 01 	lds	r30, 0x01FA
    2cc2:	f0 91 fb 01 	lds	r31, 0x01FB
    2cc6:	86 81       	ldd	r24, Z+6	; 0x06
    2cc8:	83 30       	cpi	r24, 0x03	; 3
    2cca:	71 f4       	brne	.+28     	; 0x2ce8 <Timer1_Init+0x398>
		{
			SET_BIT(TCCR1A,6);
    2ccc:	af e4       	ldi	r26, 0x4F	; 79
    2cce:	b0 e0       	ldi	r27, 0x00	; 0
    2cd0:	ef e4       	ldi	r30, 0x4F	; 79
    2cd2:	f0 e0       	ldi	r31, 0x00	; 0
    2cd4:	80 81       	ld	r24, Z
    2cd6:	80 64       	ori	r24, 0x40	; 64
    2cd8:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,7);
    2cda:	af e4       	ldi	r26, 0x4F	; 79
    2cdc:	b0 e0       	ldi	r27, 0x00	; 0
    2cde:	ef e4       	ldi	r30, 0x4F	; 79
    2ce0:	f0 e0       	ldi	r31, 0x00	; 0
    2ce2:	80 81       	ld	r24, Z
    2ce4:	80 68       	ori	r24, 0x80	; 128
    2ce6:	8c 93       	st	X, r24
		}
	}

}
    2ce8:	cf 91       	pop	r28
    2cea:	df 91       	pop	r29
    2cec:	08 95       	ret

00002cee <Timer2_Init>:

void Timer2_Init(void)
{
    2cee:	df 93       	push	r29
    2cf0:	cf 93       	push	r28
    2cf2:	cd b7       	in	r28, 0x3d	; 61
    2cf4:	de b7       	in	r29, 0x3e	; 62
	if(G_ConfigPtr->Mode==Normal)
    2cf6:	e0 91 fa 01 	lds	r30, 0x01FA
    2cfa:	f0 91 fb 01 	lds	r31, 0x01FB
    2cfe:	85 81       	ldd	r24, Z+5	; 0x05
    2d00:	88 23       	and	r24, r24
    2d02:	e9 f4       	brne	.+58     	; 0x2d3e <Timer2_Init+0x50>
	{
		SET_BIT(TCCR2,7);
    2d04:	a5 e4       	ldi	r26, 0x45	; 69
    2d06:	b0 e0       	ldi	r27, 0x00	; 0
    2d08:	e5 e4       	ldi	r30, 0x45	; 69
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	80 81       	ld	r24, Z
    2d0e:	80 68       	ori	r24, 0x80	; 128
    2d10:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,3);
    2d12:	a5 e4       	ldi	r26, 0x45	; 69
    2d14:	b0 e0       	ldi	r27, 0x00	; 0
    2d16:	e5 e4       	ldi	r30, 0x45	; 69
    2d18:	f0 e0       	ldi	r31, 0x00	; 0
    2d1a:	80 81       	ld	r24, Z
    2d1c:	87 7f       	andi	r24, 0xF7	; 247
    2d1e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,6);
    2d20:	a5 e4       	ldi	r26, 0x45	; 69
    2d22:	b0 e0       	ldi	r27, 0x00	; 0
    2d24:	e5 e4       	ldi	r30, 0x45	; 69
    2d26:	f0 e0       	ldi	r31, 0x00	; 0
    2d28:	80 81       	ld	r24, Z
    2d2a:	8f 7b       	andi	r24, 0xBF	; 191
    2d2c:	8c 93       	st	X, r24
#if(Timer_INTERRUPT==DISABLE_INTERRUPT)
		CLEAR_BIT(TIMSK,6);
#elif(Timer_INTERRUPT==ENABLE_INTERRUPT)
		SET_BIT(TIMSK,6);
    2d2e:	a9 e5       	ldi	r26, 0x59	; 89
    2d30:	b0 e0       	ldi	r27, 0x00	; 0
    2d32:	e9 e5       	ldi	r30, 0x59	; 89
    2d34:	f0 e0       	ldi	r31, 0x00	; 0
    2d36:	80 81       	ld	r24, Z
    2d38:	80 64       	ori	r24, 0x40	; 64
    2d3a:	8c 93       	st	X, r24
    2d3c:	3a c1       	rjmp	.+628    	; 0x2fb2 <Timer2_Init+0x2c4>

	}


	//Timer0 CTC
	else if(G_ConfigPtr->Mode==CTC)
    2d3e:	e0 91 fa 01 	lds	r30, 0x01FA
    2d42:	f0 91 fb 01 	lds	r31, 0x01FB
    2d46:	85 81       	ldd	r24, Z+5	; 0x05
    2d48:	81 30       	cpi	r24, 0x01	; 1
    2d4a:	09 f0       	breq	.+2      	; 0x2d4e <Timer2_Init+0x60>
    2d4c:	74 c0       	rjmp	.+232    	; 0x2e36 <Timer2_Init+0x148>
	{

		SET_BIT(TCCR2,7);
    2d4e:	a5 e4       	ldi	r26, 0x45	; 69
    2d50:	b0 e0       	ldi	r27, 0x00	; 0
    2d52:	e5 e4       	ldi	r30, 0x45	; 69
    2d54:	f0 e0       	ldi	r31, 0x00	; 0
    2d56:	80 81       	ld	r24, Z
    2d58:	80 68       	ori	r24, 0x80	; 128
    2d5a:	8c 93       	st	X, r24
		SET_BIT(TCCR2,3);
    2d5c:	a5 e4       	ldi	r26, 0x45	; 69
    2d5e:	b0 e0       	ldi	r27, 0x00	; 0
    2d60:	e5 e4       	ldi	r30, 0x45	; 69
    2d62:	f0 e0       	ldi	r31, 0x00	; 0
    2d64:	80 81       	ld	r24, Z
    2d66:	88 60       	ori	r24, 0x08	; 8
    2d68:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,6);
    2d6a:	a5 e4       	ldi	r26, 0x45	; 69
    2d6c:	b0 e0       	ldi	r27, 0x00	; 0
    2d6e:	e5 e4       	ldi	r30, 0x45	; 69
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	80 81       	ld	r24, Z
    2d74:	8f 7b       	andi	r24, 0xBF	; 191
    2d76:	8c 93       	st	X, r24
		if(G_ConfigPtr->OC==Disconnect)
    2d78:	e0 91 fa 01 	lds	r30, 0x01FA
    2d7c:	f0 91 fb 01 	lds	r31, 0x01FB
    2d80:	86 81       	ldd	r24, Z+6	; 0x06
    2d82:	88 23       	and	r24, r24
    2d84:	79 f4       	brne	.+30     	; 0x2da4 <Timer2_Init+0xb6>
		{
			CLEAR_BIT(TCCR2,4);
    2d86:	a5 e4       	ldi	r26, 0x45	; 69
    2d88:	b0 e0       	ldi	r27, 0x00	; 0
    2d8a:	e5 e4       	ldi	r30, 0x45	; 69
    2d8c:	f0 e0       	ldi	r31, 0x00	; 0
    2d8e:	80 81       	ld	r24, Z
    2d90:	8f 7e       	andi	r24, 0xEF	; 239
    2d92:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,5);
    2d94:	a5 e4       	ldi	r26, 0x45	; 69
    2d96:	b0 e0       	ldi	r27, 0x00	; 0
    2d98:	e5 e4       	ldi	r30, 0x45	; 69
    2d9a:	f0 e0       	ldi	r31, 0x00	; 0
    2d9c:	80 81       	ld	r24, Z
    2d9e:	8f 7d       	andi	r24, 0xDF	; 223
    2da0:	8c 93       	st	X, r24
    2da2:	41 c0       	rjmp	.+130    	; 0x2e26 <Timer2_Init+0x138>
		}
		else if(G_ConfigPtr->OC==Toggle)
    2da4:	e0 91 fa 01 	lds	r30, 0x01FA
    2da8:	f0 91 fb 01 	lds	r31, 0x01FB
    2dac:	86 81       	ldd	r24, Z+6	; 0x06
    2dae:	81 30       	cpi	r24, 0x01	; 1
    2db0:	79 f4       	brne	.+30     	; 0x2dd0 <Timer2_Init+0xe2>
		{
			SET_BIT(TCCR2,4);
    2db2:	a5 e4       	ldi	r26, 0x45	; 69
    2db4:	b0 e0       	ldi	r27, 0x00	; 0
    2db6:	e5 e4       	ldi	r30, 0x45	; 69
    2db8:	f0 e0       	ldi	r31, 0x00	; 0
    2dba:	80 81       	ld	r24, Z
    2dbc:	80 61       	ori	r24, 0x10	; 16
    2dbe:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,5);
    2dc0:	a5 e4       	ldi	r26, 0x45	; 69
    2dc2:	b0 e0       	ldi	r27, 0x00	; 0
    2dc4:	e5 e4       	ldi	r30, 0x45	; 69
    2dc6:	f0 e0       	ldi	r31, 0x00	; 0
    2dc8:	80 81       	ld	r24, Z
    2dca:	8f 7d       	andi	r24, 0xDF	; 223
    2dcc:	8c 93       	st	X, r24
    2dce:	2b c0       	rjmp	.+86     	; 0x2e26 <Timer2_Init+0x138>
		}
		else if(G_ConfigPtr->OC==Clear)
    2dd0:	e0 91 fa 01 	lds	r30, 0x01FA
    2dd4:	f0 91 fb 01 	lds	r31, 0x01FB
    2dd8:	86 81       	ldd	r24, Z+6	; 0x06
    2dda:	82 30       	cpi	r24, 0x02	; 2
    2ddc:	79 f4       	brne	.+30     	; 0x2dfc <Timer2_Init+0x10e>
		{
			SET_BIT(TCCR2,5);
    2dde:	a5 e4       	ldi	r26, 0x45	; 69
    2de0:	b0 e0       	ldi	r27, 0x00	; 0
    2de2:	e5 e4       	ldi	r30, 0x45	; 69
    2de4:	f0 e0       	ldi	r31, 0x00	; 0
    2de6:	80 81       	ld	r24, Z
    2de8:	80 62       	ori	r24, 0x20	; 32
    2dea:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,4);
    2dec:	a5 e4       	ldi	r26, 0x45	; 69
    2dee:	b0 e0       	ldi	r27, 0x00	; 0
    2df0:	e5 e4       	ldi	r30, 0x45	; 69
    2df2:	f0 e0       	ldi	r31, 0x00	; 0
    2df4:	80 81       	ld	r24, Z
    2df6:	8f 7e       	andi	r24, 0xEF	; 239
    2df8:	8c 93       	st	X, r24
    2dfa:	15 c0       	rjmp	.+42     	; 0x2e26 <Timer2_Init+0x138>
		}
		else if(G_ConfigPtr->OC==set)
    2dfc:	e0 91 fa 01 	lds	r30, 0x01FA
    2e00:	f0 91 fb 01 	lds	r31, 0x01FB
    2e04:	86 81       	ldd	r24, Z+6	; 0x06
    2e06:	83 30       	cpi	r24, 0x03	; 3
    2e08:	71 f4       	brne	.+28     	; 0x2e26 <Timer2_Init+0x138>
		{
			SET_BIT(TCCR2,5);
    2e0a:	a5 e4       	ldi	r26, 0x45	; 69
    2e0c:	b0 e0       	ldi	r27, 0x00	; 0
    2e0e:	e5 e4       	ldi	r30, 0x45	; 69
    2e10:	f0 e0       	ldi	r31, 0x00	; 0
    2e12:	80 81       	ld	r24, Z
    2e14:	80 62       	ori	r24, 0x20	; 32
    2e16:	8c 93       	st	X, r24
			SET_BIT(TCCR2,4);
    2e18:	a5 e4       	ldi	r26, 0x45	; 69
    2e1a:	b0 e0       	ldi	r27, 0x00	; 0
    2e1c:	e5 e4       	ldi	r30, 0x45	; 69
    2e1e:	f0 e0       	ldi	r31, 0x00	; 0
    2e20:	80 81       	ld	r24, Z
    2e22:	80 61       	ori	r24, 0x10	; 16
    2e24:	8c 93       	st	X, r24
		}
#if(Timer_INTERRUPT==DISABLE_INTERRUPT)
		CLEAR_BIT(TIMSK,7);
#elif(Timer_INTERRUPT==ENABLE_INTERRUPT)
		SET_BIT(TIMSK,7);
    2e26:	a9 e5       	ldi	r26, 0x59	; 89
    2e28:	b0 e0       	ldi	r27, 0x00	; 0
    2e2a:	e9 e5       	ldi	r30, 0x59	; 89
    2e2c:	f0 e0       	ldi	r31, 0x00	; 0
    2e2e:	80 81       	ld	r24, Z
    2e30:	80 68       	ori	r24, 0x80	; 128
    2e32:	8c 93       	st	X, r24
    2e34:	be c0       	rjmp	.+380    	; 0x2fb2 <Timer2_Init+0x2c4>
#endif

	}
	else if(G_ConfigPtr->Mode==PWM)
    2e36:	e0 91 fa 01 	lds	r30, 0x01FA
    2e3a:	f0 91 fb 01 	lds	r31, 0x01FB
    2e3e:	85 81       	ldd	r24, Z+5	; 0x05
    2e40:	83 30       	cpi	r24, 0x03	; 3
    2e42:	09 f0       	breq	.+2      	; 0x2e46 <Timer2_Init+0x158>
    2e44:	58 c0       	rjmp	.+176    	; 0x2ef6 <Timer2_Init+0x208>
	{

		CLEAR_BIT(TCCR2,7);
    2e46:	a5 e4       	ldi	r26, 0x45	; 69
    2e48:	b0 e0       	ldi	r27, 0x00	; 0
    2e4a:	e5 e4       	ldi	r30, 0x45	; 69
    2e4c:	f0 e0       	ldi	r31, 0x00	; 0
    2e4e:	80 81       	ld	r24, Z
    2e50:	8f 77       	andi	r24, 0x7F	; 127
    2e52:	8c 93       	st	X, r24
		SET_BIT(TCCR2,6);
    2e54:	a5 e4       	ldi	r26, 0x45	; 69
    2e56:	b0 e0       	ldi	r27, 0x00	; 0
    2e58:	e5 e4       	ldi	r30, 0x45	; 69
    2e5a:	f0 e0       	ldi	r31, 0x00	; 0
    2e5c:	80 81       	ld	r24, Z
    2e5e:	80 64       	ori	r24, 0x40	; 64
    2e60:	8c 93       	st	X, r24
		SET_BIT(TCCR2,3);
    2e62:	a5 e4       	ldi	r26, 0x45	; 69
    2e64:	b0 e0       	ldi	r27, 0x00	; 0
    2e66:	e5 e4       	ldi	r30, 0x45	; 69
    2e68:	f0 e0       	ldi	r31, 0x00	; 0
    2e6a:	80 81       	ld	r24, Z
    2e6c:	88 60       	ori	r24, 0x08	; 8
    2e6e:	8c 93       	st	X, r24
		if(G_ConfigPtr->OC==Disconnect)
    2e70:	e0 91 fa 01 	lds	r30, 0x01FA
    2e74:	f0 91 fb 01 	lds	r31, 0x01FB
    2e78:	86 81       	ldd	r24, Z+6	; 0x06
    2e7a:	88 23       	and	r24, r24
    2e7c:	79 f4       	brne	.+30     	; 0x2e9c <Timer2_Init+0x1ae>
		{
			CLEAR_BIT(TCCR2,4);
    2e7e:	a5 e4       	ldi	r26, 0x45	; 69
    2e80:	b0 e0       	ldi	r27, 0x00	; 0
    2e82:	e5 e4       	ldi	r30, 0x45	; 69
    2e84:	f0 e0       	ldi	r31, 0x00	; 0
    2e86:	80 81       	ld	r24, Z
    2e88:	8f 7e       	andi	r24, 0xEF	; 239
    2e8a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,5);
    2e8c:	a5 e4       	ldi	r26, 0x45	; 69
    2e8e:	b0 e0       	ldi	r27, 0x00	; 0
    2e90:	e5 e4       	ldi	r30, 0x45	; 69
    2e92:	f0 e0       	ldi	r31, 0x00	; 0
    2e94:	80 81       	ld	r24, Z
    2e96:	8f 7d       	andi	r24, 0xDF	; 223
    2e98:	8c 93       	st	X, r24
    2e9a:	8b c0       	rjmp	.+278    	; 0x2fb2 <Timer2_Init+0x2c4>
		}
		else if(G_ConfigPtr->OC==Clear)
    2e9c:	e0 91 fa 01 	lds	r30, 0x01FA
    2ea0:	f0 91 fb 01 	lds	r31, 0x01FB
    2ea4:	86 81       	ldd	r24, Z+6	; 0x06
    2ea6:	82 30       	cpi	r24, 0x02	; 2
    2ea8:	79 f4       	brne	.+30     	; 0x2ec8 <Timer2_Init+0x1da>
		{
			SET_BIT(TCCR2,5);
    2eaa:	a5 e4       	ldi	r26, 0x45	; 69
    2eac:	b0 e0       	ldi	r27, 0x00	; 0
    2eae:	e5 e4       	ldi	r30, 0x45	; 69
    2eb0:	f0 e0       	ldi	r31, 0x00	; 0
    2eb2:	80 81       	ld	r24, Z
    2eb4:	80 62       	ori	r24, 0x20	; 32
    2eb6:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,4);
    2eb8:	a5 e4       	ldi	r26, 0x45	; 69
    2eba:	b0 e0       	ldi	r27, 0x00	; 0
    2ebc:	e5 e4       	ldi	r30, 0x45	; 69
    2ebe:	f0 e0       	ldi	r31, 0x00	; 0
    2ec0:	80 81       	ld	r24, Z
    2ec2:	8f 7e       	andi	r24, 0xEF	; 239
    2ec4:	8c 93       	st	X, r24
    2ec6:	75 c0       	rjmp	.+234    	; 0x2fb2 <Timer2_Init+0x2c4>
		}
		else if(G_ConfigPtr->OC==set)
    2ec8:	e0 91 fa 01 	lds	r30, 0x01FA
    2ecc:	f0 91 fb 01 	lds	r31, 0x01FB
    2ed0:	86 81       	ldd	r24, Z+6	; 0x06
    2ed2:	83 30       	cpi	r24, 0x03	; 3
    2ed4:	09 f0       	breq	.+2      	; 0x2ed8 <Timer2_Init+0x1ea>
    2ed6:	6d c0       	rjmp	.+218    	; 0x2fb2 <Timer2_Init+0x2c4>
		{
			SET_BIT(TCCR2,5);
    2ed8:	a5 e4       	ldi	r26, 0x45	; 69
    2eda:	b0 e0       	ldi	r27, 0x00	; 0
    2edc:	e5 e4       	ldi	r30, 0x45	; 69
    2ede:	f0 e0       	ldi	r31, 0x00	; 0
    2ee0:	80 81       	ld	r24, Z
    2ee2:	80 62       	ori	r24, 0x20	; 32
    2ee4:	8c 93       	st	X, r24
			SET_BIT(TCCR2,4);
    2ee6:	a5 e4       	ldi	r26, 0x45	; 69
    2ee8:	b0 e0       	ldi	r27, 0x00	; 0
    2eea:	e5 e4       	ldi	r30, 0x45	; 69
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	80 81       	ld	r24, Z
    2ef0:	80 61       	ori	r24, 0x10	; 16
    2ef2:	8c 93       	st	X, r24
    2ef4:	5e c0       	rjmp	.+188    	; 0x2fb2 <Timer2_Init+0x2c4>
		}
	}
	else if(G_ConfigPtr->Mode==Phase_Correct)
    2ef6:	e0 91 fa 01 	lds	r30, 0x01FA
    2efa:	f0 91 fb 01 	lds	r31, 0x01FB
    2efe:	85 81       	ldd	r24, Z+5	; 0x05
    2f00:	82 30       	cpi	r24, 0x02	; 2
    2f02:	09 f0       	breq	.+2      	; 0x2f06 <Timer2_Init+0x218>
    2f04:	56 c0       	rjmp	.+172    	; 0x2fb2 <Timer2_Init+0x2c4>
	{

		CLEAR_BIT(TCCR2,7);
    2f06:	a5 e4       	ldi	r26, 0x45	; 69
    2f08:	b0 e0       	ldi	r27, 0x00	; 0
    2f0a:	e5 e4       	ldi	r30, 0x45	; 69
    2f0c:	f0 e0       	ldi	r31, 0x00	; 0
    2f0e:	80 81       	ld	r24, Z
    2f10:	8f 77       	andi	r24, 0x7F	; 127
    2f12:	8c 93       	st	X, r24
		SET_BIT(TCCR2,6);
    2f14:	a5 e4       	ldi	r26, 0x45	; 69
    2f16:	b0 e0       	ldi	r27, 0x00	; 0
    2f18:	e5 e4       	ldi	r30, 0x45	; 69
    2f1a:	f0 e0       	ldi	r31, 0x00	; 0
    2f1c:	80 81       	ld	r24, Z
    2f1e:	80 64       	ori	r24, 0x40	; 64
    2f20:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,3);
    2f22:	a5 e4       	ldi	r26, 0x45	; 69
    2f24:	b0 e0       	ldi	r27, 0x00	; 0
    2f26:	e5 e4       	ldi	r30, 0x45	; 69
    2f28:	f0 e0       	ldi	r31, 0x00	; 0
    2f2a:	80 81       	ld	r24, Z
    2f2c:	87 7f       	andi	r24, 0xF7	; 247
    2f2e:	8c 93       	st	X, r24
		if(G_ConfigPtr->OC==Disconnect)
    2f30:	e0 91 fa 01 	lds	r30, 0x01FA
    2f34:	f0 91 fb 01 	lds	r31, 0x01FB
    2f38:	86 81       	ldd	r24, Z+6	; 0x06
    2f3a:	88 23       	and	r24, r24
    2f3c:	79 f4       	brne	.+30     	; 0x2f5c <Timer2_Init+0x26e>
		{
			CLEAR_BIT(TCCR2,4);
    2f3e:	a5 e4       	ldi	r26, 0x45	; 69
    2f40:	b0 e0       	ldi	r27, 0x00	; 0
    2f42:	e5 e4       	ldi	r30, 0x45	; 69
    2f44:	f0 e0       	ldi	r31, 0x00	; 0
    2f46:	80 81       	ld	r24, Z
    2f48:	8f 7e       	andi	r24, 0xEF	; 239
    2f4a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,5);
    2f4c:	a5 e4       	ldi	r26, 0x45	; 69
    2f4e:	b0 e0       	ldi	r27, 0x00	; 0
    2f50:	e5 e4       	ldi	r30, 0x45	; 69
    2f52:	f0 e0       	ldi	r31, 0x00	; 0
    2f54:	80 81       	ld	r24, Z
    2f56:	8f 7d       	andi	r24, 0xDF	; 223
    2f58:	8c 93       	st	X, r24
    2f5a:	2b c0       	rjmp	.+86     	; 0x2fb2 <Timer2_Init+0x2c4>
		}
		else if(G_ConfigPtr->OC==Clear)
    2f5c:	e0 91 fa 01 	lds	r30, 0x01FA
    2f60:	f0 91 fb 01 	lds	r31, 0x01FB
    2f64:	86 81       	ldd	r24, Z+6	; 0x06
    2f66:	82 30       	cpi	r24, 0x02	; 2
    2f68:	79 f4       	brne	.+30     	; 0x2f88 <Timer2_Init+0x29a>
		{
			SET_BIT(TCCR2,5);
    2f6a:	a5 e4       	ldi	r26, 0x45	; 69
    2f6c:	b0 e0       	ldi	r27, 0x00	; 0
    2f6e:	e5 e4       	ldi	r30, 0x45	; 69
    2f70:	f0 e0       	ldi	r31, 0x00	; 0
    2f72:	80 81       	ld	r24, Z
    2f74:	80 62       	ori	r24, 0x20	; 32
    2f76:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,4);
    2f78:	a5 e4       	ldi	r26, 0x45	; 69
    2f7a:	b0 e0       	ldi	r27, 0x00	; 0
    2f7c:	e5 e4       	ldi	r30, 0x45	; 69
    2f7e:	f0 e0       	ldi	r31, 0x00	; 0
    2f80:	80 81       	ld	r24, Z
    2f82:	8f 7e       	andi	r24, 0xEF	; 239
    2f84:	8c 93       	st	X, r24
    2f86:	15 c0       	rjmp	.+42     	; 0x2fb2 <Timer2_Init+0x2c4>
		}
		else if(G_ConfigPtr->OC==set)
    2f88:	e0 91 fa 01 	lds	r30, 0x01FA
    2f8c:	f0 91 fb 01 	lds	r31, 0x01FB
    2f90:	86 81       	ldd	r24, Z+6	; 0x06
    2f92:	83 30       	cpi	r24, 0x03	; 3
    2f94:	71 f4       	brne	.+28     	; 0x2fb2 <Timer2_Init+0x2c4>
		{
			SET_BIT(TCCR2,5);
    2f96:	a5 e4       	ldi	r26, 0x45	; 69
    2f98:	b0 e0       	ldi	r27, 0x00	; 0
    2f9a:	e5 e4       	ldi	r30, 0x45	; 69
    2f9c:	f0 e0       	ldi	r31, 0x00	; 0
    2f9e:	80 81       	ld	r24, Z
    2fa0:	80 62       	ori	r24, 0x20	; 32
    2fa2:	8c 93       	st	X, r24
			SET_BIT(TCCR2,4);
    2fa4:	a5 e4       	ldi	r26, 0x45	; 69
    2fa6:	b0 e0       	ldi	r27, 0x00	; 0
    2fa8:	e5 e4       	ldi	r30, 0x45	; 69
    2faa:	f0 e0       	ldi	r31, 0x00	; 0
    2fac:	80 81       	ld	r24, Z
    2fae:	80 61       	ori	r24, 0x10	; 16
    2fb0:	8c 93       	st	X, r24
		}
	}
}
    2fb2:	cf 91       	pop	r28
    2fb4:	df 91       	pop	r29
    2fb6:	08 95       	ret

00002fb8 <Timer_DeInit>:

void Timer_DeInit(Timer_Type Timer)
{
    2fb8:	df 93       	push	r29
    2fba:	cf 93       	push	r28
    2fbc:	00 d0       	rcall	.+0      	; 0x2fbe <Timer_DeInit+0x6>
    2fbe:	0f 92       	push	r0
    2fc0:	cd b7       	in	r28, 0x3d	; 61
    2fc2:	de b7       	in	r29, 0x3e	; 62
    2fc4:	89 83       	std	Y+1, r24	; 0x01
	switch(Timer)
    2fc6:	89 81       	ldd	r24, Y+1	; 0x01
    2fc8:	28 2f       	mov	r18, r24
    2fca:	30 e0       	ldi	r19, 0x00	; 0
    2fcc:	3b 83       	std	Y+3, r19	; 0x03
    2fce:	2a 83       	std	Y+2, r18	; 0x02
    2fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd2:	9b 81       	ldd	r25, Y+3	; 0x03
    2fd4:	81 30       	cpi	r24, 0x01	; 1
    2fd6:	91 05       	cpc	r25, r1
    2fd8:	69 f0       	breq	.+26     	; 0x2ff4 <Timer_DeInit+0x3c>
    2fda:	2a 81       	ldd	r18, Y+2	; 0x02
    2fdc:	3b 81       	ldd	r19, Y+3	; 0x03
    2fde:	22 30       	cpi	r18, 0x02	; 2
    2fe0:	31 05       	cpc	r19, r1
    2fe2:	61 f0       	breq	.+24     	; 0x2ffc <Timer_DeInit+0x44>
    2fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe6:	9b 81       	ldd	r25, Y+3	; 0x03
    2fe8:	00 97       	sbiw	r24, 0x00	; 0
    2fea:	59 f4       	brne	.+22     	; 0x3002 <Timer_DeInit+0x4a>
	{
	case Timer0:
		TCCR0=0;
    2fec:	e3 e5       	ldi	r30, 0x53	; 83
    2fee:	f0 e0       	ldi	r31, 0x00	; 0
    2ff0:	10 82       	st	Z, r1
    2ff2:	07 c0       	rjmp	.+14     	; 0x3002 <Timer_DeInit+0x4a>
		break;
	case Timer1:
		TCCR1B=0;
    2ff4:	ee e4       	ldi	r30, 0x4E	; 78
    2ff6:	f0 e0       	ldi	r31, 0x00	; 0
    2ff8:	10 82       	st	Z, r1
    2ffa:	03 c0       	rjmp	.+6      	; 0x3002 <Timer_DeInit+0x4a>
		break;
	case Timer2:
		TCCR2=0;
    2ffc:	e5 e4       	ldi	r30, 0x45	; 69
    2ffe:	f0 e0       	ldi	r31, 0x00	; 0
    3000:	10 82       	st	Z, r1
		break;
	}
}
    3002:	0f 90       	pop	r0
    3004:	0f 90       	pop	r0
    3006:	0f 90       	pop	r0
    3008:	cf 91       	pop	r28
    300a:	df 91       	pop	r29
    300c:	08 95       	ret

0000300e <Timer0_CallBack>:

void Timer0_CallBack(void (*GPT0_Ptr)(void))
{
    300e:	df 93       	push	r29
    3010:	cf 93       	push	r28
    3012:	00 d0       	rcall	.+0      	; 0x3014 <Timer0_CallBack+0x6>
    3014:	cd b7       	in	r28, 0x3d	; 61
    3016:	de b7       	in	r29, 0x3e	; 62
    3018:	9a 83       	std	Y+2, r25	; 0x02
    301a:	89 83       	std	Y+1, r24	; 0x01
	if(GPT0_Ptr==Null_ptr)
    301c:	89 81       	ldd	r24, Y+1	; 0x01
    301e:	9a 81       	ldd	r25, Y+2	; 0x02
    3020:	00 97       	sbiw	r24, 0x00	; 0
    3022:	31 f0       	breq	.+12     	; 0x3030 <Timer0_CallBack+0x22>
	{
		//do nothing
	}
	else
	{
		G_Call_1=GPT0_Ptr;
    3024:	89 81       	ldd	r24, Y+1	; 0x01
    3026:	9a 81       	ldd	r25, Y+2	; 0x02
    3028:	90 93 f5 01 	sts	0x01F5, r25
    302c:	80 93 f4 01 	sts	0x01F4, r24
	}
}
    3030:	0f 90       	pop	r0
    3032:	0f 90       	pop	r0
    3034:	cf 91       	pop	r28
    3036:	df 91       	pop	r29
    3038:	08 95       	ret

0000303a <Timer1_CallBack>:
void Timer1_CallBack(void (*GPT1_Ptr)(void))
{
    303a:	df 93       	push	r29
    303c:	cf 93       	push	r28
    303e:	00 d0       	rcall	.+0      	; 0x3040 <Timer1_CallBack+0x6>
    3040:	cd b7       	in	r28, 0x3d	; 61
    3042:	de b7       	in	r29, 0x3e	; 62
    3044:	9a 83       	std	Y+2, r25	; 0x02
    3046:	89 83       	std	Y+1, r24	; 0x01
	if(GPT1_Ptr==Null_ptr)
    3048:	89 81       	ldd	r24, Y+1	; 0x01
    304a:	9a 81       	ldd	r25, Y+2	; 0x02
    304c:	00 97       	sbiw	r24, 0x00	; 0
    304e:	31 f0       	breq	.+12     	; 0x305c <Timer1_CallBack+0x22>
	{
		//do nothing
	}
	else
	{
		G_Call_2=GPT1_Ptr;
    3050:	89 81       	ldd	r24, Y+1	; 0x01
    3052:	9a 81       	ldd	r25, Y+2	; 0x02
    3054:	90 93 f7 01 	sts	0x01F7, r25
    3058:	80 93 f6 01 	sts	0x01F6, r24
	}
}
    305c:	0f 90       	pop	r0
    305e:	0f 90       	pop	r0
    3060:	cf 91       	pop	r28
    3062:	df 91       	pop	r29
    3064:	08 95       	ret

00003066 <Timer2_CallBack>:
void Timer2_CallBack(void (*GPT2_Ptr)(void))
{
    3066:	df 93       	push	r29
    3068:	cf 93       	push	r28
    306a:	00 d0       	rcall	.+0      	; 0x306c <Timer2_CallBack+0x6>
    306c:	cd b7       	in	r28, 0x3d	; 61
    306e:	de b7       	in	r29, 0x3e	; 62
    3070:	9a 83       	std	Y+2, r25	; 0x02
    3072:	89 83       	std	Y+1, r24	; 0x01
	if(GPT2_Ptr==Null_ptr)
    3074:	89 81       	ldd	r24, Y+1	; 0x01
    3076:	9a 81       	ldd	r25, Y+2	; 0x02
    3078:	00 97       	sbiw	r24, 0x00	; 0
    307a:	31 f0       	breq	.+12     	; 0x3088 <Timer2_CallBack+0x22>
	{
		//do nothing
	}
	else
	{
		G_Call_3=GPT2_Ptr;
    307c:	89 81       	ldd	r24, Y+1	; 0x01
    307e:	9a 81       	ldd	r25, Y+2	; 0x02
    3080:	90 93 f9 01 	sts	0x01F9, r25
    3084:	80 93 f8 01 	sts	0x01F8, r24
	}
}
    3088:	0f 90       	pop	r0
    308a:	0f 90       	pop	r0
    308c:	cf 91       	pop	r28
    308e:	df 91       	pop	r29
    3090:	08 95       	ret

00003092 <Timer_Start>:


void Timer_Start(void)
{
    3092:	df 93       	push	r29
    3094:	cf 93       	push	r28
    3096:	cd b7       	in	r28, 0x3d	; 61
    3098:	de b7       	in	r29, 0x3e	; 62
	if(G_ConfigPtr->Timer==Timer0)
    309a:	e0 91 fa 01 	lds	r30, 0x01FA
    309e:	f0 91 fb 01 	lds	r31, 0x01FB
    30a2:	84 81       	ldd	r24, Z+4	; 0x04
    30a4:	88 23       	and	r24, r24
    30a6:	d9 f4       	brne	.+54     	; 0x30de <Timer_Start+0x4c>
	{
		TCNT0=G_ConfigPtr->preload;
    30a8:	a2 e5       	ldi	r26, 0x52	; 82
    30aa:	b0 e0       	ldi	r27, 0x00	; 0
    30ac:	e0 91 fa 01 	lds	r30, 0x01FA
    30b0:	f0 91 fb 01 	lds	r31, 0x01FB
    30b4:	80 81       	ld	r24, Z
    30b6:	91 81       	ldd	r25, Z+1	; 0x01
    30b8:	8c 93       	st	X, r24
		OCR0=G_ConfigPtr->Compare_value;
    30ba:	ac e5       	ldi	r26, 0x5C	; 92
    30bc:	b0 e0       	ldi	r27, 0x00	; 0
    30be:	e0 91 fa 01 	lds	r30, 0x01FA
    30c2:	f0 91 fb 01 	lds	r31, 0x01FB
    30c6:	82 81       	ldd	r24, Z+2	; 0x02
    30c8:	93 81       	ldd	r25, Z+3	; 0x03
    30ca:	8c 93       	st	X, r24
		TCCR0 =(TCCR0 & 0xF8) | (TIMER_PRESCALER & 0x07);
    30cc:	a3 e5       	ldi	r26, 0x53	; 83
    30ce:	b0 e0       	ldi	r27, 0x00	; 0
    30d0:	e3 e5       	ldi	r30, 0x53	; 83
    30d2:	f0 e0       	ldi	r31, 0x00	; 0
    30d4:	80 81       	ld	r24, Z
    30d6:	88 7f       	andi	r24, 0xF8	; 248
    30d8:	85 60       	ori	r24, 0x05	; 5
    30da:	8c 93       	st	X, r24
    30dc:	47 c0       	rjmp	.+142    	; 0x316c <Timer_Start+0xda>
	}
	else if(G_ConfigPtr->Timer==Timer1)
    30de:	e0 91 fa 01 	lds	r30, 0x01FA
    30e2:	f0 91 fb 01 	lds	r31, 0x01FB
    30e6:	84 81       	ldd	r24, Z+4	; 0x04
    30e8:	81 30       	cpi	r24, 0x01	; 1
    30ea:	f9 f4       	brne	.+62     	; 0x312a <Timer_Start+0x98>
	{
		TCNT1=G_ConfigPtr->preload;
    30ec:	ac e4       	ldi	r26, 0x4C	; 76
    30ee:	b0 e0       	ldi	r27, 0x00	; 0
    30f0:	e0 91 fa 01 	lds	r30, 0x01FA
    30f4:	f0 91 fb 01 	lds	r31, 0x01FB
    30f8:	80 81       	ld	r24, Z
    30fa:	91 81       	ldd	r25, Z+1	; 0x01
    30fc:	11 96       	adiw	r26, 0x01	; 1
    30fe:	9c 93       	st	X, r25
    3100:	8e 93       	st	-X, r24
		OCR1A=G_ConfigPtr->Compare_value;
    3102:	aa e4       	ldi	r26, 0x4A	; 74
    3104:	b0 e0       	ldi	r27, 0x00	; 0
    3106:	e0 91 fa 01 	lds	r30, 0x01FA
    310a:	f0 91 fb 01 	lds	r31, 0x01FB
    310e:	82 81       	ldd	r24, Z+2	; 0x02
    3110:	93 81       	ldd	r25, Z+3	; 0x03
    3112:	11 96       	adiw	r26, 0x01	; 1
    3114:	9c 93       	st	X, r25
    3116:	8e 93       	st	-X, r24
		TCCR1B=(TCCR1B & 0xF8) | (TIMER_PRESCALER & 0x07);
    3118:	ae e4       	ldi	r26, 0x4E	; 78
    311a:	b0 e0       	ldi	r27, 0x00	; 0
    311c:	ee e4       	ldi	r30, 0x4E	; 78
    311e:	f0 e0       	ldi	r31, 0x00	; 0
    3120:	80 81       	ld	r24, Z
    3122:	88 7f       	andi	r24, 0xF8	; 248
    3124:	85 60       	ori	r24, 0x05	; 5
    3126:	8c 93       	st	X, r24
    3128:	21 c0       	rjmp	.+66     	; 0x316c <Timer_Start+0xda>


	}
	else if(G_ConfigPtr->Timer==Timer2)
    312a:	e0 91 fa 01 	lds	r30, 0x01FA
    312e:	f0 91 fb 01 	lds	r31, 0x01FB
    3132:	84 81       	ldd	r24, Z+4	; 0x04
    3134:	82 30       	cpi	r24, 0x02	; 2
    3136:	d1 f4       	brne	.+52     	; 0x316c <Timer_Start+0xda>
	{
		TCNT2=G_ConfigPtr->preload;
    3138:	a4 e4       	ldi	r26, 0x44	; 68
    313a:	b0 e0       	ldi	r27, 0x00	; 0
    313c:	e0 91 fa 01 	lds	r30, 0x01FA
    3140:	f0 91 fb 01 	lds	r31, 0x01FB
    3144:	80 81       	ld	r24, Z
    3146:	91 81       	ldd	r25, Z+1	; 0x01
    3148:	8c 93       	st	X, r24
		OCR2=G_ConfigPtr->Compare_value;
    314a:	a3 e4       	ldi	r26, 0x43	; 67
    314c:	b0 e0       	ldi	r27, 0x00	; 0
    314e:	e0 91 fa 01 	lds	r30, 0x01FA
    3152:	f0 91 fb 01 	lds	r31, 0x01FB
    3156:	82 81       	ldd	r24, Z+2	; 0x02
    3158:	93 81       	ldd	r25, Z+3	; 0x03
    315a:	8c 93       	st	X, r24
		TCCR2 =(TCCR2 & 0xF8) | (TIMER_PRESCALER & 0x07);
    315c:	a5 e4       	ldi	r26, 0x45	; 69
    315e:	b0 e0       	ldi	r27, 0x00	; 0
    3160:	e5 e4       	ldi	r30, 0x45	; 69
    3162:	f0 e0       	ldi	r31, 0x00	; 0
    3164:	80 81       	ld	r24, Z
    3166:	88 7f       	andi	r24, 0xF8	; 248
    3168:	85 60       	ori	r24, 0x05	; 5
    316a:	8c 93       	st	X, r24

	}
}
    316c:	cf 91       	pop	r28
    316e:	df 91       	pop	r29
    3170:	08 95       	ret

00003172 <__vector_4>:
extern void (*G_Call_3)(void);


void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
    3172:	1f 92       	push	r1
    3174:	0f 92       	push	r0
    3176:	0f b6       	in	r0, 0x3f	; 63
    3178:	0f 92       	push	r0
    317a:	11 24       	eor	r1, r1
    317c:	2f 93       	push	r18
    317e:	3f 93       	push	r19
    3180:	4f 93       	push	r20
    3182:	5f 93       	push	r21
    3184:	6f 93       	push	r22
    3186:	7f 93       	push	r23
    3188:	8f 93       	push	r24
    318a:	9f 93       	push	r25
    318c:	af 93       	push	r26
    318e:	bf 93       	push	r27
    3190:	ef 93       	push	r30
    3192:	ff 93       	push	r31
    3194:	df 93       	push	r29
    3196:	cf 93       	push	r28
    3198:	cd b7       	in	r28, 0x3d	; 61
    319a:	de b7       	in	r29, 0x3e	; 62
	(*G_Call_3)();
    319c:	e0 91 f8 01 	lds	r30, 0x01F8
    31a0:	f0 91 f9 01 	lds	r31, 0x01F9
    31a4:	09 95       	icall
}
    31a6:	cf 91       	pop	r28
    31a8:	df 91       	pop	r29
    31aa:	ff 91       	pop	r31
    31ac:	ef 91       	pop	r30
    31ae:	bf 91       	pop	r27
    31b0:	af 91       	pop	r26
    31b2:	9f 91       	pop	r25
    31b4:	8f 91       	pop	r24
    31b6:	7f 91       	pop	r23
    31b8:	6f 91       	pop	r22
    31ba:	5f 91       	pop	r21
    31bc:	4f 91       	pop	r20
    31be:	3f 91       	pop	r19
    31c0:	2f 91       	pop	r18
    31c2:	0f 90       	pop	r0
    31c4:	0f be       	out	0x3f, r0	; 63
    31c6:	0f 90       	pop	r0
    31c8:	1f 90       	pop	r1
    31ca:	18 95       	reti

000031cc <__vector_5>:

void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
    31cc:	1f 92       	push	r1
    31ce:	0f 92       	push	r0
    31d0:	0f b6       	in	r0, 0x3f	; 63
    31d2:	0f 92       	push	r0
    31d4:	11 24       	eor	r1, r1
    31d6:	2f 93       	push	r18
    31d8:	3f 93       	push	r19
    31da:	4f 93       	push	r20
    31dc:	5f 93       	push	r21
    31de:	6f 93       	push	r22
    31e0:	7f 93       	push	r23
    31e2:	8f 93       	push	r24
    31e4:	9f 93       	push	r25
    31e6:	af 93       	push	r26
    31e8:	bf 93       	push	r27
    31ea:	ef 93       	push	r30
    31ec:	ff 93       	push	r31
    31ee:	df 93       	push	r29
    31f0:	cf 93       	push	r28
    31f2:	cd b7       	in	r28, 0x3d	; 61
    31f4:	de b7       	in	r29, 0x3e	; 62
	(*G_Call_3)();
    31f6:	e0 91 f8 01 	lds	r30, 0x01F8
    31fa:	f0 91 f9 01 	lds	r31, 0x01F9
    31fe:	09 95       	icall
}
    3200:	cf 91       	pop	r28
    3202:	df 91       	pop	r29
    3204:	ff 91       	pop	r31
    3206:	ef 91       	pop	r30
    3208:	bf 91       	pop	r27
    320a:	af 91       	pop	r26
    320c:	9f 91       	pop	r25
    320e:	8f 91       	pop	r24
    3210:	7f 91       	pop	r23
    3212:	6f 91       	pop	r22
    3214:	5f 91       	pop	r21
    3216:	4f 91       	pop	r20
    3218:	3f 91       	pop	r19
    321a:	2f 91       	pop	r18
    321c:	0f 90       	pop	r0
    321e:	0f be       	out	0x3f, r0	; 63
    3220:	0f 90       	pop	r0
    3222:	1f 90       	pop	r1
    3224:	18 95       	reti

00003226 <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
    3226:	1f 92       	push	r1
    3228:	0f 92       	push	r0
    322a:	0f b6       	in	r0, 0x3f	; 63
    322c:	0f 92       	push	r0
    322e:	11 24       	eor	r1, r1
    3230:	2f 93       	push	r18
    3232:	3f 93       	push	r19
    3234:	4f 93       	push	r20
    3236:	5f 93       	push	r21
    3238:	6f 93       	push	r22
    323a:	7f 93       	push	r23
    323c:	8f 93       	push	r24
    323e:	9f 93       	push	r25
    3240:	af 93       	push	r26
    3242:	bf 93       	push	r27
    3244:	ef 93       	push	r30
    3246:	ff 93       	push	r31
    3248:	df 93       	push	r29
    324a:	cf 93       	push	r28
    324c:	cd b7       	in	r28, 0x3d	; 61
    324e:	de b7       	in	r29, 0x3e	; 62
	(*G_Call_2)();
    3250:	e0 91 f6 01 	lds	r30, 0x01F6
    3254:	f0 91 f7 01 	lds	r31, 0x01F7
    3258:	09 95       	icall
}
    325a:	cf 91       	pop	r28
    325c:	df 91       	pop	r29
    325e:	ff 91       	pop	r31
    3260:	ef 91       	pop	r30
    3262:	bf 91       	pop	r27
    3264:	af 91       	pop	r26
    3266:	9f 91       	pop	r25
    3268:	8f 91       	pop	r24
    326a:	7f 91       	pop	r23
    326c:	6f 91       	pop	r22
    326e:	5f 91       	pop	r21
    3270:	4f 91       	pop	r20
    3272:	3f 91       	pop	r19
    3274:	2f 91       	pop	r18
    3276:	0f 90       	pop	r0
    3278:	0f be       	out	0x3f, r0	; 63
    327a:	0f 90       	pop	r0
    327c:	1f 90       	pop	r1
    327e:	18 95       	reti

00003280 <__vector_9>:
void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
    3280:	1f 92       	push	r1
    3282:	0f 92       	push	r0
    3284:	0f b6       	in	r0, 0x3f	; 63
    3286:	0f 92       	push	r0
    3288:	11 24       	eor	r1, r1
    328a:	2f 93       	push	r18
    328c:	3f 93       	push	r19
    328e:	4f 93       	push	r20
    3290:	5f 93       	push	r21
    3292:	6f 93       	push	r22
    3294:	7f 93       	push	r23
    3296:	8f 93       	push	r24
    3298:	9f 93       	push	r25
    329a:	af 93       	push	r26
    329c:	bf 93       	push	r27
    329e:	ef 93       	push	r30
    32a0:	ff 93       	push	r31
    32a2:	df 93       	push	r29
    32a4:	cf 93       	push	r28
    32a6:	cd b7       	in	r28, 0x3d	; 61
    32a8:	de b7       	in	r29, 0x3e	; 62
	(*G_Call_2)();
    32aa:	e0 91 f6 01 	lds	r30, 0x01F6
    32ae:	f0 91 f7 01 	lds	r31, 0x01F7
    32b2:	09 95       	icall
}
    32b4:	cf 91       	pop	r28
    32b6:	df 91       	pop	r29
    32b8:	ff 91       	pop	r31
    32ba:	ef 91       	pop	r30
    32bc:	bf 91       	pop	r27
    32be:	af 91       	pop	r26
    32c0:	9f 91       	pop	r25
    32c2:	8f 91       	pop	r24
    32c4:	7f 91       	pop	r23
    32c6:	6f 91       	pop	r22
    32c8:	5f 91       	pop	r21
    32ca:	4f 91       	pop	r20
    32cc:	3f 91       	pop	r19
    32ce:	2f 91       	pop	r18
    32d0:	0f 90       	pop	r0
    32d2:	0f be       	out	0x3f, r0	; 63
    32d4:	0f 90       	pop	r0
    32d6:	1f 90       	pop	r1
    32d8:	18 95       	reti

000032da <__vector_10>:
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    32da:	1f 92       	push	r1
    32dc:	0f 92       	push	r0
    32de:	0f b6       	in	r0, 0x3f	; 63
    32e0:	0f 92       	push	r0
    32e2:	11 24       	eor	r1, r1
    32e4:	2f 93       	push	r18
    32e6:	3f 93       	push	r19
    32e8:	4f 93       	push	r20
    32ea:	5f 93       	push	r21
    32ec:	6f 93       	push	r22
    32ee:	7f 93       	push	r23
    32f0:	8f 93       	push	r24
    32f2:	9f 93       	push	r25
    32f4:	af 93       	push	r26
    32f6:	bf 93       	push	r27
    32f8:	ef 93       	push	r30
    32fa:	ff 93       	push	r31
    32fc:	df 93       	push	r29
    32fe:	cf 93       	push	r28
    3300:	cd b7       	in	r28, 0x3d	; 61
    3302:	de b7       	in	r29, 0x3e	; 62
	(*G_Call_1)();
    3304:	e0 91 f4 01 	lds	r30, 0x01F4
    3308:	f0 91 f5 01 	lds	r31, 0x01F5
    330c:	09 95       	icall
}
    330e:	cf 91       	pop	r28
    3310:	df 91       	pop	r29
    3312:	ff 91       	pop	r31
    3314:	ef 91       	pop	r30
    3316:	bf 91       	pop	r27
    3318:	af 91       	pop	r26
    331a:	9f 91       	pop	r25
    331c:	8f 91       	pop	r24
    331e:	7f 91       	pop	r23
    3320:	6f 91       	pop	r22
    3322:	5f 91       	pop	r21
    3324:	4f 91       	pop	r20
    3326:	3f 91       	pop	r19
    3328:	2f 91       	pop	r18
    332a:	0f 90       	pop	r0
    332c:	0f be       	out	0x3f, r0	; 63
    332e:	0f 90       	pop	r0
    3330:	1f 90       	pop	r1
    3332:	18 95       	reti

00003334 <__vector_11>:
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    3334:	1f 92       	push	r1
    3336:	0f 92       	push	r0
    3338:	0f b6       	in	r0, 0x3f	; 63
    333a:	0f 92       	push	r0
    333c:	11 24       	eor	r1, r1
    333e:	2f 93       	push	r18
    3340:	3f 93       	push	r19
    3342:	4f 93       	push	r20
    3344:	5f 93       	push	r21
    3346:	6f 93       	push	r22
    3348:	7f 93       	push	r23
    334a:	8f 93       	push	r24
    334c:	9f 93       	push	r25
    334e:	af 93       	push	r26
    3350:	bf 93       	push	r27
    3352:	ef 93       	push	r30
    3354:	ff 93       	push	r31
    3356:	df 93       	push	r29
    3358:	cf 93       	push	r28
    335a:	cd b7       	in	r28, 0x3d	; 61
    335c:	de b7       	in	r29, 0x3e	; 62
	(*G_Call_1)();
    335e:	e0 91 f4 01 	lds	r30, 0x01F4
    3362:	f0 91 f5 01 	lds	r31, 0x01F5
    3366:	09 95       	icall
}
    3368:	cf 91       	pop	r28
    336a:	df 91       	pop	r29
    336c:	ff 91       	pop	r31
    336e:	ef 91       	pop	r30
    3370:	bf 91       	pop	r27
    3372:	af 91       	pop	r26
    3374:	9f 91       	pop	r25
    3376:	8f 91       	pop	r24
    3378:	7f 91       	pop	r23
    337a:	6f 91       	pop	r22
    337c:	5f 91       	pop	r21
    337e:	4f 91       	pop	r20
    3380:	3f 91       	pop	r19
    3382:	2f 91       	pop	r18
    3384:	0f 90       	pop	r0
    3386:	0f be       	out	0x3f, r0	; 63
    3388:	0f 90       	pop	r0
    338a:	1f 90       	pop	r1
    338c:	18 95       	reti

0000338e <PORT_Init>:
 * Description     : Function responsible for initializing all Pins with initial configurations
 * Parameters(IN)  : None
 * Parameters(OUT) : None
 *******************************************************************************************/
void PORT_Init(void)
{
    338e:	df 93       	push	r29
    3390:	cf 93       	push	r28
    3392:	cd b7       	in	r28, 0x3d	; 61
    3394:	de b7       	in	r29, 0x3e	; 62
#define  PORT_INPUT_FLOATING 0
#define  PORT_INPUT_PULLUP   0


//set the initial direction of all Pins by using ConC function like macro in std_types.h
	DDRA=CONC(PORT_PIN7_CONFIG,PORT_PIN6_CONFIG,PORT_PIN5_CONFIG,PORT_PIN4_CONFIG,PORT_PIN3_CONFIG,PORT_PIN2_CONFIG,PORT_PIN1_CONFIG,PORT_PIN0_CONFIG);
    3396:	ea e3       	ldi	r30, 0x3A	; 58
    3398:	f0 e0       	ldi	r31, 0x00	; 0
    339a:	8f ef       	ldi	r24, 0xFF	; 255
    339c:	80 83       	st	Z, r24
	DDRB=CONC(PORT_PIN15_CONFIG,PORT_PIN14_CONFIG,PORT_PIN13_CONFIG,PORT_PIN12_CONFIG,PORT_PIN11_CONFIG,PORT_PIN10_CONFIG,PORT_PIN9_CONFIG,PORT_PIN8_CONFIG);
    339e:	e7 e3       	ldi	r30, 0x37	; 55
    33a0:	f0 e0       	ldi	r31, 0x00	; 0
    33a2:	8f e0       	ldi	r24, 0x0F	; 15
    33a4:	80 83       	st	Z, r24
	DDRC=CONC(PORT_PIN23_CONFIG,PORT_PIN22_CONFIG,PORT_PIN21_CONFIG,PORT_PIN20_CONFIG,PORT_PIN19_CONFIG,PORT_PIN18_CONFIG,PORT_PIN17_CONFIG,PORT_PIN16_CONFIG);
    33a6:	e4 e3       	ldi	r30, 0x34	; 52
    33a8:	f0 e0       	ldi	r31, 0x00	; 0
    33aa:	8f ef       	ldi	r24, 0xFF	; 255
    33ac:	80 83       	st	Z, r24
	DDRD=CONC(PORT_PIN31_CONFIG,PORT_PIN30_CONFIG,PORT_PIN29_CONFIG,PORT_PIN28_CONFIG,PORT_PIN27_CONFIG,PORT_PIN26_CONFIG,PORT_PIN25_CONFIG,PORT_PIN24_CONFIG);
    33ae:	e1 e3       	ldi	r30, 0x31	; 49
    33b0:	f0 e0       	ldi	r31, 0x00	; 0
    33b2:	8f ef       	ldi	r24, 0xFF	; 255
    33b4:	80 83       	st	Z, r24
#define PORT_INPUT_FLOATING               0
#define PORT_INPUT_PULLUP                 1


//set the initial mode of all Pins by using ConC function like macro in std_types.h
	PORTA=CONC(PORT_PIN7_CONFIG,PORT_PIN6_CONFIG,PORT_PIN5_CONFIG,PORT_PIN4_CONFIG,PORT_PIN3_CONFIG,PORT_PIN2_CONFIG,PORT_PIN1_CONFIG,PORT_PIN0_CONFIG);
    33b6:	eb e3       	ldi	r30, 0x3B	; 59
    33b8:	f0 e0       	ldi	r31, 0x00	; 0
    33ba:	10 82       	st	Z, r1
	PORTB=CONC(PORT_PIN15_CONFIG,PORT_PIN14_CONFIG,PORT_PIN13_CONFIG,PORT_PIN12_CONFIG,PORT_PIN11_CONFIG,PORT_PIN10_CONFIG,PORT_PIN9_CONFIG,PORT_PIN8_CONFIG);
    33bc:	e8 e3       	ldi	r30, 0x38	; 56
    33be:	f0 e0       	ldi	r31, 0x00	; 0
    33c0:	8f ef       	ldi	r24, 0xFF	; 255
    33c2:	80 83       	st	Z, r24
	PORTC=CONC(PORT_PIN23_CONFIG,PORT_PIN22_CONFIG,PORT_PIN21_CONFIG,PORT_PIN20_CONFIG,PORT_PIN19_CONFIG,PORT_PIN18_CONFIG,PORT_PIN17_CONFIG,PORT_PIN16_CONFIG);
    33c4:	e5 e3       	ldi	r30, 0x35	; 53
    33c6:	f0 e0       	ldi	r31, 0x00	; 0
    33c8:	10 82       	st	Z, r1
	PORTD=CONC(PORT_PIN31_CONFIG,PORT_PIN30_CONFIG,PORT_PIN29_CONFIG,PORT_PIN28_CONFIG,PORT_PIN27_CONFIG,PORT_PIN26_CONFIG,PORT_PIN25_CONFIG,PORT_PIN24_CONFIG);
    33ca:	e2 e3       	ldi	r30, 0x32	; 50
    33cc:	f0 e0       	ldi	r31, 0x00	; 0
    33ce:	10 82       	st	Z, r1

#define PORT_OUTPUT_HIGH                  2
#define PORT_OUTPUT_LOW			          3
#define PORT_INPUT_FLOATING               4
#define PORT_INPUT_PULLUP                 5
}
    33d0:	cf 91       	pop	r28
    33d2:	df 91       	pop	r29
    33d4:	08 95       	ret

000033d6 <PORT_enuSetPinMode>:
 * Parameters(IN)  : 1.Copy_u8PinId   --> channel Number
 *                   2.Copy_u8PinMode --> Mode
 * Parameters(OUT) : value of enum type PORT_tenuLOC_u8ErrorStatus
 *******************************************************************************************/
PORT_tenuErrorStatus PORT_enuSetPinMode(PortPinType Copy_u8PinId,PortPinType Copy_u8PinMode  )
{
    33d6:	df 93       	push	r29
    33d8:	cf 93       	push	r28
    33da:	cd b7       	in	r28, 0x3d	; 61
    33dc:	de b7       	in	r29, 0x3e	; 62
    33de:	2f 97       	sbiw	r28, 0x0f	; 15
    33e0:	0f b6       	in	r0, 0x3f	; 63
    33e2:	f8 94       	cli
    33e4:	de bf       	out	0x3e, r29	; 62
    33e6:	0f be       	out	0x3f, r0	; 63
    33e8:	cd bf       	out	0x3d, r28	; 61
    33ea:	8c 83       	std	Y+4, r24	; 0x04
    33ec:	6d 83       	std	Y+5, r22	; 0x05
	//local variable for Error status
	uint8 LOC_u8ErrorStatus=PORT_enuOK;
    33ee:	1b 82       	std	Y+3, r1	; 0x03
	//local variables for port and pin indexes
	uint8 PortIndex=0,PinIndex=0;
    33f0:	1a 82       	std	Y+2, r1	; 0x02
    33f2:	19 82       	std	Y+1, r1	; 0x01

	//get the port index from the pin id
	PortIndex=(Copy_u8PinId/8);
    33f4:	8c 81       	ldd	r24, Y+4	; 0x04
    33f6:	86 95       	lsr	r24
    33f8:	86 95       	lsr	r24
    33fa:	86 95       	lsr	r24
    33fc:	8a 83       	std	Y+2, r24	; 0x02

	//get the pin index from the pin id ---pin index 0---7
	PinIndex=Copy_u8PinId%8;
    33fe:	8c 81       	ldd	r24, Y+4	; 0x04
    3400:	87 70       	andi	r24, 0x07	; 7
    3402:	89 83       	std	Y+1, r24	; 0x01

	//check if pin id invalid
	if(Copy_u8PinId>PORT_NUMBER_OF_PINS)
    3404:	8c 81       	ldd	r24, Y+4	; 0x04
    3406:	81 32       	cpi	r24, 0x21	; 33
    3408:	10 f0       	brcs	.+4      	; 0x340e <PORT_enuSetPinMode+0x38>
	{
		LOC_u8ErrorStatus=PORT_enuPinError;
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	8b 83       	std	Y+3, r24	; 0x03
	}

	//check if port id invalid
	if(PortIndex>PORT_NUMBER_OF_PORTS)
    340e:	8a 81       	ldd	r24, Y+2	; 0x02
    3410:	85 30       	cpi	r24, 0x05	; 5
    3412:	10 f0       	brcs	.+4      	; 0x3418 <PORT_enuSetPinMode+0x42>
	{
		LOC_u8ErrorStatus=PORT_enuPortError;
    3414:	82 e0       	ldi	r24, 0x02	; 2
    3416:	8b 83       	std	Y+3, r24	; 0x03
	}

	//check if the mode invalid
	if(Copy_u8PinMode>5 ||Copy_u8PinMode<2)
    3418:	8d 81       	ldd	r24, Y+5	; 0x05
    341a:	86 30       	cpi	r24, 0x06	; 6
    341c:	18 f4       	brcc	.+6      	; 0x3424 <PORT_enuSetPinMode+0x4e>
    341e:	8d 81       	ldd	r24, Y+5	; 0x05
    3420:	82 30       	cpi	r24, 0x02	; 2
    3422:	10 f4       	brcc	.+4      	; 0x3428 <PORT_enuSetPinMode+0x52>
	{
		LOC_u8ErrorStatus=PORT_enuModeError;
    3424:	83 e0       	ldi	r24, 0x03	; 3
    3426:	8b 83       	std	Y+3, r24	; 0x03

	}

	//which Port
	switch(PortIndex)
    3428:	8a 81       	ldd	r24, Y+2	; 0x02
    342a:	28 2f       	mov	r18, r24
    342c:	30 e0       	ldi	r19, 0x00	; 0
    342e:	3f 87       	std	Y+15, r19	; 0x0f
    3430:	2e 87       	std	Y+14, r18	; 0x0e
    3432:	8e 85       	ldd	r24, Y+14	; 0x0e
    3434:	9f 85       	ldd	r25, Y+15	; 0x0f
    3436:	81 30       	cpi	r24, 0x01	; 1
    3438:	91 05       	cpc	r25, r1
    343a:	09 f4       	brne	.+2      	; 0x343e <PORT_enuSetPinMode+0x68>
    343c:	d6 c0       	rjmp	.+428    	; 0x35ea <PORT_enuSetPinMode+0x214>
    343e:	2e 85       	ldd	r18, Y+14	; 0x0e
    3440:	3f 85       	ldd	r19, Y+15	; 0x0f
    3442:	22 30       	cpi	r18, 0x02	; 2
    3444:	31 05       	cpc	r19, r1
    3446:	2c f4       	brge	.+10     	; 0x3452 <PORT_enuSetPinMode+0x7c>
    3448:	8e 85       	ldd	r24, Y+14	; 0x0e
    344a:	9f 85       	ldd	r25, Y+15	; 0x0f
    344c:	00 97       	sbiw	r24, 0x00	; 0
    344e:	71 f0       	breq	.+28     	; 0x346c <PORT_enuSetPinMode+0x96>
    3450:	08 c3       	rjmp	.+1552   	; 0x3a62 <PORT_enuSetPinMode+0x68c>
    3452:	2e 85       	ldd	r18, Y+14	; 0x0e
    3454:	3f 85       	ldd	r19, Y+15	; 0x0f
    3456:	22 30       	cpi	r18, 0x02	; 2
    3458:	31 05       	cpc	r19, r1
    345a:	09 f4       	brne	.+2      	; 0x345e <PORT_enuSetPinMode+0x88>
    345c:	85 c1       	rjmp	.+778    	; 0x3768 <PORT_enuSetPinMode+0x392>
    345e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3460:	9f 85       	ldd	r25, Y+15	; 0x0f
    3462:	83 30       	cpi	r24, 0x03	; 3
    3464:	91 05       	cpc	r25, r1
    3466:	09 f4       	brne	.+2      	; 0x346a <PORT_enuSetPinMode+0x94>
    3468:	3e c2       	rjmp	.+1148   	; 0x38e6 <PORT_enuSetPinMode+0x510>
    346a:	fb c2       	rjmp	.+1526   	; 0x3a62 <PORT_enuSetPinMode+0x68c>
	{
	//if Port A
	case PORT_A:
		//which mode ---PORT_OUTPUT_HIGH---PORT_OUTPUT_LOW----PORT_INPUT_FLOATING----PORT_INPUT_PULLUP
		switch(Copy_u8PinMode)
    346c:	8d 81       	ldd	r24, Y+5	; 0x05
    346e:	28 2f       	mov	r18, r24
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	3d 87       	std	Y+13, r19	; 0x0d
    3474:	2c 87       	std	Y+12, r18	; 0x0c
    3476:	8c 85       	ldd	r24, Y+12	; 0x0c
    3478:	9d 85       	ldd	r25, Y+13	; 0x0d
    347a:	83 30       	cpi	r24, 0x03	; 3
    347c:	91 05       	cpc	r25, r1
    347e:	09 f4       	brne	.+2      	; 0x3482 <PORT_enuSetPinMode+0xac>
    3480:	3e c0       	rjmp	.+124    	; 0x34fe <PORT_enuSetPinMode+0x128>
    3482:	2c 85       	ldd	r18, Y+12	; 0x0c
    3484:	3d 85       	ldd	r19, Y+13	; 0x0d
    3486:	24 30       	cpi	r18, 0x04	; 4
    3488:	31 05       	cpc	r19, r1
    348a:	34 f4       	brge	.+12     	; 0x3498 <PORT_enuSetPinMode+0xc2>
    348c:	8c 85       	ldd	r24, Y+12	; 0x0c
    348e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3490:	82 30       	cpi	r24, 0x02	; 2
    3492:	91 05       	cpc	r25, r1
    3494:	71 f0       	breq	.+28     	; 0x34b2 <PORT_enuSetPinMode+0xdc>
    3496:	e5 c2       	rjmp	.+1482   	; 0x3a62 <PORT_enuSetPinMode+0x68c>
    3498:	2c 85       	ldd	r18, Y+12	; 0x0c
    349a:	3d 85       	ldd	r19, Y+13	; 0x0d
    349c:	24 30       	cpi	r18, 0x04	; 4
    349e:	31 05       	cpc	r19, r1
    34a0:	09 f4       	brne	.+2      	; 0x34a4 <PORT_enuSetPinMode+0xce>
    34a2:	54 c0       	rjmp	.+168    	; 0x354c <PORT_enuSetPinMode+0x176>
    34a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    34a6:	9d 85       	ldd	r25, Y+13	; 0x0d
    34a8:	85 30       	cpi	r24, 0x05	; 5
    34aa:	91 05       	cpc	r25, r1
    34ac:	09 f4       	brne	.+2      	; 0x34b0 <PORT_enuSetPinMode+0xda>
    34ae:	76 c0       	rjmp	.+236    	; 0x359c <PORT_enuSetPinMode+0x1c6>
    34b0:	d8 c2       	rjmp	.+1456   	; 0x3a62 <PORT_enuSetPinMode+0x68c>
		{

		case PORT_OUTPUT_HIGH:
			//set output direction
			SET_BIT(DDRA,PinIndex);
    34b2:	aa e3       	ldi	r26, 0x3A	; 58
    34b4:	b0 e0       	ldi	r27, 0x00	; 0
    34b6:	ea e3       	ldi	r30, 0x3A	; 58
    34b8:	f0 e0       	ldi	r31, 0x00	; 0
    34ba:	80 81       	ld	r24, Z
    34bc:	48 2f       	mov	r20, r24
    34be:	89 81       	ldd	r24, Y+1	; 0x01
    34c0:	28 2f       	mov	r18, r24
    34c2:	30 e0       	ldi	r19, 0x00	; 0
    34c4:	81 e0       	ldi	r24, 0x01	; 1
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	02 c0       	rjmp	.+4      	; 0x34ce <PORT_enuSetPinMode+0xf8>
    34ca:	88 0f       	add	r24, r24
    34cc:	99 1f       	adc	r25, r25
    34ce:	2a 95       	dec	r18
    34d0:	e2 f7       	brpl	.-8      	; 0x34ca <PORT_enuSetPinMode+0xf4>
    34d2:	84 2b       	or	r24, r20
    34d4:	8c 93       	st	X, r24
			//set high value
			SET_BIT(PORTA,PinIndex);
    34d6:	ab e3       	ldi	r26, 0x3B	; 59
    34d8:	b0 e0       	ldi	r27, 0x00	; 0
    34da:	eb e3       	ldi	r30, 0x3B	; 59
    34dc:	f0 e0       	ldi	r31, 0x00	; 0
    34de:	80 81       	ld	r24, Z
    34e0:	48 2f       	mov	r20, r24
    34e2:	89 81       	ldd	r24, Y+1	; 0x01
    34e4:	28 2f       	mov	r18, r24
    34e6:	30 e0       	ldi	r19, 0x00	; 0
    34e8:	81 e0       	ldi	r24, 0x01	; 1
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	02 2e       	mov	r0, r18
    34ee:	02 c0       	rjmp	.+4      	; 0x34f4 <PORT_enuSetPinMode+0x11e>
    34f0:	88 0f       	add	r24, r24
    34f2:	99 1f       	adc	r25, r25
    34f4:	0a 94       	dec	r0
    34f6:	e2 f7       	brpl	.-8      	; 0x34f0 <PORT_enuSetPinMode+0x11a>
    34f8:	84 2b       	or	r24, r20
    34fa:	8c 93       	st	X, r24
    34fc:	b2 c2       	rjmp	.+1380   	; 0x3a62 <PORT_enuSetPinMode+0x68c>
			break;

		case PORT_OUTPUT_LOW:
			//set output direction
			SET_BIT(DDRA,PinIndex);
    34fe:	aa e3       	ldi	r26, 0x3A	; 58
    3500:	b0 e0       	ldi	r27, 0x00	; 0
    3502:	ea e3       	ldi	r30, 0x3A	; 58
    3504:	f0 e0       	ldi	r31, 0x00	; 0
    3506:	80 81       	ld	r24, Z
    3508:	48 2f       	mov	r20, r24
    350a:	89 81       	ldd	r24, Y+1	; 0x01
    350c:	28 2f       	mov	r18, r24
    350e:	30 e0       	ldi	r19, 0x00	; 0
    3510:	81 e0       	ldi	r24, 0x01	; 1
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	02 c0       	rjmp	.+4      	; 0x351a <PORT_enuSetPinMode+0x144>
    3516:	88 0f       	add	r24, r24
    3518:	99 1f       	adc	r25, r25
    351a:	2a 95       	dec	r18
    351c:	e2 f7       	brpl	.-8      	; 0x3516 <PORT_enuSetPinMode+0x140>
    351e:	84 2b       	or	r24, r20
    3520:	8c 93       	st	X, r24
			//set LOW value
			CLEAR_BIT(PORTA,PinIndex);
    3522:	ab e3       	ldi	r26, 0x3B	; 59
    3524:	b0 e0       	ldi	r27, 0x00	; 0
    3526:	eb e3       	ldi	r30, 0x3B	; 59
    3528:	f0 e0       	ldi	r31, 0x00	; 0
    352a:	80 81       	ld	r24, Z
    352c:	48 2f       	mov	r20, r24
    352e:	89 81       	ldd	r24, Y+1	; 0x01
    3530:	28 2f       	mov	r18, r24
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	81 e0       	ldi	r24, 0x01	; 1
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	02 2e       	mov	r0, r18
    353a:	02 c0       	rjmp	.+4      	; 0x3540 <PORT_enuSetPinMode+0x16a>
    353c:	88 0f       	add	r24, r24
    353e:	99 1f       	adc	r25, r25
    3540:	0a 94       	dec	r0
    3542:	e2 f7       	brpl	.-8      	; 0x353c <PORT_enuSetPinMode+0x166>
    3544:	80 95       	com	r24
    3546:	84 23       	and	r24, r20
    3548:	8c 93       	st	X, r24
    354a:	8b c2       	rjmp	.+1302   	; 0x3a62 <PORT_enuSetPinMode+0x68c>
			break;

		case PORT_INPUT_FLOATING:
			//set input direction
			CLEAR_BIT(DDRA,PinIndex);
    354c:	aa e3       	ldi	r26, 0x3A	; 58
    354e:	b0 e0       	ldi	r27, 0x00	; 0
    3550:	ea e3       	ldi	r30, 0x3A	; 58
    3552:	f0 e0       	ldi	r31, 0x00	; 0
    3554:	80 81       	ld	r24, Z
    3556:	48 2f       	mov	r20, r24
    3558:	89 81       	ldd	r24, Y+1	; 0x01
    355a:	28 2f       	mov	r18, r24
    355c:	30 e0       	ldi	r19, 0x00	; 0
    355e:	81 e0       	ldi	r24, 0x01	; 1
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	02 c0       	rjmp	.+4      	; 0x3568 <PORT_enuSetPinMode+0x192>
    3564:	88 0f       	add	r24, r24
    3566:	99 1f       	adc	r25, r25
    3568:	2a 95       	dec	r18
    356a:	e2 f7       	brpl	.-8      	; 0x3564 <PORT_enuSetPinMode+0x18e>
    356c:	80 95       	com	r24
    356e:	84 23       	and	r24, r20
    3570:	8c 93       	st	X, r24
			//set Low value
			CLEAR_BIT(PORTA,PinIndex);
    3572:	ab e3       	ldi	r26, 0x3B	; 59
    3574:	b0 e0       	ldi	r27, 0x00	; 0
    3576:	eb e3       	ldi	r30, 0x3B	; 59
    3578:	f0 e0       	ldi	r31, 0x00	; 0
    357a:	80 81       	ld	r24, Z
    357c:	48 2f       	mov	r20, r24
    357e:	89 81       	ldd	r24, Y+1	; 0x01
    3580:	28 2f       	mov	r18, r24
    3582:	30 e0       	ldi	r19, 0x00	; 0
    3584:	81 e0       	ldi	r24, 0x01	; 1
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	02 2e       	mov	r0, r18
    358a:	02 c0       	rjmp	.+4      	; 0x3590 <PORT_enuSetPinMode+0x1ba>
    358c:	88 0f       	add	r24, r24
    358e:	99 1f       	adc	r25, r25
    3590:	0a 94       	dec	r0
    3592:	e2 f7       	brpl	.-8      	; 0x358c <PORT_enuSetPinMode+0x1b6>
    3594:	80 95       	com	r24
    3596:	84 23       	and	r24, r20
    3598:	8c 93       	st	X, r24
    359a:	63 c2       	rjmp	.+1222   	; 0x3a62 <PORT_enuSetPinMode+0x68c>
			break;

		case PORT_INPUT_PULLUP:
			//set input direction
			CLEAR_BIT(DDRA,PinIndex);
    359c:	aa e3       	ldi	r26, 0x3A	; 58
    359e:	b0 e0       	ldi	r27, 0x00	; 0
    35a0:	ea e3       	ldi	r30, 0x3A	; 58
    35a2:	f0 e0       	ldi	r31, 0x00	; 0
    35a4:	80 81       	ld	r24, Z
    35a6:	48 2f       	mov	r20, r24
    35a8:	89 81       	ldd	r24, Y+1	; 0x01
    35aa:	28 2f       	mov	r18, r24
    35ac:	30 e0       	ldi	r19, 0x00	; 0
    35ae:	81 e0       	ldi	r24, 0x01	; 1
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	02 c0       	rjmp	.+4      	; 0x35b8 <PORT_enuSetPinMode+0x1e2>
    35b4:	88 0f       	add	r24, r24
    35b6:	99 1f       	adc	r25, r25
    35b8:	2a 95       	dec	r18
    35ba:	e2 f7       	brpl	.-8      	; 0x35b4 <PORT_enuSetPinMode+0x1de>
    35bc:	80 95       	com	r24
    35be:	84 23       	and	r24, r20
    35c0:	8c 93       	st	X, r24
			//set pullup
			SET_BIT(PORTA,PinIndex);
    35c2:	ab e3       	ldi	r26, 0x3B	; 59
    35c4:	b0 e0       	ldi	r27, 0x00	; 0
    35c6:	eb e3       	ldi	r30, 0x3B	; 59
    35c8:	f0 e0       	ldi	r31, 0x00	; 0
    35ca:	80 81       	ld	r24, Z
    35cc:	48 2f       	mov	r20, r24
    35ce:	89 81       	ldd	r24, Y+1	; 0x01
    35d0:	28 2f       	mov	r18, r24
    35d2:	30 e0       	ldi	r19, 0x00	; 0
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	02 2e       	mov	r0, r18
    35da:	02 c0       	rjmp	.+4      	; 0x35e0 <PORT_enuSetPinMode+0x20a>
    35dc:	88 0f       	add	r24, r24
    35de:	99 1f       	adc	r25, r25
    35e0:	0a 94       	dec	r0
    35e2:	e2 f7       	brpl	.-8      	; 0x35dc <PORT_enuSetPinMode+0x206>
    35e4:	84 2b       	or	r24, r20
    35e6:	8c 93       	st	X, r24
    35e8:	3c c2       	rjmp	.+1144   	; 0x3a62 <PORT_enuSetPinMode+0x68c>

		//if port B
		case PORT_B:

			//which mode ---PORT_OUTPUT_HIGH---PORT_OUTPUT_LOW----PORT_INPUT_FLOATING----PORT_INPUT_PULLUP
			switch(Copy_u8PinMode)
    35ea:	8d 81       	ldd	r24, Y+5	; 0x05
    35ec:	28 2f       	mov	r18, r24
    35ee:	30 e0       	ldi	r19, 0x00	; 0
    35f0:	3b 87       	std	Y+11, r19	; 0x0b
    35f2:	2a 87       	std	Y+10, r18	; 0x0a
    35f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    35f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    35f8:	83 30       	cpi	r24, 0x03	; 3
    35fa:	91 05       	cpc	r25, r1
    35fc:	09 f4       	brne	.+2      	; 0x3600 <PORT_enuSetPinMode+0x22a>
    35fe:	3e c0       	rjmp	.+124    	; 0x367c <PORT_enuSetPinMode+0x2a6>
    3600:	2a 85       	ldd	r18, Y+10	; 0x0a
    3602:	3b 85       	ldd	r19, Y+11	; 0x0b
    3604:	24 30       	cpi	r18, 0x04	; 4
    3606:	31 05       	cpc	r19, r1
    3608:	34 f4       	brge	.+12     	; 0x3616 <PORT_enuSetPinMode+0x240>
    360a:	8a 85       	ldd	r24, Y+10	; 0x0a
    360c:	9b 85       	ldd	r25, Y+11	; 0x0b
    360e:	82 30       	cpi	r24, 0x02	; 2
    3610:	91 05       	cpc	r25, r1
    3612:	71 f0       	breq	.+28     	; 0x3630 <PORT_enuSetPinMode+0x25a>
    3614:	26 c2       	rjmp	.+1100   	; 0x3a62 <PORT_enuSetPinMode+0x68c>
    3616:	2a 85       	ldd	r18, Y+10	; 0x0a
    3618:	3b 85       	ldd	r19, Y+11	; 0x0b
    361a:	24 30       	cpi	r18, 0x04	; 4
    361c:	31 05       	cpc	r19, r1
    361e:	09 f4       	brne	.+2      	; 0x3622 <PORT_enuSetPinMode+0x24c>
    3620:	54 c0       	rjmp	.+168    	; 0x36ca <PORT_enuSetPinMode+0x2f4>
    3622:	8a 85       	ldd	r24, Y+10	; 0x0a
    3624:	9b 85       	ldd	r25, Y+11	; 0x0b
    3626:	85 30       	cpi	r24, 0x05	; 5
    3628:	91 05       	cpc	r25, r1
    362a:	09 f4       	brne	.+2      	; 0x362e <PORT_enuSetPinMode+0x258>
    362c:	76 c0       	rjmp	.+236    	; 0x371a <PORT_enuSetPinMode+0x344>
    362e:	19 c2       	rjmp	.+1074   	; 0x3a62 <PORT_enuSetPinMode+0x68c>
			{
			case PORT_OUTPUT_HIGH:
				//set output direction
				SET_BIT(DDRB,PinIndex);
    3630:	a7 e3       	ldi	r26, 0x37	; 55
    3632:	b0 e0       	ldi	r27, 0x00	; 0
    3634:	e7 e3       	ldi	r30, 0x37	; 55
    3636:	f0 e0       	ldi	r31, 0x00	; 0
    3638:	80 81       	ld	r24, Z
    363a:	48 2f       	mov	r20, r24
    363c:	89 81       	ldd	r24, Y+1	; 0x01
    363e:	28 2f       	mov	r18, r24
    3640:	30 e0       	ldi	r19, 0x00	; 0
    3642:	81 e0       	ldi	r24, 0x01	; 1
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	02 c0       	rjmp	.+4      	; 0x364c <PORT_enuSetPinMode+0x276>
    3648:	88 0f       	add	r24, r24
    364a:	99 1f       	adc	r25, r25
    364c:	2a 95       	dec	r18
    364e:	e2 f7       	brpl	.-8      	; 0x3648 <PORT_enuSetPinMode+0x272>
    3650:	84 2b       	or	r24, r20
    3652:	8c 93       	st	X, r24
				SET_BIT(PORTB,PinIndex);
    3654:	a8 e3       	ldi	r26, 0x38	; 56
    3656:	b0 e0       	ldi	r27, 0x00	; 0
    3658:	e8 e3       	ldi	r30, 0x38	; 56
    365a:	f0 e0       	ldi	r31, 0x00	; 0
    365c:	80 81       	ld	r24, Z
    365e:	48 2f       	mov	r20, r24
    3660:	89 81       	ldd	r24, Y+1	; 0x01
    3662:	28 2f       	mov	r18, r24
    3664:	30 e0       	ldi	r19, 0x00	; 0
    3666:	81 e0       	ldi	r24, 0x01	; 1
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	02 2e       	mov	r0, r18
    366c:	02 c0       	rjmp	.+4      	; 0x3672 <PORT_enuSetPinMode+0x29c>
    366e:	88 0f       	add	r24, r24
    3670:	99 1f       	adc	r25, r25
    3672:	0a 94       	dec	r0
    3674:	e2 f7       	brpl	.-8      	; 0x366e <PORT_enuSetPinMode+0x298>
    3676:	84 2b       	or	r24, r20
    3678:	8c 93       	st	X, r24
    367a:	f3 c1       	rjmp	.+998    	; 0x3a62 <PORT_enuSetPinMode+0x68c>
				break;
			case PORT_OUTPUT_LOW:
				SET_BIT(DDRB,PinIndex);
    367c:	a7 e3       	ldi	r26, 0x37	; 55
    367e:	b0 e0       	ldi	r27, 0x00	; 0
    3680:	e7 e3       	ldi	r30, 0x37	; 55
    3682:	f0 e0       	ldi	r31, 0x00	; 0
    3684:	80 81       	ld	r24, Z
    3686:	48 2f       	mov	r20, r24
    3688:	89 81       	ldd	r24, Y+1	; 0x01
    368a:	28 2f       	mov	r18, r24
    368c:	30 e0       	ldi	r19, 0x00	; 0
    368e:	81 e0       	ldi	r24, 0x01	; 1
    3690:	90 e0       	ldi	r25, 0x00	; 0
    3692:	02 c0       	rjmp	.+4      	; 0x3698 <PORT_enuSetPinMode+0x2c2>
    3694:	88 0f       	add	r24, r24
    3696:	99 1f       	adc	r25, r25
    3698:	2a 95       	dec	r18
    369a:	e2 f7       	brpl	.-8      	; 0x3694 <PORT_enuSetPinMode+0x2be>
    369c:	84 2b       	or	r24, r20
    369e:	8c 93       	st	X, r24
				CLEAR_BIT(PORTB,PinIndex);
    36a0:	a8 e3       	ldi	r26, 0x38	; 56
    36a2:	b0 e0       	ldi	r27, 0x00	; 0
    36a4:	e8 e3       	ldi	r30, 0x38	; 56
    36a6:	f0 e0       	ldi	r31, 0x00	; 0
    36a8:	80 81       	ld	r24, Z
    36aa:	48 2f       	mov	r20, r24
    36ac:	89 81       	ldd	r24, Y+1	; 0x01
    36ae:	28 2f       	mov	r18, r24
    36b0:	30 e0       	ldi	r19, 0x00	; 0
    36b2:	81 e0       	ldi	r24, 0x01	; 1
    36b4:	90 e0       	ldi	r25, 0x00	; 0
    36b6:	02 2e       	mov	r0, r18
    36b8:	02 c0       	rjmp	.+4      	; 0x36be <PORT_enuSetPinMode+0x2e8>
    36ba:	88 0f       	add	r24, r24
    36bc:	99 1f       	adc	r25, r25
    36be:	0a 94       	dec	r0
    36c0:	e2 f7       	brpl	.-8      	; 0x36ba <PORT_enuSetPinMode+0x2e4>
    36c2:	80 95       	com	r24
    36c4:	84 23       	and	r24, r20
    36c6:	8c 93       	st	X, r24
    36c8:	cc c1       	rjmp	.+920    	; 0x3a62 <PORT_enuSetPinMode+0x68c>
				break;
			case PORT_INPUT_FLOATING:
				CLEAR_BIT(DDRB,PinIndex);
    36ca:	a7 e3       	ldi	r26, 0x37	; 55
    36cc:	b0 e0       	ldi	r27, 0x00	; 0
    36ce:	e7 e3       	ldi	r30, 0x37	; 55
    36d0:	f0 e0       	ldi	r31, 0x00	; 0
    36d2:	80 81       	ld	r24, Z
    36d4:	48 2f       	mov	r20, r24
    36d6:	89 81       	ldd	r24, Y+1	; 0x01
    36d8:	28 2f       	mov	r18, r24
    36da:	30 e0       	ldi	r19, 0x00	; 0
    36dc:	81 e0       	ldi	r24, 0x01	; 1
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	02 c0       	rjmp	.+4      	; 0x36e6 <PORT_enuSetPinMode+0x310>
    36e2:	88 0f       	add	r24, r24
    36e4:	99 1f       	adc	r25, r25
    36e6:	2a 95       	dec	r18
    36e8:	e2 f7       	brpl	.-8      	; 0x36e2 <PORT_enuSetPinMode+0x30c>
    36ea:	80 95       	com	r24
    36ec:	84 23       	and	r24, r20
    36ee:	8c 93       	st	X, r24
				CLEAR_BIT(PORTB,PinIndex);
    36f0:	a8 e3       	ldi	r26, 0x38	; 56
    36f2:	b0 e0       	ldi	r27, 0x00	; 0
    36f4:	e8 e3       	ldi	r30, 0x38	; 56
    36f6:	f0 e0       	ldi	r31, 0x00	; 0
    36f8:	80 81       	ld	r24, Z
    36fa:	48 2f       	mov	r20, r24
    36fc:	89 81       	ldd	r24, Y+1	; 0x01
    36fe:	28 2f       	mov	r18, r24
    3700:	30 e0       	ldi	r19, 0x00	; 0
    3702:	81 e0       	ldi	r24, 0x01	; 1
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	02 2e       	mov	r0, r18
    3708:	02 c0       	rjmp	.+4      	; 0x370e <PORT_enuSetPinMode+0x338>
    370a:	88 0f       	add	r24, r24
    370c:	99 1f       	adc	r25, r25
    370e:	0a 94       	dec	r0
    3710:	e2 f7       	brpl	.-8      	; 0x370a <PORT_enuSetPinMode+0x334>
    3712:	80 95       	com	r24
    3714:	84 23       	and	r24, r20
    3716:	8c 93       	st	X, r24
    3718:	a4 c1       	rjmp	.+840    	; 0x3a62 <PORT_enuSetPinMode+0x68c>

				break;
			case PORT_INPUT_PULLUP:
				CLEAR_BIT(DDRB,PinIndex);
    371a:	a7 e3       	ldi	r26, 0x37	; 55
    371c:	b0 e0       	ldi	r27, 0x00	; 0
    371e:	e7 e3       	ldi	r30, 0x37	; 55
    3720:	f0 e0       	ldi	r31, 0x00	; 0
    3722:	80 81       	ld	r24, Z
    3724:	48 2f       	mov	r20, r24
    3726:	89 81       	ldd	r24, Y+1	; 0x01
    3728:	28 2f       	mov	r18, r24
    372a:	30 e0       	ldi	r19, 0x00	; 0
    372c:	81 e0       	ldi	r24, 0x01	; 1
    372e:	90 e0       	ldi	r25, 0x00	; 0
    3730:	02 c0       	rjmp	.+4      	; 0x3736 <PORT_enuSetPinMode+0x360>
    3732:	88 0f       	add	r24, r24
    3734:	99 1f       	adc	r25, r25
    3736:	2a 95       	dec	r18
    3738:	e2 f7       	brpl	.-8      	; 0x3732 <PORT_enuSetPinMode+0x35c>
    373a:	80 95       	com	r24
    373c:	84 23       	and	r24, r20
    373e:	8c 93       	st	X, r24
				SET_BIT(PORTB,PinIndex);
    3740:	a8 e3       	ldi	r26, 0x38	; 56
    3742:	b0 e0       	ldi	r27, 0x00	; 0
    3744:	e8 e3       	ldi	r30, 0x38	; 56
    3746:	f0 e0       	ldi	r31, 0x00	; 0
    3748:	80 81       	ld	r24, Z
    374a:	48 2f       	mov	r20, r24
    374c:	89 81       	ldd	r24, Y+1	; 0x01
    374e:	28 2f       	mov	r18, r24
    3750:	30 e0       	ldi	r19, 0x00	; 0
    3752:	81 e0       	ldi	r24, 0x01	; 1
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	02 2e       	mov	r0, r18
    3758:	02 c0       	rjmp	.+4      	; 0x375e <PORT_enuSetPinMode+0x388>
    375a:	88 0f       	add	r24, r24
    375c:	99 1f       	adc	r25, r25
    375e:	0a 94       	dec	r0
    3760:	e2 f7       	brpl	.-8      	; 0x375a <PORT_enuSetPinMode+0x384>
    3762:	84 2b       	or	r24, r20
    3764:	8c 93       	st	X, r24
    3766:	7d c1       	rjmp	.+762    	; 0x3a62 <PORT_enuSetPinMode+0x68c>
			}
			break;

			case PORT_C:
				//which mode ---PORT_OUTPUT_HIGH---PORT_OUTPUT_LOW----PORT_INPUT_FLOATING----PORT_INPUT_PULLUP
				switch(Copy_u8PinMode)
    3768:	8d 81       	ldd	r24, Y+5	; 0x05
    376a:	28 2f       	mov	r18, r24
    376c:	30 e0       	ldi	r19, 0x00	; 0
    376e:	39 87       	std	Y+9, r19	; 0x09
    3770:	28 87       	std	Y+8, r18	; 0x08
    3772:	88 85       	ldd	r24, Y+8	; 0x08
    3774:	99 85       	ldd	r25, Y+9	; 0x09
    3776:	83 30       	cpi	r24, 0x03	; 3
    3778:	91 05       	cpc	r25, r1
    377a:	09 f4       	brne	.+2      	; 0x377e <PORT_enuSetPinMode+0x3a8>
    377c:	3e c0       	rjmp	.+124    	; 0x37fa <PORT_enuSetPinMode+0x424>
    377e:	28 85       	ldd	r18, Y+8	; 0x08
    3780:	39 85       	ldd	r19, Y+9	; 0x09
    3782:	24 30       	cpi	r18, 0x04	; 4
    3784:	31 05       	cpc	r19, r1
    3786:	34 f4       	brge	.+12     	; 0x3794 <PORT_enuSetPinMode+0x3be>
    3788:	88 85       	ldd	r24, Y+8	; 0x08
    378a:	99 85       	ldd	r25, Y+9	; 0x09
    378c:	82 30       	cpi	r24, 0x02	; 2
    378e:	91 05       	cpc	r25, r1
    3790:	71 f0       	breq	.+28     	; 0x37ae <PORT_enuSetPinMode+0x3d8>
    3792:	67 c1       	rjmp	.+718    	; 0x3a62 <PORT_enuSetPinMode+0x68c>
    3794:	28 85       	ldd	r18, Y+8	; 0x08
    3796:	39 85       	ldd	r19, Y+9	; 0x09
    3798:	24 30       	cpi	r18, 0x04	; 4
    379a:	31 05       	cpc	r19, r1
    379c:	09 f4       	brne	.+2      	; 0x37a0 <PORT_enuSetPinMode+0x3ca>
    379e:	54 c0       	rjmp	.+168    	; 0x3848 <PORT_enuSetPinMode+0x472>
    37a0:	88 85       	ldd	r24, Y+8	; 0x08
    37a2:	99 85       	ldd	r25, Y+9	; 0x09
    37a4:	85 30       	cpi	r24, 0x05	; 5
    37a6:	91 05       	cpc	r25, r1
    37a8:	09 f4       	brne	.+2      	; 0x37ac <PORT_enuSetPinMode+0x3d6>
    37aa:	76 c0       	rjmp	.+236    	; 0x3898 <PORT_enuSetPinMode+0x4c2>
    37ac:	5a c1       	rjmp	.+692    	; 0x3a62 <PORT_enuSetPinMode+0x68c>
				{
				case PORT_OUTPUT_HIGH:
					//set output direction
					SET_BIT(DDRC,PinIndex);
    37ae:	a4 e3       	ldi	r26, 0x34	; 52
    37b0:	b0 e0       	ldi	r27, 0x00	; 0
    37b2:	e4 e3       	ldi	r30, 0x34	; 52
    37b4:	f0 e0       	ldi	r31, 0x00	; 0
    37b6:	80 81       	ld	r24, Z
    37b8:	48 2f       	mov	r20, r24
    37ba:	89 81       	ldd	r24, Y+1	; 0x01
    37bc:	28 2f       	mov	r18, r24
    37be:	30 e0       	ldi	r19, 0x00	; 0
    37c0:	81 e0       	ldi	r24, 0x01	; 1
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	02 c0       	rjmp	.+4      	; 0x37ca <PORT_enuSetPinMode+0x3f4>
    37c6:	88 0f       	add	r24, r24
    37c8:	99 1f       	adc	r25, r25
    37ca:	2a 95       	dec	r18
    37cc:	e2 f7       	brpl	.-8      	; 0x37c6 <PORT_enuSetPinMode+0x3f0>
    37ce:	84 2b       	or	r24, r20
    37d0:	8c 93       	st	X, r24
					SET_BIT(PORTC,PinIndex);
    37d2:	a5 e3       	ldi	r26, 0x35	; 53
    37d4:	b0 e0       	ldi	r27, 0x00	; 0
    37d6:	e5 e3       	ldi	r30, 0x35	; 53
    37d8:	f0 e0       	ldi	r31, 0x00	; 0
    37da:	80 81       	ld	r24, Z
    37dc:	48 2f       	mov	r20, r24
    37de:	89 81       	ldd	r24, Y+1	; 0x01
    37e0:	28 2f       	mov	r18, r24
    37e2:	30 e0       	ldi	r19, 0x00	; 0
    37e4:	81 e0       	ldi	r24, 0x01	; 1
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	02 2e       	mov	r0, r18
    37ea:	02 c0       	rjmp	.+4      	; 0x37f0 <PORT_enuSetPinMode+0x41a>
    37ec:	88 0f       	add	r24, r24
    37ee:	99 1f       	adc	r25, r25
    37f0:	0a 94       	dec	r0
    37f2:	e2 f7       	brpl	.-8      	; 0x37ec <PORT_enuSetPinMode+0x416>
    37f4:	84 2b       	or	r24, r20
    37f6:	8c 93       	st	X, r24
    37f8:	34 c1       	rjmp	.+616    	; 0x3a62 <PORT_enuSetPinMode+0x68c>
					break;
				case PORT_OUTPUT_LOW:
					SET_BIT(DDRC,PinIndex);
    37fa:	a4 e3       	ldi	r26, 0x34	; 52
    37fc:	b0 e0       	ldi	r27, 0x00	; 0
    37fe:	e4 e3       	ldi	r30, 0x34	; 52
    3800:	f0 e0       	ldi	r31, 0x00	; 0
    3802:	80 81       	ld	r24, Z
    3804:	48 2f       	mov	r20, r24
    3806:	89 81       	ldd	r24, Y+1	; 0x01
    3808:	28 2f       	mov	r18, r24
    380a:	30 e0       	ldi	r19, 0x00	; 0
    380c:	81 e0       	ldi	r24, 0x01	; 1
    380e:	90 e0       	ldi	r25, 0x00	; 0
    3810:	02 c0       	rjmp	.+4      	; 0x3816 <PORT_enuSetPinMode+0x440>
    3812:	88 0f       	add	r24, r24
    3814:	99 1f       	adc	r25, r25
    3816:	2a 95       	dec	r18
    3818:	e2 f7       	brpl	.-8      	; 0x3812 <PORT_enuSetPinMode+0x43c>
    381a:	84 2b       	or	r24, r20
    381c:	8c 93       	st	X, r24
					CLEAR_BIT(PORTC,PinIndex);
    381e:	a5 e3       	ldi	r26, 0x35	; 53
    3820:	b0 e0       	ldi	r27, 0x00	; 0
    3822:	e5 e3       	ldi	r30, 0x35	; 53
    3824:	f0 e0       	ldi	r31, 0x00	; 0
    3826:	80 81       	ld	r24, Z
    3828:	48 2f       	mov	r20, r24
    382a:	89 81       	ldd	r24, Y+1	; 0x01
    382c:	28 2f       	mov	r18, r24
    382e:	30 e0       	ldi	r19, 0x00	; 0
    3830:	81 e0       	ldi	r24, 0x01	; 1
    3832:	90 e0       	ldi	r25, 0x00	; 0
    3834:	02 2e       	mov	r0, r18
    3836:	02 c0       	rjmp	.+4      	; 0x383c <PORT_enuSetPinMode+0x466>
    3838:	88 0f       	add	r24, r24
    383a:	99 1f       	adc	r25, r25
    383c:	0a 94       	dec	r0
    383e:	e2 f7       	brpl	.-8      	; 0x3838 <PORT_enuSetPinMode+0x462>
    3840:	80 95       	com	r24
    3842:	84 23       	and	r24, r20
    3844:	8c 93       	st	X, r24
    3846:	0d c1       	rjmp	.+538    	; 0x3a62 <PORT_enuSetPinMode+0x68c>
					break;
				case PORT_INPUT_FLOATING:
					CLEAR_BIT(DDRC,PinIndex);
    3848:	a4 e3       	ldi	r26, 0x34	; 52
    384a:	b0 e0       	ldi	r27, 0x00	; 0
    384c:	e4 e3       	ldi	r30, 0x34	; 52
    384e:	f0 e0       	ldi	r31, 0x00	; 0
    3850:	80 81       	ld	r24, Z
    3852:	48 2f       	mov	r20, r24
    3854:	89 81       	ldd	r24, Y+1	; 0x01
    3856:	28 2f       	mov	r18, r24
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	81 e0       	ldi	r24, 0x01	; 1
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	02 c0       	rjmp	.+4      	; 0x3864 <PORT_enuSetPinMode+0x48e>
    3860:	88 0f       	add	r24, r24
    3862:	99 1f       	adc	r25, r25
    3864:	2a 95       	dec	r18
    3866:	e2 f7       	brpl	.-8      	; 0x3860 <PORT_enuSetPinMode+0x48a>
    3868:	80 95       	com	r24
    386a:	84 23       	and	r24, r20
    386c:	8c 93       	st	X, r24
					CLEAR_BIT(PORTC,PinIndex);
    386e:	a5 e3       	ldi	r26, 0x35	; 53
    3870:	b0 e0       	ldi	r27, 0x00	; 0
    3872:	e5 e3       	ldi	r30, 0x35	; 53
    3874:	f0 e0       	ldi	r31, 0x00	; 0
    3876:	80 81       	ld	r24, Z
    3878:	48 2f       	mov	r20, r24
    387a:	89 81       	ldd	r24, Y+1	; 0x01
    387c:	28 2f       	mov	r18, r24
    387e:	30 e0       	ldi	r19, 0x00	; 0
    3880:	81 e0       	ldi	r24, 0x01	; 1
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	02 2e       	mov	r0, r18
    3886:	02 c0       	rjmp	.+4      	; 0x388c <PORT_enuSetPinMode+0x4b6>
    3888:	88 0f       	add	r24, r24
    388a:	99 1f       	adc	r25, r25
    388c:	0a 94       	dec	r0
    388e:	e2 f7       	brpl	.-8      	; 0x3888 <PORT_enuSetPinMode+0x4b2>
    3890:	80 95       	com	r24
    3892:	84 23       	and	r24, r20
    3894:	8c 93       	st	X, r24
    3896:	e5 c0       	rjmp	.+458    	; 0x3a62 <PORT_enuSetPinMode+0x68c>

					break;
				case PORT_INPUT_PULLUP:
					CLEAR_BIT(DDRC,PinIndex);
    3898:	a4 e3       	ldi	r26, 0x34	; 52
    389a:	b0 e0       	ldi	r27, 0x00	; 0
    389c:	e4 e3       	ldi	r30, 0x34	; 52
    389e:	f0 e0       	ldi	r31, 0x00	; 0
    38a0:	80 81       	ld	r24, Z
    38a2:	48 2f       	mov	r20, r24
    38a4:	89 81       	ldd	r24, Y+1	; 0x01
    38a6:	28 2f       	mov	r18, r24
    38a8:	30 e0       	ldi	r19, 0x00	; 0
    38aa:	81 e0       	ldi	r24, 0x01	; 1
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	02 c0       	rjmp	.+4      	; 0x38b4 <PORT_enuSetPinMode+0x4de>
    38b0:	88 0f       	add	r24, r24
    38b2:	99 1f       	adc	r25, r25
    38b4:	2a 95       	dec	r18
    38b6:	e2 f7       	brpl	.-8      	; 0x38b0 <PORT_enuSetPinMode+0x4da>
    38b8:	80 95       	com	r24
    38ba:	84 23       	and	r24, r20
    38bc:	8c 93       	st	X, r24
					SET_BIT(PORTC,PinIndex);
    38be:	a5 e3       	ldi	r26, 0x35	; 53
    38c0:	b0 e0       	ldi	r27, 0x00	; 0
    38c2:	e5 e3       	ldi	r30, 0x35	; 53
    38c4:	f0 e0       	ldi	r31, 0x00	; 0
    38c6:	80 81       	ld	r24, Z
    38c8:	48 2f       	mov	r20, r24
    38ca:	89 81       	ldd	r24, Y+1	; 0x01
    38cc:	28 2f       	mov	r18, r24
    38ce:	30 e0       	ldi	r19, 0x00	; 0
    38d0:	81 e0       	ldi	r24, 0x01	; 1
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	02 2e       	mov	r0, r18
    38d6:	02 c0       	rjmp	.+4      	; 0x38dc <PORT_enuSetPinMode+0x506>
    38d8:	88 0f       	add	r24, r24
    38da:	99 1f       	adc	r25, r25
    38dc:	0a 94       	dec	r0
    38de:	e2 f7       	brpl	.-8      	; 0x38d8 <PORT_enuSetPinMode+0x502>
    38e0:	84 2b       	or	r24, r20
    38e2:	8c 93       	st	X, r24
    38e4:	be c0       	rjmp	.+380    	; 0x3a62 <PORT_enuSetPinMode+0x68c>
				}
				break;

				case PORT_D:
					//which mode ---PORT_OUTPUT_HIGH---PORT_OUTPUT_LOW----PORT_INPUT_FLOATING----PORT_INPUT_PULLUP
					switch(Copy_u8PinMode)
    38e6:	8d 81       	ldd	r24, Y+5	; 0x05
    38e8:	28 2f       	mov	r18, r24
    38ea:	30 e0       	ldi	r19, 0x00	; 0
    38ec:	3f 83       	std	Y+7, r19	; 0x07
    38ee:	2e 83       	std	Y+6, r18	; 0x06
    38f0:	8e 81       	ldd	r24, Y+6	; 0x06
    38f2:	9f 81       	ldd	r25, Y+7	; 0x07
    38f4:	83 30       	cpi	r24, 0x03	; 3
    38f6:	91 05       	cpc	r25, r1
    38f8:	09 f4       	brne	.+2      	; 0x38fc <PORT_enuSetPinMode+0x526>
    38fa:	3e c0       	rjmp	.+124    	; 0x3978 <PORT_enuSetPinMode+0x5a2>
    38fc:	2e 81       	ldd	r18, Y+6	; 0x06
    38fe:	3f 81       	ldd	r19, Y+7	; 0x07
    3900:	24 30       	cpi	r18, 0x04	; 4
    3902:	31 05       	cpc	r19, r1
    3904:	34 f4       	brge	.+12     	; 0x3912 <PORT_enuSetPinMode+0x53c>
    3906:	8e 81       	ldd	r24, Y+6	; 0x06
    3908:	9f 81       	ldd	r25, Y+7	; 0x07
    390a:	82 30       	cpi	r24, 0x02	; 2
    390c:	91 05       	cpc	r25, r1
    390e:	71 f0       	breq	.+28     	; 0x392c <PORT_enuSetPinMode+0x556>
    3910:	a8 c0       	rjmp	.+336    	; 0x3a62 <PORT_enuSetPinMode+0x68c>
    3912:	2e 81       	ldd	r18, Y+6	; 0x06
    3914:	3f 81       	ldd	r19, Y+7	; 0x07
    3916:	24 30       	cpi	r18, 0x04	; 4
    3918:	31 05       	cpc	r19, r1
    391a:	09 f4       	brne	.+2      	; 0x391e <PORT_enuSetPinMode+0x548>
    391c:	54 c0       	rjmp	.+168    	; 0x39c6 <PORT_enuSetPinMode+0x5f0>
    391e:	8e 81       	ldd	r24, Y+6	; 0x06
    3920:	9f 81       	ldd	r25, Y+7	; 0x07
    3922:	85 30       	cpi	r24, 0x05	; 5
    3924:	91 05       	cpc	r25, r1
    3926:	09 f4       	brne	.+2      	; 0x392a <PORT_enuSetPinMode+0x554>
    3928:	76 c0       	rjmp	.+236    	; 0x3a16 <PORT_enuSetPinMode+0x640>
    392a:	9b c0       	rjmp	.+310    	; 0x3a62 <PORT_enuSetPinMode+0x68c>
					{
					case PORT_OUTPUT_HIGH:
						//set output direction
						SET_BIT(DDRD,PinIndex);
    392c:	a1 e3       	ldi	r26, 0x31	; 49
    392e:	b0 e0       	ldi	r27, 0x00	; 0
    3930:	e1 e3       	ldi	r30, 0x31	; 49
    3932:	f0 e0       	ldi	r31, 0x00	; 0
    3934:	80 81       	ld	r24, Z
    3936:	48 2f       	mov	r20, r24
    3938:	89 81       	ldd	r24, Y+1	; 0x01
    393a:	28 2f       	mov	r18, r24
    393c:	30 e0       	ldi	r19, 0x00	; 0
    393e:	81 e0       	ldi	r24, 0x01	; 1
    3940:	90 e0       	ldi	r25, 0x00	; 0
    3942:	02 c0       	rjmp	.+4      	; 0x3948 <PORT_enuSetPinMode+0x572>
    3944:	88 0f       	add	r24, r24
    3946:	99 1f       	adc	r25, r25
    3948:	2a 95       	dec	r18
    394a:	e2 f7       	brpl	.-8      	; 0x3944 <PORT_enuSetPinMode+0x56e>
    394c:	84 2b       	or	r24, r20
    394e:	8c 93       	st	X, r24
						SET_BIT(PORTD,PinIndex);
    3950:	a2 e3       	ldi	r26, 0x32	; 50
    3952:	b0 e0       	ldi	r27, 0x00	; 0
    3954:	e2 e3       	ldi	r30, 0x32	; 50
    3956:	f0 e0       	ldi	r31, 0x00	; 0
    3958:	80 81       	ld	r24, Z
    395a:	48 2f       	mov	r20, r24
    395c:	89 81       	ldd	r24, Y+1	; 0x01
    395e:	28 2f       	mov	r18, r24
    3960:	30 e0       	ldi	r19, 0x00	; 0
    3962:	81 e0       	ldi	r24, 0x01	; 1
    3964:	90 e0       	ldi	r25, 0x00	; 0
    3966:	02 2e       	mov	r0, r18
    3968:	02 c0       	rjmp	.+4      	; 0x396e <PORT_enuSetPinMode+0x598>
    396a:	88 0f       	add	r24, r24
    396c:	99 1f       	adc	r25, r25
    396e:	0a 94       	dec	r0
    3970:	e2 f7       	brpl	.-8      	; 0x396a <PORT_enuSetPinMode+0x594>
    3972:	84 2b       	or	r24, r20
    3974:	8c 93       	st	X, r24
    3976:	75 c0       	rjmp	.+234    	; 0x3a62 <PORT_enuSetPinMode+0x68c>
						break;
					case PORT_OUTPUT_LOW:
						SET_BIT(DDRD,PinIndex);
    3978:	a1 e3       	ldi	r26, 0x31	; 49
    397a:	b0 e0       	ldi	r27, 0x00	; 0
    397c:	e1 e3       	ldi	r30, 0x31	; 49
    397e:	f0 e0       	ldi	r31, 0x00	; 0
    3980:	80 81       	ld	r24, Z
    3982:	48 2f       	mov	r20, r24
    3984:	89 81       	ldd	r24, Y+1	; 0x01
    3986:	28 2f       	mov	r18, r24
    3988:	30 e0       	ldi	r19, 0x00	; 0
    398a:	81 e0       	ldi	r24, 0x01	; 1
    398c:	90 e0       	ldi	r25, 0x00	; 0
    398e:	02 c0       	rjmp	.+4      	; 0x3994 <PORT_enuSetPinMode+0x5be>
    3990:	88 0f       	add	r24, r24
    3992:	99 1f       	adc	r25, r25
    3994:	2a 95       	dec	r18
    3996:	e2 f7       	brpl	.-8      	; 0x3990 <PORT_enuSetPinMode+0x5ba>
    3998:	84 2b       	or	r24, r20
    399a:	8c 93       	st	X, r24
						CLEAR_BIT(PORTD,PinIndex);
    399c:	a2 e3       	ldi	r26, 0x32	; 50
    399e:	b0 e0       	ldi	r27, 0x00	; 0
    39a0:	e2 e3       	ldi	r30, 0x32	; 50
    39a2:	f0 e0       	ldi	r31, 0x00	; 0
    39a4:	80 81       	ld	r24, Z
    39a6:	48 2f       	mov	r20, r24
    39a8:	89 81       	ldd	r24, Y+1	; 0x01
    39aa:	28 2f       	mov	r18, r24
    39ac:	30 e0       	ldi	r19, 0x00	; 0
    39ae:	81 e0       	ldi	r24, 0x01	; 1
    39b0:	90 e0       	ldi	r25, 0x00	; 0
    39b2:	02 2e       	mov	r0, r18
    39b4:	02 c0       	rjmp	.+4      	; 0x39ba <PORT_enuSetPinMode+0x5e4>
    39b6:	88 0f       	add	r24, r24
    39b8:	99 1f       	adc	r25, r25
    39ba:	0a 94       	dec	r0
    39bc:	e2 f7       	brpl	.-8      	; 0x39b6 <PORT_enuSetPinMode+0x5e0>
    39be:	80 95       	com	r24
    39c0:	84 23       	and	r24, r20
    39c2:	8c 93       	st	X, r24
    39c4:	4e c0       	rjmp	.+156    	; 0x3a62 <PORT_enuSetPinMode+0x68c>
						break;
					case PORT_INPUT_FLOATING:
						CLEAR_BIT(DDRD,PinIndex);
    39c6:	a1 e3       	ldi	r26, 0x31	; 49
    39c8:	b0 e0       	ldi	r27, 0x00	; 0
    39ca:	e1 e3       	ldi	r30, 0x31	; 49
    39cc:	f0 e0       	ldi	r31, 0x00	; 0
    39ce:	80 81       	ld	r24, Z
    39d0:	48 2f       	mov	r20, r24
    39d2:	89 81       	ldd	r24, Y+1	; 0x01
    39d4:	28 2f       	mov	r18, r24
    39d6:	30 e0       	ldi	r19, 0x00	; 0
    39d8:	81 e0       	ldi	r24, 0x01	; 1
    39da:	90 e0       	ldi	r25, 0x00	; 0
    39dc:	02 c0       	rjmp	.+4      	; 0x39e2 <PORT_enuSetPinMode+0x60c>
    39de:	88 0f       	add	r24, r24
    39e0:	99 1f       	adc	r25, r25
    39e2:	2a 95       	dec	r18
    39e4:	e2 f7       	brpl	.-8      	; 0x39de <PORT_enuSetPinMode+0x608>
    39e6:	80 95       	com	r24
    39e8:	84 23       	and	r24, r20
    39ea:	8c 93       	st	X, r24
						CLEAR_BIT(PORTD,PinIndex);
    39ec:	a2 e3       	ldi	r26, 0x32	; 50
    39ee:	b0 e0       	ldi	r27, 0x00	; 0
    39f0:	e2 e3       	ldi	r30, 0x32	; 50
    39f2:	f0 e0       	ldi	r31, 0x00	; 0
    39f4:	80 81       	ld	r24, Z
    39f6:	48 2f       	mov	r20, r24
    39f8:	89 81       	ldd	r24, Y+1	; 0x01
    39fa:	28 2f       	mov	r18, r24
    39fc:	30 e0       	ldi	r19, 0x00	; 0
    39fe:	81 e0       	ldi	r24, 0x01	; 1
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	02 2e       	mov	r0, r18
    3a04:	02 c0       	rjmp	.+4      	; 0x3a0a <PORT_enuSetPinMode+0x634>
    3a06:	88 0f       	add	r24, r24
    3a08:	99 1f       	adc	r25, r25
    3a0a:	0a 94       	dec	r0
    3a0c:	e2 f7       	brpl	.-8      	; 0x3a06 <PORT_enuSetPinMode+0x630>
    3a0e:	80 95       	com	r24
    3a10:	84 23       	and	r24, r20
    3a12:	8c 93       	st	X, r24
    3a14:	26 c0       	rjmp	.+76     	; 0x3a62 <PORT_enuSetPinMode+0x68c>

						break;
					case PORT_INPUT_PULLUP:
						CLEAR_BIT(DDRD,PinIndex);
    3a16:	a1 e3       	ldi	r26, 0x31	; 49
    3a18:	b0 e0       	ldi	r27, 0x00	; 0
    3a1a:	e1 e3       	ldi	r30, 0x31	; 49
    3a1c:	f0 e0       	ldi	r31, 0x00	; 0
    3a1e:	80 81       	ld	r24, Z
    3a20:	48 2f       	mov	r20, r24
    3a22:	89 81       	ldd	r24, Y+1	; 0x01
    3a24:	28 2f       	mov	r18, r24
    3a26:	30 e0       	ldi	r19, 0x00	; 0
    3a28:	81 e0       	ldi	r24, 0x01	; 1
    3a2a:	90 e0       	ldi	r25, 0x00	; 0
    3a2c:	02 c0       	rjmp	.+4      	; 0x3a32 <PORT_enuSetPinMode+0x65c>
    3a2e:	88 0f       	add	r24, r24
    3a30:	99 1f       	adc	r25, r25
    3a32:	2a 95       	dec	r18
    3a34:	e2 f7       	brpl	.-8      	; 0x3a2e <PORT_enuSetPinMode+0x658>
    3a36:	80 95       	com	r24
    3a38:	84 23       	and	r24, r20
    3a3a:	8c 93       	st	X, r24
						SET_BIT(PORTD,PinIndex);
    3a3c:	a2 e3       	ldi	r26, 0x32	; 50
    3a3e:	b0 e0       	ldi	r27, 0x00	; 0
    3a40:	e2 e3       	ldi	r30, 0x32	; 50
    3a42:	f0 e0       	ldi	r31, 0x00	; 0
    3a44:	80 81       	ld	r24, Z
    3a46:	48 2f       	mov	r20, r24
    3a48:	89 81       	ldd	r24, Y+1	; 0x01
    3a4a:	28 2f       	mov	r18, r24
    3a4c:	30 e0       	ldi	r19, 0x00	; 0
    3a4e:	81 e0       	ldi	r24, 0x01	; 1
    3a50:	90 e0       	ldi	r25, 0x00	; 0
    3a52:	02 2e       	mov	r0, r18
    3a54:	02 c0       	rjmp	.+4      	; 0x3a5a <PORT_enuSetPinMode+0x684>
    3a56:	88 0f       	add	r24, r24
    3a58:	99 1f       	adc	r25, r25
    3a5a:	0a 94       	dec	r0
    3a5c:	e2 f7       	brpl	.-8      	; 0x3a56 <PORT_enuSetPinMode+0x680>
    3a5e:	84 2b       	or	r24, r20
    3a60:	8c 93       	st	X, r24
					}
					break;

	}
	//return Error Status
	return LOC_u8ErrorStatus;
    3a62:	8b 81       	ldd	r24, Y+3	; 0x03

}
    3a64:	2f 96       	adiw	r28, 0x0f	; 15
    3a66:	0f b6       	in	r0, 0x3f	; 63
    3a68:	f8 94       	cli
    3a6a:	de bf       	out	0x3e, r29	; 62
    3a6c:	0f be       	out	0x3f, r0	; 63
    3a6e:	cd bf       	out	0x3d, r28	; 61
    3a70:	cf 91       	pop	r28
    3a72:	df 91       	pop	r29
    3a74:	08 95       	ret

00003a76 <PORT_enuSetDirection>:
 *                   2.Copy_u8PinDirection --> Direction
 * Parameters(OUT) : value of enum type PORT_tenuLOC_u8ErrorStatus
 *******************************************************************************************/

PORT_tenuErrorStatus PORT_enuSetDirection(PortPinType Copy_u8PinId,PortPinType Copy_u8PinDirection)
{
    3a76:	df 93       	push	r29
    3a78:	cf 93       	push	r28
    3a7a:	cd b7       	in	r28, 0x3d	; 61
    3a7c:	de b7       	in	r29, 0x3e	; 62
    3a7e:	2f 97       	sbiw	r28, 0x0f	; 15
    3a80:	0f b6       	in	r0, 0x3f	; 63
    3a82:	f8 94       	cli
    3a84:	de bf       	out	0x3e, r29	; 62
    3a86:	0f be       	out	0x3f, r0	; 63
    3a88:	cd bf       	out	0x3d, r28	; 61
    3a8a:	8c 83       	std	Y+4, r24	; 0x04
    3a8c:	6d 83       	std	Y+5, r22	; 0x05
	//local variable for Error status
	uint8 LOC_u8ErrorStatus=PORT_enuOK;
    3a8e:	1b 82       	std	Y+3, r1	; 0x03

	uint8 PortIndex=0,PinIndex=0;
    3a90:	1a 82       	std	Y+2, r1	; 0x02
    3a92:	19 82       	std	Y+1, r1	; 0x01

	PortIndex=(Copy_u8PinId/8);
    3a94:	8c 81       	ldd	r24, Y+4	; 0x04
    3a96:	86 95       	lsr	r24
    3a98:	86 95       	lsr	r24
    3a9a:	86 95       	lsr	r24
    3a9c:	8a 83       	std	Y+2, r24	; 0x02

	PinIndex=Copy_u8PinId%8;
    3a9e:	8c 81       	ldd	r24, Y+4	; 0x04
    3aa0:	87 70       	andi	r24, 0x07	; 7
    3aa2:	89 83       	std	Y+1, r24	; 0x01


	if(Copy_u8PinId>PORT_NUMBER_OF_PINS)
    3aa4:	8c 81       	ldd	r24, Y+4	; 0x04
    3aa6:	81 32       	cpi	r24, 0x21	; 33
    3aa8:	10 f0       	brcs	.+4      	; 0x3aae <PORT_enuSetDirection+0x38>
	{
		LOC_u8ErrorStatus=PORT_enuPinError;
    3aaa:	81 e0       	ldi	r24, 0x01	; 1
    3aac:	8b 83       	std	Y+3, r24	; 0x03
	}

	if(PortIndex>PORT_NUMBER_OF_PORTS)
    3aae:	8a 81       	ldd	r24, Y+2	; 0x02
    3ab0:	85 30       	cpi	r24, 0x05	; 5
    3ab2:	10 f0       	brcs	.+4      	; 0x3ab8 <PORT_enuSetDirection+0x42>
	{
		LOC_u8ErrorStatus=PORT_enuPortError;
    3ab4:	82 e0       	ldi	r24, 0x02	; 2
    3ab6:	8b 83       	std	Y+3, r24	; 0x03
	}

	if((Copy_u8PinDirection != PORT_INPUT_Direction) ||(Copy_u8PinDirection != PORT_OUTPUT_Direction))
    3ab8:	8d 81       	ldd	r24, Y+5	; 0x05
    3aba:	86 30       	cpi	r24, 0x06	; 6
    3abc:	19 f4       	brne	.+6      	; 0x3ac4 <PORT_enuSetDirection+0x4e>
    3abe:	8d 81       	ldd	r24, Y+5	; 0x05
    3ac0:	87 30       	cpi	r24, 0x07	; 7
    3ac2:	11 f0       	breq	.+4      	; 0x3ac8 <PORT_enuSetDirection+0x52>
	{
		LOC_u8ErrorStatus=Por_enuDirectionError;
    3ac4:	84 e0       	ldi	r24, 0x04	; 4
    3ac6:	8b 83       	std	Y+3, r24	; 0x03

	}


	switch(PortIndex)
    3ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    3aca:	28 2f       	mov	r18, r24
    3acc:	30 e0       	ldi	r19, 0x00	; 0
    3ace:	3f 87       	std	Y+15, r19	; 0x0f
    3ad0:	2e 87       	std	Y+14, r18	; 0x0e
    3ad2:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ad4:	9f 85       	ldd	r25, Y+15	; 0x0f
    3ad6:	81 30       	cpi	r24, 0x01	; 1
    3ad8:	91 05       	cpc	r25, r1
    3ada:	09 f4       	brne	.+2      	; 0x3ade <PORT_enuSetDirection+0x68>
    3adc:	50 c0       	rjmp	.+160    	; 0x3b7e <PORT_enuSetDirection+0x108>
    3ade:	2e 85       	ldd	r18, Y+14	; 0x0e
    3ae0:	3f 85       	ldd	r19, Y+15	; 0x0f
    3ae2:	22 30       	cpi	r18, 0x02	; 2
    3ae4:	31 05       	cpc	r19, r1
    3ae6:	2c f4       	brge	.+10     	; 0x3af2 <PORT_enuSetDirection+0x7c>
    3ae8:	8e 85       	ldd	r24, Y+14	; 0x0e
    3aea:	9f 85       	ldd	r25, Y+15	; 0x0f
    3aec:	00 97       	sbiw	r24, 0x00	; 0
    3aee:	71 f0       	breq	.+28     	; 0x3b0c <PORT_enuSetDirection+0x96>
    3af0:	f0 c0       	rjmp	.+480    	; 0x3cd2 <PORT_enuSetDirection+0x25c>
    3af2:	2e 85       	ldd	r18, Y+14	; 0x0e
    3af4:	3f 85       	ldd	r19, Y+15	; 0x0f
    3af6:	22 30       	cpi	r18, 0x02	; 2
    3af8:	31 05       	cpc	r19, r1
    3afa:	09 f4       	brne	.+2      	; 0x3afe <PORT_enuSetDirection+0x88>
    3afc:	79 c0       	rjmp	.+242    	; 0x3bf0 <PORT_enuSetDirection+0x17a>
    3afe:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b00:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b02:	83 30       	cpi	r24, 0x03	; 3
    3b04:	91 05       	cpc	r25, r1
    3b06:	09 f4       	brne	.+2      	; 0x3b0a <PORT_enuSetDirection+0x94>
    3b08:	ac c0       	rjmp	.+344    	; 0x3c62 <PORT_enuSetDirection+0x1ec>
    3b0a:	e3 c0       	rjmp	.+454    	; 0x3cd2 <PORT_enuSetDirection+0x25c>
	{

	case PORT_A:

		switch(Copy_u8PinDirection)
    3b0c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b0e:	28 2f       	mov	r18, r24
    3b10:	30 e0       	ldi	r19, 0x00	; 0
    3b12:	3d 87       	std	Y+13, r19	; 0x0d
    3b14:	2c 87       	std	Y+12, r18	; 0x0c
    3b16:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b18:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b1a:	86 30       	cpi	r24, 0x06	; 6
    3b1c:	91 05       	cpc	r25, r1
    3b1e:	31 f0       	breq	.+12     	; 0x3b2c <PORT_enuSetDirection+0xb6>
    3b20:	2c 85       	ldd	r18, Y+12	; 0x0c
    3b22:	3d 85       	ldd	r19, Y+13	; 0x0d
    3b24:	27 30       	cpi	r18, 0x07	; 7
    3b26:	31 05       	cpc	r19, r1
    3b28:	b1 f0       	breq	.+44     	; 0x3b56 <PORT_enuSetDirection+0xe0>
    3b2a:	d3 c0       	rjmp	.+422    	; 0x3cd2 <PORT_enuSetDirection+0x25c>
		{
		case PORT_INPUT_Direction:
			CLEAR_BIT(DDRA,PinIndex);
    3b2c:	aa e3       	ldi	r26, 0x3A	; 58
    3b2e:	b0 e0       	ldi	r27, 0x00	; 0
    3b30:	ea e3       	ldi	r30, 0x3A	; 58
    3b32:	f0 e0       	ldi	r31, 0x00	; 0
    3b34:	80 81       	ld	r24, Z
    3b36:	48 2f       	mov	r20, r24
    3b38:	89 81       	ldd	r24, Y+1	; 0x01
    3b3a:	28 2f       	mov	r18, r24
    3b3c:	30 e0       	ldi	r19, 0x00	; 0
    3b3e:	81 e0       	ldi	r24, 0x01	; 1
    3b40:	90 e0       	ldi	r25, 0x00	; 0
    3b42:	02 2e       	mov	r0, r18
    3b44:	02 c0       	rjmp	.+4      	; 0x3b4a <PORT_enuSetDirection+0xd4>
    3b46:	88 0f       	add	r24, r24
    3b48:	99 1f       	adc	r25, r25
    3b4a:	0a 94       	dec	r0
    3b4c:	e2 f7       	brpl	.-8      	; 0x3b46 <PORT_enuSetDirection+0xd0>
    3b4e:	80 95       	com	r24
    3b50:	84 23       	and	r24, r20
    3b52:	8c 93       	st	X, r24
    3b54:	be c0       	rjmp	.+380    	; 0x3cd2 <PORT_enuSetDirection+0x25c>
			break;
		case PORT_OUTPUT_Direction:
			SET_BIT(PORTA,PinIndex);
    3b56:	ab e3       	ldi	r26, 0x3B	; 59
    3b58:	b0 e0       	ldi	r27, 0x00	; 0
    3b5a:	eb e3       	ldi	r30, 0x3B	; 59
    3b5c:	f0 e0       	ldi	r31, 0x00	; 0
    3b5e:	80 81       	ld	r24, Z
    3b60:	48 2f       	mov	r20, r24
    3b62:	89 81       	ldd	r24, Y+1	; 0x01
    3b64:	28 2f       	mov	r18, r24
    3b66:	30 e0       	ldi	r19, 0x00	; 0
    3b68:	81 e0       	ldi	r24, 0x01	; 1
    3b6a:	90 e0       	ldi	r25, 0x00	; 0
    3b6c:	02 2e       	mov	r0, r18
    3b6e:	02 c0       	rjmp	.+4      	; 0x3b74 <PORT_enuSetDirection+0xfe>
    3b70:	88 0f       	add	r24, r24
    3b72:	99 1f       	adc	r25, r25
    3b74:	0a 94       	dec	r0
    3b76:	e2 f7       	brpl	.-8      	; 0x3b70 <PORT_enuSetDirection+0xfa>
    3b78:	84 2b       	or	r24, r20
    3b7a:	8c 93       	st	X, r24
    3b7c:	aa c0       	rjmp	.+340    	; 0x3cd2 <PORT_enuSetDirection+0x25c>
		}
		break;

		case PORT_B:

			switch(Copy_u8PinDirection)
    3b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    3b80:	28 2f       	mov	r18, r24
    3b82:	30 e0       	ldi	r19, 0x00	; 0
    3b84:	3b 87       	std	Y+11, r19	; 0x0b
    3b86:	2a 87       	std	Y+10, r18	; 0x0a
    3b88:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b8a:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b8c:	86 30       	cpi	r24, 0x06	; 6
    3b8e:	91 05       	cpc	r25, r1
    3b90:	31 f0       	breq	.+12     	; 0x3b9e <PORT_enuSetDirection+0x128>
    3b92:	2a 85       	ldd	r18, Y+10	; 0x0a
    3b94:	3b 85       	ldd	r19, Y+11	; 0x0b
    3b96:	27 30       	cpi	r18, 0x07	; 7
    3b98:	31 05       	cpc	r19, r1
    3b9a:	b1 f0       	breq	.+44     	; 0x3bc8 <PORT_enuSetDirection+0x152>
    3b9c:	9a c0       	rjmp	.+308    	; 0x3cd2 <PORT_enuSetDirection+0x25c>
			{
			case PORT_INPUT_Direction:
				CLEAR_BIT(DDRB,PinIndex);
    3b9e:	a7 e3       	ldi	r26, 0x37	; 55
    3ba0:	b0 e0       	ldi	r27, 0x00	; 0
    3ba2:	e7 e3       	ldi	r30, 0x37	; 55
    3ba4:	f0 e0       	ldi	r31, 0x00	; 0
    3ba6:	80 81       	ld	r24, Z
    3ba8:	48 2f       	mov	r20, r24
    3baa:	89 81       	ldd	r24, Y+1	; 0x01
    3bac:	28 2f       	mov	r18, r24
    3bae:	30 e0       	ldi	r19, 0x00	; 0
    3bb0:	81 e0       	ldi	r24, 0x01	; 1
    3bb2:	90 e0       	ldi	r25, 0x00	; 0
    3bb4:	02 2e       	mov	r0, r18
    3bb6:	02 c0       	rjmp	.+4      	; 0x3bbc <PORT_enuSetDirection+0x146>
    3bb8:	88 0f       	add	r24, r24
    3bba:	99 1f       	adc	r25, r25
    3bbc:	0a 94       	dec	r0
    3bbe:	e2 f7       	brpl	.-8      	; 0x3bb8 <PORT_enuSetDirection+0x142>
    3bc0:	80 95       	com	r24
    3bc2:	84 23       	and	r24, r20
    3bc4:	8c 93       	st	X, r24
    3bc6:	85 c0       	rjmp	.+266    	; 0x3cd2 <PORT_enuSetDirection+0x25c>
				break;
			case PORT_OUTPUT_Direction:
				SET_BIT(PORTB,PinIndex);
    3bc8:	a8 e3       	ldi	r26, 0x38	; 56
    3bca:	b0 e0       	ldi	r27, 0x00	; 0
    3bcc:	e8 e3       	ldi	r30, 0x38	; 56
    3bce:	f0 e0       	ldi	r31, 0x00	; 0
    3bd0:	80 81       	ld	r24, Z
    3bd2:	48 2f       	mov	r20, r24
    3bd4:	89 81       	ldd	r24, Y+1	; 0x01
    3bd6:	28 2f       	mov	r18, r24
    3bd8:	30 e0       	ldi	r19, 0x00	; 0
    3bda:	81 e0       	ldi	r24, 0x01	; 1
    3bdc:	90 e0       	ldi	r25, 0x00	; 0
    3bde:	02 2e       	mov	r0, r18
    3be0:	02 c0       	rjmp	.+4      	; 0x3be6 <PORT_enuSetDirection+0x170>
    3be2:	88 0f       	add	r24, r24
    3be4:	99 1f       	adc	r25, r25
    3be6:	0a 94       	dec	r0
    3be8:	e2 f7       	brpl	.-8      	; 0x3be2 <PORT_enuSetDirection+0x16c>
    3bea:	84 2b       	or	r24, r20
    3bec:	8c 93       	st	X, r24
    3bee:	71 c0       	rjmp	.+226    	; 0x3cd2 <PORT_enuSetDirection+0x25c>

			break;

			case PORT_C:

				switch(Copy_u8PinDirection)
    3bf0:	8d 81       	ldd	r24, Y+5	; 0x05
    3bf2:	28 2f       	mov	r18, r24
    3bf4:	30 e0       	ldi	r19, 0x00	; 0
    3bf6:	39 87       	std	Y+9, r19	; 0x09
    3bf8:	28 87       	std	Y+8, r18	; 0x08
    3bfa:	88 85       	ldd	r24, Y+8	; 0x08
    3bfc:	99 85       	ldd	r25, Y+9	; 0x09
    3bfe:	86 30       	cpi	r24, 0x06	; 6
    3c00:	91 05       	cpc	r25, r1
    3c02:	31 f0       	breq	.+12     	; 0x3c10 <PORT_enuSetDirection+0x19a>
    3c04:	28 85       	ldd	r18, Y+8	; 0x08
    3c06:	39 85       	ldd	r19, Y+9	; 0x09
    3c08:	27 30       	cpi	r18, 0x07	; 7
    3c0a:	31 05       	cpc	r19, r1
    3c0c:	b1 f0       	breq	.+44     	; 0x3c3a <PORT_enuSetDirection+0x1c4>
    3c0e:	61 c0       	rjmp	.+194    	; 0x3cd2 <PORT_enuSetDirection+0x25c>
				{
				case PORT_INPUT_Direction:
					CLEAR_BIT(DDRC,PinIndex);
    3c10:	a4 e3       	ldi	r26, 0x34	; 52
    3c12:	b0 e0       	ldi	r27, 0x00	; 0
    3c14:	e4 e3       	ldi	r30, 0x34	; 52
    3c16:	f0 e0       	ldi	r31, 0x00	; 0
    3c18:	80 81       	ld	r24, Z
    3c1a:	48 2f       	mov	r20, r24
    3c1c:	89 81       	ldd	r24, Y+1	; 0x01
    3c1e:	28 2f       	mov	r18, r24
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	81 e0       	ldi	r24, 0x01	; 1
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	02 2e       	mov	r0, r18
    3c28:	02 c0       	rjmp	.+4      	; 0x3c2e <PORT_enuSetDirection+0x1b8>
    3c2a:	88 0f       	add	r24, r24
    3c2c:	99 1f       	adc	r25, r25
    3c2e:	0a 94       	dec	r0
    3c30:	e2 f7       	brpl	.-8      	; 0x3c2a <PORT_enuSetDirection+0x1b4>
    3c32:	80 95       	com	r24
    3c34:	84 23       	and	r24, r20
    3c36:	8c 93       	st	X, r24
    3c38:	4c c0       	rjmp	.+152    	; 0x3cd2 <PORT_enuSetDirection+0x25c>
					break;
				case PORT_OUTPUT_Direction:
					SET_BIT(PORTC,PinIndex);
    3c3a:	a5 e3       	ldi	r26, 0x35	; 53
    3c3c:	b0 e0       	ldi	r27, 0x00	; 0
    3c3e:	e5 e3       	ldi	r30, 0x35	; 53
    3c40:	f0 e0       	ldi	r31, 0x00	; 0
    3c42:	80 81       	ld	r24, Z
    3c44:	48 2f       	mov	r20, r24
    3c46:	89 81       	ldd	r24, Y+1	; 0x01
    3c48:	28 2f       	mov	r18, r24
    3c4a:	30 e0       	ldi	r19, 0x00	; 0
    3c4c:	81 e0       	ldi	r24, 0x01	; 1
    3c4e:	90 e0       	ldi	r25, 0x00	; 0
    3c50:	02 2e       	mov	r0, r18
    3c52:	02 c0       	rjmp	.+4      	; 0x3c58 <PORT_enuSetDirection+0x1e2>
    3c54:	88 0f       	add	r24, r24
    3c56:	99 1f       	adc	r25, r25
    3c58:	0a 94       	dec	r0
    3c5a:	e2 f7       	brpl	.-8      	; 0x3c54 <PORT_enuSetDirection+0x1de>
    3c5c:	84 2b       	or	r24, r20
    3c5e:	8c 93       	st	X, r24
    3c60:	38 c0       	rjmp	.+112    	; 0x3cd2 <PORT_enuSetDirection+0x25c>
				}
				break;

				case PORT_D:

					switch(Copy_u8PinDirection)
    3c62:	8d 81       	ldd	r24, Y+5	; 0x05
    3c64:	28 2f       	mov	r18, r24
    3c66:	30 e0       	ldi	r19, 0x00	; 0
    3c68:	3f 83       	std	Y+7, r19	; 0x07
    3c6a:	2e 83       	std	Y+6, r18	; 0x06
    3c6c:	8e 81       	ldd	r24, Y+6	; 0x06
    3c6e:	9f 81       	ldd	r25, Y+7	; 0x07
    3c70:	86 30       	cpi	r24, 0x06	; 6
    3c72:	91 05       	cpc	r25, r1
    3c74:	31 f0       	breq	.+12     	; 0x3c82 <PORT_enuSetDirection+0x20c>
    3c76:	2e 81       	ldd	r18, Y+6	; 0x06
    3c78:	3f 81       	ldd	r19, Y+7	; 0x07
    3c7a:	27 30       	cpi	r18, 0x07	; 7
    3c7c:	31 05       	cpc	r19, r1
    3c7e:	b1 f0       	breq	.+44     	; 0x3cac <PORT_enuSetDirection+0x236>
    3c80:	28 c0       	rjmp	.+80     	; 0x3cd2 <PORT_enuSetDirection+0x25c>
					{
					case PORT_INPUT_Direction:
						CLEAR_BIT(DDRD,PinIndex);
    3c82:	a1 e3       	ldi	r26, 0x31	; 49
    3c84:	b0 e0       	ldi	r27, 0x00	; 0
    3c86:	e1 e3       	ldi	r30, 0x31	; 49
    3c88:	f0 e0       	ldi	r31, 0x00	; 0
    3c8a:	80 81       	ld	r24, Z
    3c8c:	48 2f       	mov	r20, r24
    3c8e:	89 81       	ldd	r24, Y+1	; 0x01
    3c90:	28 2f       	mov	r18, r24
    3c92:	30 e0       	ldi	r19, 0x00	; 0
    3c94:	81 e0       	ldi	r24, 0x01	; 1
    3c96:	90 e0       	ldi	r25, 0x00	; 0
    3c98:	02 2e       	mov	r0, r18
    3c9a:	02 c0       	rjmp	.+4      	; 0x3ca0 <PORT_enuSetDirection+0x22a>
    3c9c:	88 0f       	add	r24, r24
    3c9e:	99 1f       	adc	r25, r25
    3ca0:	0a 94       	dec	r0
    3ca2:	e2 f7       	brpl	.-8      	; 0x3c9c <PORT_enuSetDirection+0x226>
    3ca4:	80 95       	com	r24
    3ca6:	84 23       	and	r24, r20
    3ca8:	8c 93       	st	X, r24
    3caa:	13 c0       	rjmp	.+38     	; 0x3cd2 <PORT_enuSetDirection+0x25c>
						break;
					case PORT_OUTPUT_Direction:
						SET_BIT(PORTD,PinIndex);
    3cac:	a2 e3       	ldi	r26, 0x32	; 50
    3cae:	b0 e0       	ldi	r27, 0x00	; 0
    3cb0:	e2 e3       	ldi	r30, 0x32	; 50
    3cb2:	f0 e0       	ldi	r31, 0x00	; 0
    3cb4:	80 81       	ld	r24, Z
    3cb6:	48 2f       	mov	r20, r24
    3cb8:	89 81       	ldd	r24, Y+1	; 0x01
    3cba:	28 2f       	mov	r18, r24
    3cbc:	30 e0       	ldi	r19, 0x00	; 0
    3cbe:	81 e0       	ldi	r24, 0x01	; 1
    3cc0:	90 e0       	ldi	r25, 0x00	; 0
    3cc2:	02 2e       	mov	r0, r18
    3cc4:	02 c0       	rjmp	.+4      	; 0x3cca <PORT_enuSetDirection+0x254>
    3cc6:	88 0f       	add	r24, r24
    3cc8:	99 1f       	adc	r25, r25
    3cca:	0a 94       	dec	r0
    3ccc:	e2 f7       	brpl	.-8      	; 0x3cc6 <PORT_enuSetDirection+0x250>
    3cce:	84 2b       	or	r24, r20
    3cd0:	8c 93       	st	X, r24
					}
					break;

	}

	return LOC_u8ErrorStatus;
    3cd2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3cd4:	2f 96       	adiw	r28, 0x0f	; 15
    3cd6:	0f b6       	in	r0, 0x3f	; 63
    3cd8:	f8 94       	cli
    3cda:	de bf       	out	0x3e, r29	; 62
    3cdc:	0f be       	out	0x3f, r0	; 63
    3cde:	cd bf       	out	0x3d, r28	; 61
    3ce0:	cf 91       	pop	r28
    3ce2:	df 91       	pop	r29
    3ce4:	08 95       	ret

00003ce6 <GIE_enuInit>:
#include "../../../Services/Lib/common_macros.h"
#include "../Includes/GIE_Cfg.h"
#include "../Includes/GIE_Prv.h"

void  GIE_enuInit(void)
{
    3ce6:	df 93       	push	r29
    3ce8:	cf 93       	push	r28
    3cea:	cd b7       	in	r28, 0x3d	; 61
    3cec:	de b7       	in	r29, 0x3e	; 62
#if(GIE_MODE==GIE_ENABLE)
	SET_BIT(SREG,GIE_BIT);
    3cee:	af e5       	ldi	r26, 0x5F	; 95
    3cf0:	b0 e0       	ldi	r27, 0x00	; 0
    3cf2:	ef e5       	ldi	r30, 0x5F	; 95
    3cf4:	f0 e0       	ldi	r31, 0x00	; 0
    3cf6:	80 81       	ld	r24, Z
    3cf8:	80 68       	ori	r24, 0x80	; 128
    3cfa:	8c 93       	st	X, r24
#elif(GIE_MODE==GIE_DISABLE)
	CLEAR_BIT(SREG,GIE_BIT);
#endif
}
    3cfc:	cf 91       	pop	r28
    3cfe:	df 91       	pop	r29
    3d00:	08 95       	ret

00003d02 <GIE_enuSetResetGie>:



GIE_tenuErrorStatus GIE_enuSetResetGie(uint8 Copy_u8GieStatus)
{
    3d02:	df 93       	push	r29
    3d04:	cf 93       	push	r28
    3d06:	00 d0       	rcall	.+0      	; 0x3d08 <GIE_enuSetResetGie+0x6>
    3d08:	00 d0       	rcall	.+0      	; 0x3d0a <GIE_enuSetResetGie+0x8>
    3d0a:	cd b7       	in	r28, 0x3d	; 61
    3d0c:	de b7       	in	r29, 0x3e	; 62
    3d0e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 ErrorStatus=GIE_enuOK;
    3d10:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8GieStatus)
    3d12:	8a 81       	ldd	r24, Y+2	; 0x02
    3d14:	28 2f       	mov	r18, r24
    3d16:	30 e0       	ldi	r19, 0x00	; 0
    3d18:	3c 83       	std	Y+4, r19	; 0x04
    3d1a:	2b 83       	std	Y+3, r18	; 0x03
    3d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d20:	00 97       	sbiw	r24, 0x00	; 0
    3d22:	69 f0       	breq	.+26     	; 0x3d3e <GIE_enuSetResetGie+0x3c>
    3d24:	2b 81       	ldd	r18, Y+3	; 0x03
    3d26:	3c 81       	ldd	r19, Y+4	; 0x04
    3d28:	21 30       	cpi	r18, 0x01	; 1
    3d2a:	31 05       	cpc	r19, r1
    3d2c:	81 f4       	brne	.+32     	; 0x3d4e <GIE_enuSetResetGie+0x4c>
	{
	case GIE_ENABLE:
		SET_BIT(SREG,GIE_BIT);
    3d2e:	af e5       	ldi	r26, 0x5F	; 95
    3d30:	b0 e0       	ldi	r27, 0x00	; 0
    3d32:	ef e5       	ldi	r30, 0x5F	; 95
    3d34:	f0 e0       	ldi	r31, 0x00	; 0
    3d36:	80 81       	ld	r24, Z
    3d38:	80 68       	ori	r24, 0x80	; 128
    3d3a:	8c 93       	st	X, r24
    3d3c:	0a c0       	rjmp	.+20     	; 0x3d52 <GIE_enuSetResetGie+0x50>
		break;
	case GIE_DISABLE:
		CLEAR_BIT(SREG,GIE_BIT);
    3d3e:	af e5       	ldi	r26, 0x5F	; 95
    3d40:	b0 e0       	ldi	r27, 0x00	; 0
    3d42:	ef e5       	ldi	r30, 0x5F	; 95
    3d44:	f0 e0       	ldi	r31, 0x00	; 0
    3d46:	80 81       	ld	r24, Z
    3d48:	8f 77       	andi	r24, 0x7F	; 127
    3d4a:	8c 93       	st	X, r24
    3d4c:	02 c0       	rjmp	.+4      	; 0x3d52 <GIE_enuSetResetGie+0x50>
		break;
default:
	ErrorStatus=GIE_enuWrongStatus;
    3d4e:	81 e0       	ldi	r24, 0x01	; 1
    3d50:	89 83       	std	Y+1, r24	; 0x01
	break;
	}
	return ErrorStatus;
    3d52:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d54:	0f 90       	pop	r0
    3d56:	0f 90       	pop	r0
    3d58:	0f 90       	pop	r0
    3d5a:	0f 90       	pop	r0
    3d5c:	cf 91       	pop	r28
    3d5e:	df 91       	pop	r29
    3d60:	08 95       	ret

00003d62 <Dio_enuWriteChannel>:
 * Parameters(IN)  : 1.Copy_u8ChannelId -->channel number
 *                   2.Copy_u8Level     --> High or LOW
 * Parameters(OUT) : value of enum type PORT_tenuErrorStatus
 *******************************************************************************************/
Dio_tenuErrorStatus Dio_enuWriteChannel(DioPinType Copy_u8ChannelId,DioPinType Copy_u8Level)
{
    3d62:	df 93       	push	r29
    3d64:	cf 93       	push	r28
    3d66:	cd b7       	in	r28, 0x3d	; 61
    3d68:	de b7       	in	r29, 0x3e	; 62
    3d6a:	27 97       	sbiw	r28, 0x07	; 7
    3d6c:	0f b6       	in	r0, 0x3f	; 63
    3d6e:	f8 94       	cli
    3d70:	de bf       	out	0x3e, r29	; 62
    3d72:	0f be       	out	0x3f, r0	; 63
    3d74:	cd bf       	out	0x3d, r28	; 61
    3d76:	8c 83       	std	Y+4, r24	; 0x04
    3d78:	6d 83       	std	Y+5, r22	; 0x05
	uint8 ErrorStatus=Dio_enuOK;
    3d7a:	1b 82       	std	Y+3, r1	; 0x03
	uint8 PortIndex=0,PinIndex=0;
    3d7c:	1a 82       	std	Y+2, r1	; 0x02
    3d7e:	19 82       	std	Y+1, r1	; 0x01
	PortIndex=(Copy_u8ChannelId/8);
    3d80:	8c 81       	ldd	r24, Y+4	; 0x04
    3d82:	86 95       	lsr	r24
    3d84:	86 95       	lsr	r24
    3d86:	86 95       	lsr	r24
    3d88:	8a 83       	std	Y+2, r24	; 0x02
	PinIndex=Copy_u8ChannelId%8;
    3d8a:	8c 81       	ldd	r24, Y+4	; 0x04
    3d8c:	87 70       	andi	r24, 0x07	; 7
    3d8e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8ChannelId>DIO_NUMBER_OF_PINS)
    3d90:	8c 81       	ldd	r24, Y+4	; 0x04
    3d92:	81 32       	cpi	r24, 0x21	; 33
    3d94:	10 f0       	brcs	.+4      	; 0x3d9a <Dio_enuWriteChannel+0x38>
	{
		ErrorStatus=Dio_enuPinError;
    3d96:	81 e0       	ldi	r24, 0x01	; 1
    3d98:	8b 83       	std	Y+3, r24	; 0x03
	}
	if(PortIndex>DIO_NUMBER_OF_PORTS)
    3d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d9c:	85 30       	cpi	r24, 0x05	; 5
    3d9e:	10 f0       	brcs	.+4      	; 0x3da4 <Dio_enuWriteChannel+0x42>
	{
		ErrorStatus=Dio_enuPortError;
    3da0:	82 e0       	ldi	r24, 0x02	; 2
    3da2:	8b 83       	std	Y+3, r24	; 0x03
	}
	if(Copy_u8Level !=DIO_LOGIC_HIGH ||Copy_u8Level !=DIO_LOGIC_LOW )
    3da4:	8d 81       	ldd	r24, Y+5	; 0x05
    3da6:	81 30       	cpi	r24, 0x01	; 1
    3da8:	19 f4       	brne	.+6      	; 0x3db0 <Dio_enuWriteChannel+0x4e>
    3daa:	8d 81       	ldd	r24, Y+5	; 0x05
    3dac:	88 23       	and	r24, r24
    3dae:	11 f0       	breq	.+4      	; 0x3db4 <Dio_enuWriteChannel+0x52>
	{
		ErrorStatus=DIO_enuDirectionError;
    3db0:	83 e0       	ldi	r24, 0x03	; 3
    3db2:	8b 83       	std	Y+3, r24	; 0x03
	}
	switch(PortIndex)
    3db4:	8a 81       	ldd	r24, Y+2	; 0x02
    3db6:	28 2f       	mov	r18, r24
    3db8:	30 e0       	ldi	r19, 0x00	; 0
    3dba:	3f 83       	std	Y+7, r19	; 0x07
    3dbc:	2e 83       	std	Y+6, r18	; 0x06
    3dbe:	4e 81       	ldd	r20, Y+6	; 0x06
    3dc0:	5f 81       	ldd	r21, Y+7	; 0x07
    3dc2:	41 30       	cpi	r20, 0x01	; 1
    3dc4:	51 05       	cpc	r21, r1
    3dc6:	09 f4       	brne	.+2      	; 0x3dca <Dio_enuWriteChannel+0x68>
    3dc8:	69 c0       	rjmp	.+210    	; 0x3e9c <Dio_enuWriteChannel+0x13a>
    3dca:	8e 81       	ldd	r24, Y+6	; 0x06
    3dcc:	9f 81       	ldd	r25, Y+7	; 0x07
    3dce:	82 30       	cpi	r24, 0x02	; 2
    3dd0:	91 05       	cpc	r25, r1
    3dd2:	34 f4       	brge	.+12     	; 0x3de0 <Dio_enuWriteChannel+0x7e>
    3dd4:	2e 81       	ldd	r18, Y+6	; 0x06
    3dd6:	3f 81       	ldd	r19, Y+7	; 0x07
    3dd8:	21 15       	cp	r18, r1
    3dda:	31 05       	cpc	r19, r1
    3ddc:	71 f0       	breq	.+28     	; 0x3dfa <Dio_enuWriteChannel+0x98>
    3dde:	4f c1       	rjmp	.+670    	; 0x407e <Dio_enuWriteChannel+0x31c>
    3de0:	4e 81       	ldd	r20, Y+6	; 0x06
    3de2:	5f 81       	ldd	r21, Y+7	; 0x07
    3de4:	42 30       	cpi	r20, 0x02	; 2
    3de6:	51 05       	cpc	r21, r1
    3de8:	09 f4       	brne	.+2      	; 0x3dec <Dio_enuWriteChannel+0x8a>
    3dea:	a9 c0       	rjmp	.+338    	; 0x3f3e <Dio_enuWriteChannel+0x1dc>
    3dec:	8e 81       	ldd	r24, Y+6	; 0x06
    3dee:	9f 81       	ldd	r25, Y+7	; 0x07
    3df0:	83 30       	cpi	r24, 0x03	; 3
    3df2:	91 05       	cpc	r25, r1
    3df4:	09 f4       	brne	.+2      	; 0x3df8 <Dio_enuWriteChannel+0x96>
    3df6:	f4 c0       	rjmp	.+488    	; 0x3fe0 <Dio_enuWriteChannel+0x27e>
    3df8:	42 c1       	rjmp	.+644    	; 0x407e <Dio_enuWriteChannel+0x31c>
	{
	case Dio_PORTA:
		if(GET_BIT(DDRA,PinIndex)==0)
    3dfa:	ea e3       	ldi	r30, 0x3A	; 58
    3dfc:	f0 e0       	ldi	r31, 0x00	; 0
    3dfe:	80 81       	ld	r24, Z
    3e00:	48 2f       	mov	r20, r24
    3e02:	50 e0       	ldi	r21, 0x00	; 0
    3e04:	89 81       	ldd	r24, Y+1	; 0x01
    3e06:	28 2f       	mov	r18, r24
    3e08:	30 e0       	ldi	r19, 0x00	; 0
    3e0a:	81 e0       	ldi	r24, 0x01	; 1
    3e0c:	90 e0       	ldi	r25, 0x00	; 0
    3e0e:	02 c0       	rjmp	.+4      	; 0x3e14 <Dio_enuWriteChannel+0xb2>
    3e10:	88 0f       	add	r24, r24
    3e12:	99 1f       	adc	r25, r25
    3e14:	2a 95       	dec	r18
    3e16:	e2 f7       	brpl	.-8      	; 0x3e10 <Dio_enuWriteChannel+0xae>
    3e18:	9a 01       	movw	r18, r20
    3e1a:	28 23       	and	r18, r24
    3e1c:	39 23       	and	r19, r25
    3e1e:	89 81       	ldd	r24, Y+1	; 0x01
    3e20:	88 2f       	mov	r24, r24
    3e22:	90 e0       	ldi	r25, 0x00	; 0
    3e24:	a9 01       	movw	r20, r18
    3e26:	02 c0       	rjmp	.+4      	; 0x3e2c <Dio_enuWriteChannel+0xca>
    3e28:	55 95       	asr	r21
    3e2a:	47 95       	ror	r20
    3e2c:	8a 95       	dec	r24
    3e2e:	e2 f7       	brpl	.-8      	; 0x3e28 <Dio_enuWriteChannel+0xc6>
    3e30:	ca 01       	movw	r24, r20
    3e32:	00 97       	sbiw	r24, 0x00	; 0
    3e34:	19 f4       	brne	.+6      	; 0x3e3c <Dio_enuWriteChannel+0xda>
			ErrorStatus=DIO_enuDirectionError;
    3e36:	83 e0       	ldi	r24, 0x03	; 3
    3e38:	8b 83       	std	Y+3, r24	; 0x03
    3e3a:	21 c1       	rjmp	.+578    	; 0x407e <Dio_enuWriteChannel+0x31c>

		else if(Copy_u8Level==DIO_LOGIC_HIGH)
    3e3c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e3e:	81 30       	cpi	r24, 0x01	; 1
    3e40:	a1 f4       	brne	.+40     	; 0x3e6a <Dio_enuWriteChannel+0x108>
			SET_BIT(PORTA,PinIndex);
    3e42:	ab e3       	ldi	r26, 0x3B	; 59
    3e44:	b0 e0       	ldi	r27, 0x00	; 0
    3e46:	eb e3       	ldi	r30, 0x3B	; 59
    3e48:	f0 e0       	ldi	r31, 0x00	; 0
    3e4a:	80 81       	ld	r24, Z
    3e4c:	48 2f       	mov	r20, r24
    3e4e:	89 81       	ldd	r24, Y+1	; 0x01
    3e50:	28 2f       	mov	r18, r24
    3e52:	30 e0       	ldi	r19, 0x00	; 0
    3e54:	81 e0       	ldi	r24, 0x01	; 1
    3e56:	90 e0       	ldi	r25, 0x00	; 0
    3e58:	02 2e       	mov	r0, r18
    3e5a:	02 c0       	rjmp	.+4      	; 0x3e60 <Dio_enuWriteChannel+0xfe>
    3e5c:	88 0f       	add	r24, r24
    3e5e:	99 1f       	adc	r25, r25
    3e60:	0a 94       	dec	r0
    3e62:	e2 f7       	brpl	.-8      	; 0x3e5c <Dio_enuWriteChannel+0xfa>
    3e64:	84 2b       	or	r24, r20
    3e66:	8c 93       	st	X, r24
    3e68:	0a c1       	rjmp	.+532    	; 0x407e <Dio_enuWriteChannel+0x31c>

		else if(Copy_u8Level==DIO_LOGIC_LOW)
    3e6a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e6c:	88 23       	and	r24, r24
    3e6e:	09 f0       	breq	.+2      	; 0x3e72 <Dio_enuWriteChannel+0x110>
    3e70:	06 c1       	rjmp	.+524    	; 0x407e <Dio_enuWriteChannel+0x31c>
			CLEAR_BIT(PORTA,PinIndex);
    3e72:	ab e3       	ldi	r26, 0x3B	; 59
    3e74:	b0 e0       	ldi	r27, 0x00	; 0
    3e76:	eb e3       	ldi	r30, 0x3B	; 59
    3e78:	f0 e0       	ldi	r31, 0x00	; 0
    3e7a:	80 81       	ld	r24, Z
    3e7c:	48 2f       	mov	r20, r24
    3e7e:	89 81       	ldd	r24, Y+1	; 0x01
    3e80:	28 2f       	mov	r18, r24
    3e82:	30 e0       	ldi	r19, 0x00	; 0
    3e84:	81 e0       	ldi	r24, 0x01	; 1
    3e86:	90 e0       	ldi	r25, 0x00	; 0
    3e88:	02 2e       	mov	r0, r18
    3e8a:	02 c0       	rjmp	.+4      	; 0x3e90 <Dio_enuWriteChannel+0x12e>
    3e8c:	88 0f       	add	r24, r24
    3e8e:	99 1f       	adc	r25, r25
    3e90:	0a 94       	dec	r0
    3e92:	e2 f7       	brpl	.-8      	; 0x3e8c <Dio_enuWriteChannel+0x12a>
    3e94:	80 95       	com	r24
    3e96:	84 23       	and	r24, r20
    3e98:	8c 93       	st	X, r24
    3e9a:	f1 c0       	rjmp	.+482    	; 0x407e <Dio_enuWriteChannel+0x31c>
		break;
	case Dio_PORTB:
		 if(GET_BIT(DDRB,PinIndex)==0)
    3e9c:	e7 e3       	ldi	r30, 0x37	; 55
    3e9e:	f0 e0       	ldi	r31, 0x00	; 0
    3ea0:	80 81       	ld	r24, Z
    3ea2:	48 2f       	mov	r20, r24
    3ea4:	50 e0       	ldi	r21, 0x00	; 0
    3ea6:	89 81       	ldd	r24, Y+1	; 0x01
    3ea8:	28 2f       	mov	r18, r24
    3eaa:	30 e0       	ldi	r19, 0x00	; 0
    3eac:	81 e0       	ldi	r24, 0x01	; 1
    3eae:	90 e0       	ldi	r25, 0x00	; 0
    3eb0:	02 c0       	rjmp	.+4      	; 0x3eb6 <Dio_enuWriteChannel+0x154>
    3eb2:	88 0f       	add	r24, r24
    3eb4:	99 1f       	adc	r25, r25
    3eb6:	2a 95       	dec	r18
    3eb8:	e2 f7       	brpl	.-8      	; 0x3eb2 <Dio_enuWriteChannel+0x150>
    3eba:	9a 01       	movw	r18, r20
    3ebc:	28 23       	and	r18, r24
    3ebe:	39 23       	and	r19, r25
    3ec0:	89 81       	ldd	r24, Y+1	; 0x01
    3ec2:	88 2f       	mov	r24, r24
    3ec4:	90 e0       	ldi	r25, 0x00	; 0
    3ec6:	a9 01       	movw	r20, r18
    3ec8:	02 c0       	rjmp	.+4      	; 0x3ece <Dio_enuWriteChannel+0x16c>
    3eca:	55 95       	asr	r21
    3ecc:	47 95       	ror	r20
    3ece:	8a 95       	dec	r24
    3ed0:	e2 f7       	brpl	.-8      	; 0x3eca <Dio_enuWriteChannel+0x168>
    3ed2:	ca 01       	movw	r24, r20
    3ed4:	00 97       	sbiw	r24, 0x00	; 0
    3ed6:	19 f4       	brne	.+6      	; 0x3ede <Dio_enuWriteChannel+0x17c>
			ErrorStatus=DIO_enuDirectionError;
    3ed8:	83 e0       	ldi	r24, 0x03	; 3
    3eda:	8b 83       	std	Y+3, r24	; 0x03
    3edc:	d0 c0       	rjmp	.+416    	; 0x407e <Dio_enuWriteChannel+0x31c>
		else if(Copy_u8Level==DIO_LOGIC_HIGH)
    3ede:	8d 81       	ldd	r24, Y+5	; 0x05
    3ee0:	81 30       	cpi	r24, 0x01	; 1
    3ee2:	a1 f4       	brne	.+40     	; 0x3f0c <Dio_enuWriteChannel+0x1aa>
			SET_BIT(PORTB,PinIndex);
    3ee4:	a8 e3       	ldi	r26, 0x38	; 56
    3ee6:	b0 e0       	ldi	r27, 0x00	; 0
    3ee8:	e8 e3       	ldi	r30, 0x38	; 56
    3eea:	f0 e0       	ldi	r31, 0x00	; 0
    3eec:	80 81       	ld	r24, Z
    3eee:	48 2f       	mov	r20, r24
    3ef0:	89 81       	ldd	r24, Y+1	; 0x01
    3ef2:	28 2f       	mov	r18, r24
    3ef4:	30 e0       	ldi	r19, 0x00	; 0
    3ef6:	81 e0       	ldi	r24, 0x01	; 1
    3ef8:	90 e0       	ldi	r25, 0x00	; 0
    3efa:	02 2e       	mov	r0, r18
    3efc:	02 c0       	rjmp	.+4      	; 0x3f02 <Dio_enuWriteChannel+0x1a0>
    3efe:	88 0f       	add	r24, r24
    3f00:	99 1f       	adc	r25, r25
    3f02:	0a 94       	dec	r0
    3f04:	e2 f7       	brpl	.-8      	; 0x3efe <Dio_enuWriteChannel+0x19c>
    3f06:	84 2b       	or	r24, r20
    3f08:	8c 93       	st	X, r24
    3f0a:	b9 c0       	rjmp	.+370    	; 0x407e <Dio_enuWriteChannel+0x31c>
		else if(Copy_u8Level==DIO_LOGIC_LOW)
    3f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f0e:	88 23       	and	r24, r24
    3f10:	09 f0       	breq	.+2      	; 0x3f14 <Dio_enuWriteChannel+0x1b2>
    3f12:	b5 c0       	rjmp	.+362    	; 0x407e <Dio_enuWriteChannel+0x31c>
			CLEAR_BIT(PORTB,PinIndex);
    3f14:	a8 e3       	ldi	r26, 0x38	; 56
    3f16:	b0 e0       	ldi	r27, 0x00	; 0
    3f18:	e8 e3       	ldi	r30, 0x38	; 56
    3f1a:	f0 e0       	ldi	r31, 0x00	; 0
    3f1c:	80 81       	ld	r24, Z
    3f1e:	48 2f       	mov	r20, r24
    3f20:	89 81       	ldd	r24, Y+1	; 0x01
    3f22:	28 2f       	mov	r18, r24
    3f24:	30 e0       	ldi	r19, 0x00	; 0
    3f26:	81 e0       	ldi	r24, 0x01	; 1
    3f28:	90 e0       	ldi	r25, 0x00	; 0
    3f2a:	02 2e       	mov	r0, r18
    3f2c:	02 c0       	rjmp	.+4      	; 0x3f32 <Dio_enuWriteChannel+0x1d0>
    3f2e:	88 0f       	add	r24, r24
    3f30:	99 1f       	adc	r25, r25
    3f32:	0a 94       	dec	r0
    3f34:	e2 f7       	brpl	.-8      	; 0x3f2e <Dio_enuWriteChannel+0x1cc>
    3f36:	80 95       	com	r24
    3f38:	84 23       	and	r24, r20
    3f3a:	8c 93       	st	X, r24
    3f3c:	a0 c0       	rjmp	.+320    	; 0x407e <Dio_enuWriteChannel+0x31c>
		break;
	case Dio_PORTC:
		if(GET_BIT(DDRC,PinIndex)==0)
    3f3e:	e4 e3       	ldi	r30, 0x34	; 52
    3f40:	f0 e0       	ldi	r31, 0x00	; 0
    3f42:	80 81       	ld	r24, Z
    3f44:	48 2f       	mov	r20, r24
    3f46:	50 e0       	ldi	r21, 0x00	; 0
    3f48:	89 81       	ldd	r24, Y+1	; 0x01
    3f4a:	28 2f       	mov	r18, r24
    3f4c:	30 e0       	ldi	r19, 0x00	; 0
    3f4e:	81 e0       	ldi	r24, 0x01	; 1
    3f50:	90 e0       	ldi	r25, 0x00	; 0
    3f52:	02 c0       	rjmp	.+4      	; 0x3f58 <Dio_enuWriteChannel+0x1f6>
    3f54:	88 0f       	add	r24, r24
    3f56:	99 1f       	adc	r25, r25
    3f58:	2a 95       	dec	r18
    3f5a:	e2 f7       	brpl	.-8      	; 0x3f54 <Dio_enuWriteChannel+0x1f2>
    3f5c:	9a 01       	movw	r18, r20
    3f5e:	28 23       	and	r18, r24
    3f60:	39 23       	and	r19, r25
    3f62:	89 81       	ldd	r24, Y+1	; 0x01
    3f64:	88 2f       	mov	r24, r24
    3f66:	90 e0       	ldi	r25, 0x00	; 0
    3f68:	a9 01       	movw	r20, r18
    3f6a:	02 c0       	rjmp	.+4      	; 0x3f70 <Dio_enuWriteChannel+0x20e>
    3f6c:	55 95       	asr	r21
    3f6e:	47 95       	ror	r20
    3f70:	8a 95       	dec	r24
    3f72:	e2 f7       	brpl	.-8      	; 0x3f6c <Dio_enuWriteChannel+0x20a>
    3f74:	ca 01       	movw	r24, r20
    3f76:	00 97       	sbiw	r24, 0x00	; 0
    3f78:	19 f4       	brne	.+6      	; 0x3f80 <Dio_enuWriteChannel+0x21e>
			ErrorStatus=DIO_enuDirectionError;
    3f7a:	83 e0       	ldi	r24, 0x03	; 3
    3f7c:	8b 83       	std	Y+3, r24	; 0x03
    3f7e:	7f c0       	rjmp	.+254    	; 0x407e <Dio_enuWriteChannel+0x31c>
		else if(Copy_u8Level==DIO_LOGIC_HIGH)
    3f80:	8d 81       	ldd	r24, Y+5	; 0x05
    3f82:	81 30       	cpi	r24, 0x01	; 1
    3f84:	a1 f4       	brne	.+40     	; 0x3fae <Dio_enuWriteChannel+0x24c>
			SET_BIT(PORTC,PinIndex);
    3f86:	a5 e3       	ldi	r26, 0x35	; 53
    3f88:	b0 e0       	ldi	r27, 0x00	; 0
    3f8a:	e5 e3       	ldi	r30, 0x35	; 53
    3f8c:	f0 e0       	ldi	r31, 0x00	; 0
    3f8e:	80 81       	ld	r24, Z
    3f90:	48 2f       	mov	r20, r24
    3f92:	89 81       	ldd	r24, Y+1	; 0x01
    3f94:	28 2f       	mov	r18, r24
    3f96:	30 e0       	ldi	r19, 0x00	; 0
    3f98:	81 e0       	ldi	r24, 0x01	; 1
    3f9a:	90 e0       	ldi	r25, 0x00	; 0
    3f9c:	02 2e       	mov	r0, r18
    3f9e:	02 c0       	rjmp	.+4      	; 0x3fa4 <Dio_enuWriteChannel+0x242>
    3fa0:	88 0f       	add	r24, r24
    3fa2:	99 1f       	adc	r25, r25
    3fa4:	0a 94       	dec	r0
    3fa6:	e2 f7       	brpl	.-8      	; 0x3fa0 <Dio_enuWriteChannel+0x23e>
    3fa8:	84 2b       	or	r24, r20
    3faa:	8c 93       	st	X, r24
    3fac:	68 c0       	rjmp	.+208    	; 0x407e <Dio_enuWriteChannel+0x31c>
		else if(Copy_u8Level==DIO_LOGIC_LOW)
    3fae:	8d 81       	ldd	r24, Y+5	; 0x05
    3fb0:	88 23       	and	r24, r24
    3fb2:	09 f0       	breq	.+2      	; 0x3fb6 <Dio_enuWriteChannel+0x254>
    3fb4:	64 c0       	rjmp	.+200    	; 0x407e <Dio_enuWriteChannel+0x31c>
			CLEAR_BIT(PORTC,PinIndex);
    3fb6:	a5 e3       	ldi	r26, 0x35	; 53
    3fb8:	b0 e0       	ldi	r27, 0x00	; 0
    3fba:	e5 e3       	ldi	r30, 0x35	; 53
    3fbc:	f0 e0       	ldi	r31, 0x00	; 0
    3fbe:	80 81       	ld	r24, Z
    3fc0:	48 2f       	mov	r20, r24
    3fc2:	89 81       	ldd	r24, Y+1	; 0x01
    3fc4:	28 2f       	mov	r18, r24
    3fc6:	30 e0       	ldi	r19, 0x00	; 0
    3fc8:	81 e0       	ldi	r24, 0x01	; 1
    3fca:	90 e0       	ldi	r25, 0x00	; 0
    3fcc:	02 2e       	mov	r0, r18
    3fce:	02 c0       	rjmp	.+4      	; 0x3fd4 <Dio_enuWriteChannel+0x272>
    3fd0:	88 0f       	add	r24, r24
    3fd2:	99 1f       	adc	r25, r25
    3fd4:	0a 94       	dec	r0
    3fd6:	e2 f7       	brpl	.-8      	; 0x3fd0 <Dio_enuWriteChannel+0x26e>
    3fd8:	80 95       	com	r24
    3fda:	84 23       	and	r24, r20
    3fdc:	8c 93       	st	X, r24
    3fde:	4f c0       	rjmp	.+158    	; 0x407e <Dio_enuWriteChannel+0x31c>
		break;
	case Dio_PORTD:
		if(GET_BIT(DDRD,PinIndex)==0)
    3fe0:	e1 e3       	ldi	r30, 0x31	; 49
    3fe2:	f0 e0       	ldi	r31, 0x00	; 0
    3fe4:	80 81       	ld	r24, Z
    3fe6:	48 2f       	mov	r20, r24
    3fe8:	50 e0       	ldi	r21, 0x00	; 0
    3fea:	89 81       	ldd	r24, Y+1	; 0x01
    3fec:	28 2f       	mov	r18, r24
    3fee:	30 e0       	ldi	r19, 0x00	; 0
    3ff0:	81 e0       	ldi	r24, 0x01	; 1
    3ff2:	90 e0       	ldi	r25, 0x00	; 0
    3ff4:	02 c0       	rjmp	.+4      	; 0x3ffa <Dio_enuWriteChannel+0x298>
    3ff6:	88 0f       	add	r24, r24
    3ff8:	99 1f       	adc	r25, r25
    3ffa:	2a 95       	dec	r18
    3ffc:	e2 f7       	brpl	.-8      	; 0x3ff6 <Dio_enuWriteChannel+0x294>
    3ffe:	9a 01       	movw	r18, r20
    4000:	28 23       	and	r18, r24
    4002:	39 23       	and	r19, r25
    4004:	89 81       	ldd	r24, Y+1	; 0x01
    4006:	88 2f       	mov	r24, r24
    4008:	90 e0       	ldi	r25, 0x00	; 0
    400a:	a9 01       	movw	r20, r18
    400c:	02 c0       	rjmp	.+4      	; 0x4012 <Dio_enuWriteChannel+0x2b0>
    400e:	55 95       	asr	r21
    4010:	47 95       	ror	r20
    4012:	8a 95       	dec	r24
    4014:	e2 f7       	brpl	.-8      	; 0x400e <Dio_enuWriteChannel+0x2ac>
    4016:	ca 01       	movw	r24, r20
    4018:	00 97       	sbiw	r24, 0x00	; 0
    401a:	19 f4       	brne	.+6      	; 0x4022 <Dio_enuWriteChannel+0x2c0>
			ErrorStatus=DIO_enuDirectionError;
    401c:	83 e0       	ldi	r24, 0x03	; 3
    401e:	8b 83       	std	Y+3, r24	; 0x03
    4020:	2e c0       	rjmp	.+92     	; 0x407e <Dio_enuWriteChannel+0x31c>
		else if(Copy_u8Level==DIO_LOGIC_HIGH)
    4022:	8d 81       	ldd	r24, Y+5	; 0x05
    4024:	81 30       	cpi	r24, 0x01	; 1
    4026:	a1 f4       	brne	.+40     	; 0x4050 <Dio_enuWriteChannel+0x2ee>
			SET_BIT(PORTD,PinIndex);
    4028:	a2 e3       	ldi	r26, 0x32	; 50
    402a:	b0 e0       	ldi	r27, 0x00	; 0
    402c:	e2 e3       	ldi	r30, 0x32	; 50
    402e:	f0 e0       	ldi	r31, 0x00	; 0
    4030:	80 81       	ld	r24, Z
    4032:	48 2f       	mov	r20, r24
    4034:	89 81       	ldd	r24, Y+1	; 0x01
    4036:	28 2f       	mov	r18, r24
    4038:	30 e0       	ldi	r19, 0x00	; 0
    403a:	81 e0       	ldi	r24, 0x01	; 1
    403c:	90 e0       	ldi	r25, 0x00	; 0
    403e:	02 2e       	mov	r0, r18
    4040:	02 c0       	rjmp	.+4      	; 0x4046 <Dio_enuWriteChannel+0x2e4>
    4042:	88 0f       	add	r24, r24
    4044:	99 1f       	adc	r25, r25
    4046:	0a 94       	dec	r0
    4048:	e2 f7       	brpl	.-8      	; 0x4042 <Dio_enuWriteChannel+0x2e0>
    404a:	84 2b       	or	r24, r20
    404c:	8c 93       	st	X, r24
    404e:	17 c0       	rjmp	.+46     	; 0x407e <Dio_enuWriteChannel+0x31c>
		else if(Copy_u8Level==DIO_LOGIC_LOW)
    4050:	8d 81       	ldd	r24, Y+5	; 0x05
    4052:	88 23       	and	r24, r24
    4054:	a1 f4       	brne	.+40     	; 0x407e <Dio_enuWriteChannel+0x31c>
			CLEAR_BIT(PORTD,PinIndex);
    4056:	a2 e3       	ldi	r26, 0x32	; 50
    4058:	b0 e0       	ldi	r27, 0x00	; 0
    405a:	e2 e3       	ldi	r30, 0x32	; 50
    405c:	f0 e0       	ldi	r31, 0x00	; 0
    405e:	80 81       	ld	r24, Z
    4060:	48 2f       	mov	r20, r24
    4062:	89 81       	ldd	r24, Y+1	; 0x01
    4064:	28 2f       	mov	r18, r24
    4066:	30 e0       	ldi	r19, 0x00	; 0
    4068:	81 e0       	ldi	r24, 0x01	; 1
    406a:	90 e0       	ldi	r25, 0x00	; 0
    406c:	02 2e       	mov	r0, r18
    406e:	02 c0       	rjmp	.+4      	; 0x4074 <Dio_enuWriteChannel+0x312>
    4070:	88 0f       	add	r24, r24
    4072:	99 1f       	adc	r25, r25
    4074:	0a 94       	dec	r0
    4076:	e2 f7       	brpl	.-8      	; 0x4070 <Dio_enuWriteChannel+0x30e>
    4078:	80 95       	com	r24
    407a:	84 23       	and	r24, r20
    407c:	8c 93       	st	X, r24
		break;
	}
	return ErrorStatus;
    407e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4080:	27 96       	adiw	r28, 0x07	; 7
    4082:	0f b6       	in	r0, 0x3f	; 63
    4084:	f8 94       	cli
    4086:	de bf       	out	0x3e, r29	; 62
    4088:	0f be       	out	0x3f, r0	; 63
    408a:	cd bf       	out	0x3d, r28	; 61
    408c:	cf 91       	pop	r28
    408e:	df 91       	pop	r29
    4090:	08 95       	ret

00004092 <Dio_enuReadChannel>:
 * Parameters(IN)  : 1.Copy_u8ChannelId        -->channel number
 *                   2.Add_pu8ChannelLevel     --> pointer to address of value carry
 * Parameters(OUT) : value of enum type PORT_tenuErrorStatus
 *******************************************************************************************/
Dio_tenuErrorStatus Dio_enuReadChannel(DioPinType Copy_u8ChannelId,pu8 Add_pu8ChannelLevel)
{
    4092:	df 93       	push	r29
    4094:	cf 93       	push	r28
    4096:	cd b7       	in	r28, 0x3d	; 61
    4098:	de b7       	in	r29, 0x3e	; 62
    409a:	28 97       	sbiw	r28, 0x08	; 8
    409c:	0f b6       	in	r0, 0x3f	; 63
    409e:	f8 94       	cli
    40a0:	de bf       	out	0x3e, r29	; 62
    40a2:	0f be       	out	0x3f, r0	; 63
    40a4:	cd bf       	out	0x3d, r28	; 61
    40a6:	8c 83       	std	Y+4, r24	; 0x04
    40a8:	7e 83       	std	Y+6, r23	; 0x06
    40aa:	6d 83       	std	Y+5, r22	; 0x05
	uint8 ErrorStatus=Dio_enuOK;
    40ac:	1b 82       	std	Y+3, r1	; 0x03
		uint8 PortIndex=0,PinIndex=0;
    40ae:	1a 82       	std	Y+2, r1	; 0x02
    40b0:	19 82       	std	Y+1, r1	; 0x01
		PortIndex=(Copy_u8ChannelId/8);
    40b2:	8c 81       	ldd	r24, Y+4	; 0x04
    40b4:	86 95       	lsr	r24
    40b6:	86 95       	lsr	r24
    40b8:	86 95       	lsr	r24
    40ba:	8a 83       	std	Y+2, r24	; 0x02
		PinIndex=Copy_u8ChannelId%8;
    40bc:	8c 81       	ldd	r24, Y+4	; 0x04
    40be:	87 70       	andi	r24, 0x07	; 7
    40c0:	89 83       	std	Y+1, r24	; 0x01
		if(Copy_u8ChannelId>DIO_NUMBER_OF_PINS)
    40c2:	8c 81       	ldd	r24, Y+4	; 0x04
    40c4:	81 32       	cpi	r24, 0x21	; 33
    40c6:	10 f0       	brcs	.+4      	; 0x40cc <Dio_enuReadChannel+0x3a>
		{
			ErrorStatus=Dio_enuPinError;
    40c8:	81 e0       	ldi	r24, 0x01	; 1
    40ca:	8b 83       	std	Y+3, r24	; 0x03
		}
		if(PortIndex>DIO_NUMBER_OF_PORTS)
    40cc:	8a 81       	ldd	r24, Y+2	; 0x02
    40ce:	85 30       	cpi	r24, 0x05	; 5
    40d0:	10 f0       	brcs	.+4      	; 0x40d6 <Dio_enuReadChannel+0x44>
		{
			ErrorStatus=Dio_enuPortError;
    40d2:	82 e0       	ldi	r24, 0x02	; 2
    40d4:	8b 83       	std	Y+3, r24	; 0x03
		}
		if( Add_pu8ChannelLevel ==Null_ptr)
    40d6:	8d 81       	ldd	r24, Y+5	; 0x05
    40d8:	9e 81       	ldd	r25, Y+6	; 0x06
    40da:	00 97       	sbiw	r24, 0x00	; 0
    40dc:	11 f4       	brne	.+4      	; 0x40e2 <Dio_enuReadChannel+0x50>
		{
			ErrorStatus=DIO_enuNullPtr;
    40de:	84 e0       	ldi	r24, 0x04	; 4
    40e0:	8b 83       	std	Y+3, r24	; 0x03
		}
		switch(PortIndex)
    40e2:	8a 81       	ldd	r24, Y+2	; 0x02
    40e4:	28 2f       	mov	r18, r24
    40e6:	30 e0       	ldi	r19, 0x00	; 0
    40e8:	38 87       	std	Y+8, r19	; 0x08
    40ea:	2f 83       	std	Y+7, r18	; 0x07
    40ec:	4f 81       	ldd	r20, Y+7	; 0x07
    40ee:	58 85       	ldd	r21, Y+8	; 0x08
    40f0:	41 30       	cpi	r20, 0x01	; 1
    40f2:	51 05       	cpc	r21, r1
    40f4:	09 f4       	brne	.+2      	; 0x40f8 <Dio_enuReadChannel+0x66>
    40f6:	5a c0       	rjmp	.+180    	; 0x41ac <Dio_enuReadChannel+0x11a>
    40f8:	8f 81       	ldd	r24, Y+7	; 0x07
    40fa:	98 85       	ldd	r25, Y+8	; 0x08
    40fc:	82 30       	cpi	r24, 0x02	; 2
    40fe:	91 05       	cpc	r25, r1
    4100:	34 f4       	brge	.+12     	; 0x410e <Dio_enuReadChannel+0x7c>
    4102:	2f 81       	ldd	r18, Y+7	; 0x07
    4104:	38 85       	ldd	r19, Y+8	; 0x08
    4106:	21 15       	cp	r18, r1
    4108:	31 05       	cpc	r19, r1
    410a:	71 f0       	breq	.+28     	; 0x4128 <Dio_enuReadChannel+0x96>
    410c:	14 c1       	rjmp	.+552    	; 0x4336 <Dio_enuReadChannel+0x2a4>
    410e:	4f 81       	ldd	r20, Y+7	; 0x07
    4110:	58 85       	ldd	r21, Y+8	; 0x08
    4112:	42 30       	cpi	r20, 0x02	; 2
    4114:	51 05       	cpc	r21, r1
    4116:	09 f4       	brne	.+2      	; 0x411a <Dio_enuReadChannel+0x88>
    4118:	8b c0       	rjmp	.+278    	; 0x4230 <Dio_enuReadChannel+0x19e>
    411a:	8f 81       	ldd	r24, Y+7	; 0x07
    411c:	98 85       	ldd	r25, Y+8	; 0x08
    411e:	83 30       	cpi	r24, 0x03	; 3
    4120:	91 05       	cpc	r25, r1
    4122:	09 f4       	brne	.+2      	; 0x4126 <Dio_enuReadChannel+0x94>
    4124:	c7 c0       	rjmp	.+398    	; 0x42b4 <Dio_enuReadChannel+0x222>
    4126:	07 c1       	rjmp	.+526    	; 0x4336 <Dio_enuReadChannel+0x2a4>
		{
		case Dio_PORTA:
			if(GET_BIT(DDRA,PinIndex)==1)
    4128:	ea e3       	ldi	r30, 0x3A	; 58
    412a:	f0 e0       	ldi	r31, 0x00	; 0
    412c:	80 81       	ld	r24, Z
    412e:	48 2f       	mov	r20, r24
    4130:	50 e0       	ldi	r21, 0x00	; 0
    4132:	89 81       	ldd	r24, Y+1	; 0x01
    4134:	28 2f       	mov	r18, r24
    4136:	30 e0       	ldi	r19, 0x00	; 0
    4138:	81 e0       	ldi	r24, 0x01	; 1
    413a:	90 e0       	ldi	r25, 0x00	; 0
    413c:	02 c0       	rjmp	.+4      	; 0x4142 <Dio_enuReadChannel+0xb0>
    413e:	88 0f       	add	r24, r24
    4140:	99 1f       	adc	r25, r25
    4142:	2a 95       	dec	r18
    4144:	e2 f7       	brpl	.-8      	; 0x413e <Dio_enuReadChannel+0xac>
    4146:	9a 01       	movw	r18, r20
    4148:	28 23       	and	r18, r24
    414a:	39 23       	and	r19, r25
    414c:	89 81       	ldd	r24, Y+1	; 0x01
    414e:	88 2f       	mov	r24, r24
    4150:	90 e0       	ldi	r25, 0x00	; 0
    4152:	a9 01       	movw	r20, r18
    4154:	02 c0       	rjmp	.+4      	; 0x415a <Dio_enuReadChannel+0xc8>
    4156:	55 95       	asr	r21
    4158:	47 95       	ror	r20
    415a:	8a 95       	dec	r24
    415c:	e2 f7       	brpl	.-8      	; 0x4156 <Dio_enuReadChannel+0xc4>
    415e:	ca 01       	movw	r24, r20
    4160:	81 30       	cpi	r24, 0x01	; 1
    4162:	91 05       	cpc	r25, r1
    4164:	19 f4       	brne	.+6      	; 0x416c <Dio_enuReadChannel+0xda>
				ErrorStatus=DIO_enuDirectionError;
    4166:	83 e0       	ldi	r24, 0x03	; 3
    4168:	8b 83       	std	Y+3, r24	; 0x03
    416a:	e5 c0       	rjmp	.+458    	; 0x4336 <Dio_enuReadChannel+0x2a4>
			else
			*Add_pu8ChannelLevel=GET_BIT(PINA,PinIndex);
    416c:	e9 e3       	ldi	r30, 0x39	; 57
    416e:	f0 e0       	ldi	r31, 0x00	; 0
    4170:	80 81       	ld	r24, Z
    4172:	48 2f       	mov	r20, r24
    4174:	50 e0       	ldi	r21, 0x00	; 0
    4176:	89 81       	ldd	r24, Y+1	; 0x01
    4178:	28 2f       	mov	r18, r24
    417a:	30 e0       	ldi	r19, 0x00	; 0
    417c:	81 e0       	ldi	r24, 0x01	; 1
    417e:	90 e0       	ldi	r25, 0x00	; 0
    4180:	02 c0       	rjmp	.+4      	; 0x4186 <Dio_enuReadChannel+0xf4>
    4182:	88 0f       	add	r24, r24
    4184:	99 1f       	adc	r25, r25
    4186:	2a 95       	dec	r18
    4188:	e2 f7       	brpl	.-8      	; 0x4182 <Dio_enuReadChannel+0xf0>
    418a:	9a 01       	movw	r18, r20
    418c:	28 23       	and	r18, r24
    418e:	39 23       	and	r19, r25
    4190:	89 81       	ldd	r24, Y+1	; 0x01
    4192:	88 2f       	mov	r24, r24
    4194:	90 e0       	ldi	r25, 0x00	; 0
    4196:	a9 01       	movw	r20, r18
    4198:	02 c0       	rjmp	.+4      	; 0x419e <Dio_enuReadChannel+0x10c>
    419a:	55 95       	asr	r21
    419c:	47 95       	ror	r20
    419e:	8a 95       	dec	r24
    41a0:	e2 f7       	brpl	.-8      	; 0x419a <Dio_enuReadChannel+0x108>
    41a2:	ca 01       	movw	r24, r20
    41a4:	ed 81       	ldd	r30, Y+5	; 0x05
    41a6:	fe 81       	ldd	r31, Y+6	; 0x06
    41a8:	80 83       	st	Z, r24
    41aa:	c5 c0       	rjmp	.+394    	; 0x4336 <Dio_enuReadChannel+0x2a4>

			break;
		case Dio_PORTB:
			if(GET_BIT(DDRB,PinIndex)==1)
    41ac:	e7 e3       	ldi	r30, 0x37	; 55
    41ae:	f0 e0       	ldi	r31, 0x00	; 0
    41b0:	80 81       	ld	r24, Z
    41b2:	48 2f       	mov	r20, r24
    41b4:	50 e0       	ldi	r21, 0x00	; 0
    41b6:	89 81       	ldd	r24, Y+1	; 0x01
    41b8:	28 2f       	mov	r18, r24
    41ba:	30 e0       	ldi	r19, 0x00	; 0
    41bc:	81 e0       	ldi	r24, 0x01	; 1
    41be:	90 e0       	ldi	r25, 0x00	; 0
    41c0:	02 c0       	rjmp	.+4      	; 0x41c6 <Dio_enuReadChannel+0x134>
    41c2:	88 0f       	add	r24, r24
    41c4:	99 1f       	adc	r25, r25
    41c6:	2a 95       	dec	r18
    41c8:	e2 f7       	brpl	.-8      	; 0x41c2 <Dio_enuReadChannel+0x130>
    41ca:	9a 01       	movw	r18, r20
    41cc:	28 23       	and	r18, r24
    41ce:	39 23       	and	r19, r25
    41d0:	89 81       	ldd	r24, Y+1	; 0x01
    41d2:	88 2f       	mov	r24, r24
    41d4:	90 e0       	ldi	r25, 0x00	; 0
    41d6:	a9 01       	movw	r20, r18
    41d8:	02 c0       	rjmp	.+4      	; 0x41de <Dio_enuReadChannel+0x14c>
    41da:	55 95       	asr	r21
    41dc:	47 95       	ror	r20
    41de:	8a 95       	dec	r24
    41e0:	e2 f7       	brpl	.-8      	; 0x41da <Dio_enuReadChannel+0x148>
    41e2:	ca 01       	movw	r24, r20
    41e4:	81 30       	cpi	r24, 0x01	; 1
    41e6:	91 05       	cpc	r25, r1
    41e8:	19 f4       	brne	.+6      	; 0x41f0 <Dio_enuReadChannel+0x15e>
				ErrorStatus=DIO_enuDirectionError;
    41ea:	83 e0       	ldi	r24, 0x03	; 3
    41ec:	8b 83       	std	Y+3, r24	; 0x03
    41ee:	a3 c0       	rjmp	.+326    	; 0x4336 <Dio_enuReadChannel+0x2a4>
			else
			*Add_pu8ChannelLevel=GET_BIT(PINB,PinIndex);
    41f0:	e6 e3       	ldi	r30, 0x36	; 54
    41f2:	f0 e0       	ldi	r31, 0x00	; 0
    41f4:	80 81       	ld	r24, Z
    41f6:	48 2f       	mov	r20, r24
    41f8:	50 e0       	ldi	r21, 0x00	; 0
    41fa:	89 81       	ldd	r24, Y+1	; 0x01
    41fc:	28 2f       	mov	r18, r24
    41fe:	30 e0       	ldi	r19, 0x00	; 0
    4200:	81 e0       	ldi	r24, 0x01	; 1
    4202:	90 e0       	ldi	r25, 0x00	; 0
    4204:	02 c0       	rjmp	.+4      	; 0x420a <Dio_enuReadChannel+0x178>
    4206:	88 0f       	add	r24, r24
    4208:	99 1f       	adc	r25, r25
    420a:	2a 95       	dec	r18
    420c:	e2 f7       	brpl	.-8      	; 0x4206 <Dio_enuReadChannel+0x174>
    420e:	9a 01       	movw	r18, r20
    4210:	28 23       	and	r18, r24
    4212:	39 23       	and	r19, r25
    4214:	89 81       	ldd	r24, Y+1	; 0x01
    4216:	88 2f       	mov	r24, r24
    4218:	90 e0       	ldi	r25, 0x00	; 0
    421a:	a9 01       	movw	r20, r18
    421c:	02 c0       	rjmp	.+4      	; 0x4222 <Dio_enuReadChannel+0x190>
    421e:	55 95       	asr	r21
    4220:	47 95       	ror	r20
    4222:	8a 95       	dec	r24
    4224:	e2 f7       	brpl	.-8      	; 0x421e <Dio_enuReadChannel+0x18c>
    4226:	ca 01       	movw	r24, r20
    4228:	ed 81       	ldd	r30, Y+5	; 0x05
    422a:	fe 81       	ldd	r31, Y+6	; 0x06
    422c:	80 83       	st	Z, r24
    422e:	83 c0       	rjmp	.+262    	; 0x4336 <Dio_enuReadChannel+0x2a4>

			break;
		case Dio_PORTC:
			if(GET_BIT(DDRC,PinIndex)==1)
    4230:	e4 e3       	ldi	r30, 0x34	; 52
    4232:	f0 e0       	ldi	r31, 0x00	; 0
    4234:	80 81       	ld	r24, Z
    4236:	48 2f       	mov	r20, r24
    4238:	50 e0       	ldi	r21, 0x00	; 0
    423a:	89 81       	ldd	r24, Y+1	; 0x01
    423c:	28 2f       	mov	r18, r24
    423e:	30 e0       	ldi	r19, 0x00	; 0
    4240:	81 e0       	ldi	r24, 0x01	; 1
    4242:	90 e0       	ldi	r25, 0x00	; 0
    4244:	02 c0       	rjmp	.+4      	; 0x424a <Dio_enuReadChannel+0x1b8>
    4246:	88 0f       	add	r24, r24
    4248:	99 1f       	adc	r25, r25
    424a:	2a 95       	dec	r18
    424c:	e2 f7       	brpl	.-8      	; 0x4246 <Dio_enuReadChannel+0x1b4>
    424e:	9a 01       	movw	r18, r20
    4250:	28 23       	and	r18, r24
    4252:	39 23       	and	r19, r25
    4254:	89 81       	ldd	r24, Y+1	; 0x01
    4256:	88 2f       	mov	r24, r24
    4258:	90 e0       	ldi	r25, 0x00	; 0
    425a:	a9 01       	movw	r20, r18
    425c:	02 c0       	rjmp	.+4      	; 0x4262 <Dio_enuReadChannel+0x1d0>
    425e:	55 95       	asr	r21
    4260:	47 95       	ror	r20
    4262:	8a 95       	dec	r24
    4264:	e2 f7       	brpl	.-8      	; 0x425e <Dio_enuReadChannel+0x1cc>
    4266:	ca 01       	movw	r24, r20
    4268:	81 30       	cpi	r24, 0x01	; 1
    426a:	91 05       	cpc	r25, r1
    426c:	19 f4       	brne	.+6      	; 0x4274 <Dio_enuReadChannel+0x1e2>
				ErrorStatus=DIO_enuDirectionError;
    426e:	83 e0       	ldi	r24, 0x03	; 3
    4270:	8b 83       	std	Y+3, r24	; 0x03
    4272:	61 c0       	rjmp	.+194    	; 0x4336 <Dio_enuReadChannel+0x2a4>
			else
			*Add_pu8ChannelLevel=GET_BIT(PINC,PinIndex);
    4274:	e3 e3       	ldi	r30, 0x33	; 51
    4276:	f0 e0       	ldi	r31, 0x00	; 0
    4278:	80 81       	ld	r24, Z
    427a:	48 2f       	mov	r20, r24
    427c:	50 e0       	ldi	r21, 0x00	; 0
    427e:	89 81       	ldd	r24, Y+1	; 0x01
    4280:	28 2f       	mov	r18, r24
    4282:	30 e0       	ldi	r19, 0x00	; 0
    4284:	81 e0       	ldi	r24, 0x01	; 1
    4286:	90 e0       	ldi	r25, 0x00	; 0
    4288:	02 c0       	rjmp	.+4      	; 0x428e <Dio_enuReadChannel+0x1fc>
    428a:	88 0f       	add	r24, r24
    428c:	99 1f       	adc	r25, r25
    428e:	2a 95       	dec	r18
    4290:	e2 f7       	brpl	.-8      	; 0x428a <Dio_enuReadChannel+0x1f8>
    4292:	9a 01       	movw	r18, r20
    4294:	28 23       	and	r18, r24
    4296:	39 23       	and	r19, r25
    4298:	89 81       	ldd	r24, Y+1	; 0x01
    429a:	88 2f       	mov	r24, r24
    429c:	90 e0       	ldi	r25, 0x00	; 0
    429e:	a9 01       	movw	r20, r18
    42a0:	02 c0       	rjmp	.+4      	; 0x42a6 <Dio_enuReadChannel+0x214>
    42a2:	55 95       	asr	r21
    42a4:	47 95       	ror	r20
    42a6:	8a 95       	dec	r24
    42a8:	e2 f7       	brpl	.-8      	; 0x42a2 <Dio_enuReadChannel+0x210>
    42aa:	ca 01       	movw	r24, r20
    42ac:	ed 81       	ldd	r30, Y+5	; 0x05
    42ae:	fe 81       	ldd	r31, Y+6	; 0x06
    42b0:	80 83       	st	Z, r24
    42b2:	41 c0       	rjmp	.+130    	; 0x4336 <Dio_enuReadChannel+0x2a4>

			break;
		case Dio_PORTD:
			if(GET_BIT(DDRD,PinIndex)==1)
    42b4:	e1 e3       	ldi	r30, 0x31	; 49
    42b6:	f0 e0       	ldi	r31, 0x00	; 0
    42b8:	80 81       	ld	r24, Z
    42ba:	48 2f       	mov	r20, r24
    42bc:	50 e0       	ldi	r21, 0x00	; 0
    42be:	89 81       	ldd	r24, Y+1	; 0x01
    42c0:	28 2f       	mov	r18, r24
    42c2:	30 e0       	ldi	r19, 0x00	; 0
    42c4:	81 e0       	ldi	r24, 0x01	; 1
    42c6:	90 e0       	ldi	r25, 0x00	; 0
    42c8:	02 c0       	rjmp	.+4      	; 0x42ce <Dio_enuReadChannel+0x23c>
    42ca:	88 0f       	add	r24, r24
    42cc:	99 1f       	adc	r25, r25
    42ce:	2a 95       	dec	r18
    42d0:	e2 f7       	brpl	.-8      	; 0x42ca <Dio_enuReadChannel+0x238>
    42d2:	9a 01       	movw	r18, r20
    42d4:	28 23       	and	r18, r24
    42d6:	39 23       	and	r19, r25
    42d8:	89 81       	ldd	r24, Y+1	; 0x01
    42da:	88 2f       	mov	r24, r24
    42dc:	90 e0       	ldi	r25, 0x00	; 0
    42de:	a9 01       	movw	r20, r18
    42e0:	02 c0       	rjmp	.+4      	; 0x42e6 <Dio_enuReadChannel+0x254>
    42e2:	55 95       	asr	r21
    42e4:	47 95       	ror	r20
    42e6:	8a 95       	dec	r24
    42e8:	e2 f7       	brpl	.-8      	; 0x42e2 <Dio_enuReadChannel+0x250>
    42ea:	ca 01       	movw	r24, r20
    42ec:	81 30       	cpi	r24, 0x01	; 1
    42ee:	91 05       	cpc	r25, r1
    42f0:	19 f4       	brne	.+6      	; 0x42f8 <Dio_enuReadChannel+0x266>
				ErrorStatus=DIO_enuDirectionError;
    42f2:	83 e0       	ldi	r24, 0x03	; 3
    42f4:	8b 83       	std	Y+3, r24	; 0x03
    42f6:	1f c0       	rjmp	.+62     	; 0x4336 <Dio_enuReadChannel+0x2a4>
			else
			*Add_pu8ChannelLevel=GET_BIT(PIND,PinIndex);
    42f8:	e0 e3       	ldi	r30, 0x30	; 48
    42fa:	f0 e0       	ldi	r31, 0x00	; 0
    42fc:	80 81       	ld	r24, Z
    42fe:	48 2f       	mov	r20, r24
    4300:	50 e0       	ldi	r21, 0x00	; 0
    4302:	89 81       	ldd	r24, Y+1	; 0x01
    4304:	28 2f       	mov	r18, r24
    4306:	30 e0       	ldi	r19, 0x00	; 0
    4308:	81 e0       	ldi	r24, 0x01	; 1
    430a:	90 e0       	ldi	r25, 0x00	; 0
    430c:	02 c0       	rjmp	.+4      	; 0x4312 <Dio_enuReadChannel+0x280>
    430e:	88 0f       	add	r24, r24
    4310:	99 1f       	adc	r25, r25
    4312:	2a 95       	dec	r18
    4314:	e2 f7       	brpl	.-8      	; 0x430e <Dio_enuReadChannel+0x27c>
    4316:	9a 01       	movw	r18, r20
    4318:	28 23       	and	r18, r24
    431a:	39 23       	and	r19, r25
    431c:	89 81       	ldd	r24, Y+1	; 0x01
    431e:	88 2f       	mov	r24, r24
    4320:	90 e0       	ldi	r25, 0x00	; 0
    4322:	a9 01       	movw	r20, r18
    4324:	02 c0       	rjmp	.+4      	; 0x432a <Dio_enuReadChannel+0x298>
    4326:	55 95       	asr	r21
    4328:	47 95       	ror	r20
    432a:	8a 95       	dec	r24
    432c:	e2 f7       	brpl	.-8      	; 0x4326 <Dio_enuReadChannel+0x294>
    432e:	ca 01       	movw	r24, r20
    4330:	ed 81       	ldd	r30, Y+5	; 0x05
    4332:	fe 81       	ldd	r31, Y+6	; 0x06
    4334:	80 83       	st	Z, r24

			break;
		}
		return ErrorStatus;
    4336:	8b 81       	ldd	r24, Y+3	; 0x03

}
    4338:	28 96       	adiw	r28, 0x08	; 8
    433a:	0f b6       	in	r0, 0x3f	; 63
    433c:	f8 94       	cli
    433e:	de bf       	out	0x3e, r29	; 62
    4340:	0f be       	out	0x3f, r0	; 63
    4342:	cd bf       	out	0x3d, r28	; 61
    4344:	cf 91       	pop	r28
    4346:	df 91       	pop	r29
    4348:	08 95       	ret

0000434a <Dio_enuWritePort>:
 * Parameters(IN)  : 1.Copy_u8PortlId -->port number
 *                   2.Copy_u8Level     --> High or LOW
 * Parameters(OUT) : value of enum type PORT_tenuErrorStatus
 *******************************************************************************************/
Dio_tenuErrorStatus Dio_enuWritePort(DioPinType Copy_u8PortlId,DioPinType Copy_u8Level)
{
    434a:	df 93       	push	r29
    434c:	cf 93       	push	r28
    434e:	cd b7       	in	r28, 0x3d	; 61
    4350:	de b7       	in	r29, 0x3e	; 62
    4352:	29 97       	sbiw	r28, 0x09	; 9
    4354:	0f b6       	in	r0, 0x3f	; 63
    4356:	f8 94       	cli
    4358:	de bf       	out	0x3e, r29	; 62
    435a:	0f be       	out	0x3f, r0	; 63
    435c:	cd bf       	out	0x3d, r28	; 61
    435e:	8a 83       	std	Y+2, r24	; 0x02
    4360:	6b 83       	std	Y+3, r22	; 0x03
	uint8 ErrorStatus=Dio_enuOK;
    4362:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortlId>DIO_NUMBER_OF_PORTS)
    4364:	8a 81       	ldd	r24, Y+2	; 0x02
    4366:	85 30       	cpi	r24, 0x05	; 5
    4368:	10 f0       	brcs	.+4      	; 0x436e <Dio_enuWritePort+0x24>
			{
				ErrorStatus=Dio_enuPortError;
    436a:	82 e0       	ldi	r24, 0x02	; 2
    436c:	89 83       	std	Y+1, r24	; 0x01
			}
	switch(Copy_u8PortlId)
    436e:	8a 81       	ldd	r24, Y+2	; 0x02
    4370:	28 2f       	mov	r18, r24
    4372:	30 e0       	ldi	r19, 0x00	; 0
    4374:	39 87       	std	Y+9, r19	; 0x09
    4376:	28 87       	std	Y+8, r18	; 0x08
    4378:	88 85       	ldd	r24, Y+8	; 0x08
    437a:	99 85       	ldd	r25, Y+9	; 0x09
    437c:	81 30       	cpi	r24, 0x01	; 1
    437e:	91 05       	cpc	r25, r1
    4380:	e9 f0       	breq	.+58     	; 0x43bc <Dio_enuWritePort+0x72>
    4382:	28 85       	ldd	r18, Y+8	; 0x08
    4384:	39 85       	ldd	r19, Y+9	; 0x09
    4386:	22 30       	cpi	r18, 0x02	; 2
    4388:	31 05       	cpc	r19, r1
    438a:	2c f4       	brge	.+10     	; 0x4396 <Dio_enuWritePort+0x4c>
    438c:	88 85       	ldd	r24, Y+8	; 0x08
    438e:	99 85       	ldd	r25, Y+9	; 0x09
    4390:	00 97       	sbiw	r24, 0x00	; 0
    4392:	61 f0       	breq	.+24     	; 0x43ac <Dio_enuWritePort+0x62>
    4394:	2a c0       	rjmp	.+84     	; 0x43ea <Dio_enuWritePort+0xa0>
    4396:	28 85       	ldd	r18, Y+8	; 0x08
    4398:	39 85       	ldd	r19, Y+9	; 0x09
    439a:	22 30       	cpi	r18, 0x02	; 2
    439c:	31 05       	cpc	r19, r1
    439e:	b1 f0       	breq	.+44     	; 0x43cc <Dio_enuWritePort+0x82>
    43a0:	88 85       	ldd	r24, Y+8	; 0x08
    43a2:	99 85       	ldd	r25, Y+9	; 0x09
    43a4:	83 30       	cpi	r24, 0x03	; 3
    43a6:	91 05       	cpc	r25, r1
    43a8:	c9 f0       	breq	.+50     	; 0x43dc <Dio_enuWritePort+0x92>
    43aa:	1f c0       	rjmp	.+62     	; 0x43ea <Dio_enuWritePort+0xa0>
			{
			case Dio_PORTA:
				ASSIGN_REG(PORTA,Copy_u8Level);
    43ac:	eb e3       	ldi	r30, 0x3B	; 59
    43ae:	f0 e0       	ldi	r31, 0x00	; 0
    43b0:	90 81       	ld	r25, Z
    43b2:	eb e3       	ldi	r30, 0x3B	; 59
    43b4:	f0 e0       	ldi	r31, 0x00	; 0
    43b6:	8b 81       	ldd	r24, Y+3	; 0x03
    43b8:	80 83       	st	Z, r24
    43ba:	17 c0       	rjmp	.+46     	; 0x43ea <Dio_enuWritePort+0xa0>

				break;
			case Dio_PORTB:
				ASSIGN_REG(PORTB,Copy_u8Level);
    43bc:	e8 e3       	ldi	r30, 0x38	; 56
    43be:	f0 e0       	ldi	r31, 0x00	; 0
    43c0:	20 81       	ld	r18, Z
    43c2:	e8 e3       	ldi	r30, 0x38	; 56
    43c4:	f0 e0       	ldi	r31, 0x00	; 0
    43c6:	8b 81       	ldd	r24, Y+3	; 0x03
    43c8:	80 83       	st	Z, r24
    43ca:	0f c0       	rjmp	.+30     	; 0x43ea <Dio_enuWritePort+0xa0>

				break;
			case Dio_PORTC:
				ASSIGN_REG(PORTC,Copy_u8Level);
    43cc:	e5 e3       	ldi	r30, 0x35	; 53
    43ce:	f0 e0       	ldi	r31, 0x00	; 0
    43d0:	30 81       	ld	r19, Z
    43d2:	e5 e3       	ldi	r30, 0x35	; 53
    43d4:	f0 e0       	ldi	r31, 0x00	; 0
    43d6:	8b 81       	ldd	r24, Y+3	; 0x03
    43d8:	80 83       	st	Z, r24
    43da:	07 c0       	rjmp	.+14     	; 0x43ea <Dio_enuWritePort+0xa0>


				break;
			case Dio_PORTD:
				ASSIGN_REG(PORTD,Copy_u8Level);
    43dc:	e2 e3       	ldi	r30, 0x32	; 50
    43de:	f0 e0       	ldi	r31, 0x00	; 0
    43e0:	80 81       	ld	r24, Z
    43e2:	e2 e3       	ldi	r30, 0x32	; 50
    43e4:	f0 e0       	ldi	r31, 0x00	; 0
    43e6:	8b 81       	ldd	r24, Y+3	; 0x03
    43e8:	80 83       	st	Z, r24

				break;
			}
			return ErrorStatus;
    43ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    43ec:	29 96       	adiw	r28, 0x09	; 9
    43ee:	0f b6       	in	r0, 0x3f	; 63
    43f0:	f8 94       	cli
    43f2:	de bf       	out	0x3e, r29	; 62
    43f4:	0f be       	out	0x3f, r0	; 63
    43f6:	cd bf       	out	0x3d, r28	; 61
    43f8:	cf 91       	pop	r28
    43fa:	df 91       	pop	r29
    43fc:	08 95       	ret

000043fe <Dio_enuReadPort>:
 * Parameters(IN)  : 1.Copy_u8PortlId        -->port number
 *                   2.Add_pu8ChannelLevel     --> pointer to address of value carry
 * Parameters(OUT) : value of enum type PORT_tenuErrorStatus
 *******************************************************************************************/
Dio_tenuErrorStatus Dio_enuReadPort(DioPinType Copy_u8PortlId,pu8 Add_pu8PortLevel)
{
    43fe:	df 93       	push	r29
    4400:	cf 93       	push	r28
    4402:	00 d0       	rcall	.+0      	; 0x4404 <Dio_enuReadPort+0x6>
    4404:	00 d0       	rcall	.+0      	; 0x4406 <Dio_enuReadPort+0x8>
    4406:	00 d0       	rcall	.+0      	; 0x4408 <Dio_enuReadPort+0xa>
    4408:	cd b7       	in	r28, 0x3d	; 61
    440a:	de b7       	in	r29, 0x3e	; 62
    440c:	8a 83       	std	Y+2, r24	; 0x02
    440e:	7c 83       	std	Y+4, r23	; 0x04
    4410:	6b 83       	std	Y+3, r22	; 0x03
	uint8 ErrorStatus=Dio_enuOK;
    4412:	19 82       	std	Y+1, r1	; 0x01
		if(Copy_u8PortlId>DIO_NUMBER_OF_PORTS)
    4414:	8a 81       	ldd	r24, Y+2	; 0x02
    4416:	85 30       	cpi	r24, 0x05	; 5
    4418:	10 f0       	brcs	.+4      	; 0x441e <Dio_enuReadPort+0x20>
				{
					ErrorStatus=Dio_enuPortError;
    441a:	82 e0       	ldi	r24, 0x02	; 2
    441c:	89 83       	std	Y+1, r24	; 0x01
				}
		if( Add_pu8PortLevel ==Null_ptr)
    441e:	8b 81       	ldd	r24, Y+3	; 0x03
    4420:	9c 81       	ldd	r25, Y+4	; 0x04
    4422:	00 97       	sbiw	r24, 0x00	; 0
    4424:	11 f4       	brne	.+4      	; 0x442a <Dio_enuReadPort+0x2c>
				{
					ErrorStatus=DIO_enuNullPtr;
    4426:	84 e0       	ldi	r24, 0x04	; 4
    4428:	89 83       	std	Y+1, r24	; 0x01
				}
		switch(Copy_u8PortlId)
    442a:	8a 81       	ldd	r24, Y+2	; 0x02
    442c:	28 2f       	mov	r18, r24
    442e:	30 e0       	ldi	r19, 0x00	; 0
    4430:	3e 83       	std	Y+6, r19	; 0x06
    4432:	2d 83       	std	Y+5, r18	; 0x05
    4434:	8d 81       	ldd	r24, Y+5	; 0x05
    4436:	9e 81       	ldd	r25, Y+6	; 0x06
    4438:	81 30       	cpi	r24, 0x01	; 1
    443a:	91 05       	cpc	r25, r1
    443c:	e1 f0       	breq	.+56     	; 0x4476 <Dio_enuReadPort+0x78>
    443e:	2d 81       	ldd	r18, Y+5	; 0x05
    4440:	3e 81       	ldd	r19, Y+6	; 0x06
    4442:	22 30       	cpi	r18, 0x02	; 2
    4444:	31 05       	cpc	r19, r1
    4446:	2c f4       	brge	.+10     	; 0x4452 <Dio_enuReadPort+0x54>
    4448:	8d 81       	ldd	r24, Y+5	; 0x05
    444a:	9e 81       	ldd	r25, Y+6	; 0x06
    444c:	00 97       	sbiw	r24, 0x00	; 0
    444e:	61 f0       	breq	.+24     	; 0x4468 <Dio_enuReadPort+0x6a>
    4450:	26 c0       	rjmp	.+76     	; 0x449e <Dio_enuReadPort+0xa0>
    4452:	2d 81       	ldd	r18, Y+5	; 0x05
    4454:	3e 81       	ldd	r19, Y+6	; 0x06
    4456:	22 30       	cpi	r18, 0x02	; 2
    4458:	31 05       	cpc	r19, r1
    445a:	a1 f0       	breq	.+40     	; 0x4484 <Dio_enuReadPort+0x86>
    445c:	8d 81       	ldd	r24, Y+5	; 0x05
    445e:	9e 81       	ldd	r25, Y+6	; 0x06
    4460:	83 30       	cpi	r24, 0x03	; 3
    4462:	91 05       	cpc	r25, r1
    4464:	b1 f0       	breq	.+44     	; 0x4492 <Dio_enuReadPort+0x94>
    4466:	1b c0       	rjmp	.+54     	; 0x449e <Dio_enuReadPort+0xa0>
				{
				case Dio_PORTA:
					*Add_pu8PortLevel=PINA;
    4468:	e9 e3       	ldi	r30, 0x39	; 57
    446a:	f0 e0       	ldi	r31, 0x00	; 0
    446c:	80 81       	ld	r24, Z
    446e:	eb 81       	ldd	r30, Y+3	; 0x03
    4470:	fc 81       	ldd	r31, Y+4	; 0x04
    4472:	80 83       	st	Z, r24
    4474:	14 c0       	rjmp	.+40     	; 0x449e <Dio_enuReadPort+0xa0>
					break;
				case Dio_PORTB:
					*Add_pu8PortLevel=PINB;
    4476:	e6 e3       	ldi	r30, 0x36	; 54
    4478:	f0 e0       	ldi	r31, 0x00	; 0
    447a:	80 81       	ld	r24, Z
    447c:	eb 81       	ldd	r30, Y+3	; 0x03
    447e:	fc 81       	ldd	r31, Y+4	; 0x04
    4480:	80 83       	st	Z, r24
    4482:	0d c0       	rjmp	.+26     	; 0x449e <Dio_enuReadPort+0xa0>

					break;
				case Dio_PORTC:
					*Add_pu8PortLevel=PINC;
    4484:	e3 e3       	ldi	r30, 0x33	; 51
    4486:	f0 e0       	ldi	r31, 0x00	; 0
    4488:	80 81       	ld	r24, Z
    448a:	eb 81       	ldd	r30, Y+3	; 0x03
    448c:	fc 81       	ldd	r31, Y+4	; 0x04
    448e:	80 83       	st	Z, r24
    4490:	06 c0       	rjmp	.+12     	; 0x449e <Dio_enuReadPort+0xa0>


					break;
				case Dio_PORTD:
					*Add_pu8PortLevel=PIND;
    4492:	e0 e3       	ldi	r30, 0x30	; 48
    4494:	f0 e0       	ldi	r31, 0x00	; 0
    4496:	80 81       	ld	r24, Z
    4498:	eb 81       	ldd	r30, Y+3	; 0x03
    449a:	fc 81       	ldd	r31, Y+4	; 0x04
    449c:	80 83       	st	Z, r24

					break;
				}
				return ErrorStatus;
    449e:	89 81       	ldd	r24, Y+1	; 0x01
}
    44a0:	26 96       	adiw	r28, 0x06	; 6
    44a2:	0f b6       	in	r0, 0x3f	; 63
    44a4:	f8 94       	cli
    44a6:	de bf       	out	0x3e, r29	; 62
    44a8:	0f be       	out	0x3f, r0	; 63
    44aa:	cd bf       	out	0x3d, r28	; 61
    44ac:	cf 91       	pop	r28
    44ae:	df 91       	pop	r29
    44b0:	08 95       	ret

000044b2 <Dio_eneFlipChannel>:
 * Description     : Function responsible for flip pin
 * Parameters(IN)  : 1.Copy_u8ChannelId -->pin number
 * Parameters(OUT) : value of enum type PORT_tenuErrorStatus
 *******************************************************************************************/
Dio_tenuErrorStatus Dio_eneFlipChannel(DioPinType Copy_u8ChannelId)
{
    44b2:	df 93       	push	r29
    44b4:	cf 93       	push	r28
    44b6:	00 d0       	rcall	.+0      	; 0x44b8 <Dio_eneFlipChannel+0x6>
    44b8:	00 d0       	rcall	.+0      	; 0x44ba <Dio_eneFlipChannel+0x8>
    44ba:	00 d0       	rcall	.+0      	; 0x44bc <Dio_eneFlipChannel+0xa>
    44bc:	cd b7       	in	r28, 0x3d	; 61
    44be:	de b7       	in	r29, 0x3e	; 62
    44c0:	8c 83       	std	Y+4, r24	; 0x04
	uint8 ErrorStatus=Dio_enuOK;
    44c2:	1b 82       	std	Y+3, r1	; 0x03
			uint8 PortIndex=0,PinIndex=0;
    44c4:	1a 82       	std	Y+2, r1	; 0x02
    44c6:	19 82       	std	Y+1, r1	; 0x01
			PortIndex=(Copy_u8ChannelId/8);
    44c8:	8c 81       	ldd	r24, Y+4	; 0x04
    44ca:	86 95       	lsr	r24
    44cc:	86 95       	lsr	r24
    44ce:	86 95       	lsr	r24
    44d0:	8a 83       	std	Y+2, r24	; 0x02
			PinIndex=Copy_u8ChannelId%8;
    44d2:	8c 81       	ldd	r24, Y+4	; 0x04
    44d4:	87 70       	andi	r24, 0x07	; 7
    44d6:	89 83       	std	Y+1, r24	; 0x01
			if(Copy_u8ChannelId>DIO_NUMBER_OF_PINS)
    44d8:	8c 81       	ldd	r24, Y+4	; 0x04
    44da:	81 32       	cpi	r24, 0x21	; 33
    44dc:	10 f0       	brcs	.+4      	; 0x44e2 <Dio_eneFlipChannel+0x30>
			{
				ErrorStatus=Dio_enuPinError;
    44de:	81 e0       	ldi	r24, 0x01	; 1
    44e0:	8b 83       	std	Y+3, r24	; 0x03
			}
			if(PortIndex>DIO_NUMBER_OF_PORTS)
    44e2:	8a 81       	ldd	r24, Y+2	; 0x02
    44e4:	85 30       	cpi	r24, 0x05	; 5
    44e6:	10 f0       	brcs	.+4      	; 0x44ec <Dio_eneFlipChannel+0x3a>
			{
				ErrorStatus=Dio_enuPortError;
    44e8:	82 e0       	ldi	r24, 0x02	; 2
    44ea:	8b 83       	std	Y+3, r24	; 0x03
			}
			switch(PortIndex)
    44ec:	8a 81       	ldd	r24, Y+2	; 0x02
    44ee:	28 2f       	mov	r18, r24
    44f0:	30 e0       	ldi	r19, 0x00	; 0
    44f2:	3e 83       	std	Y+6, r19	; 0x06
    44f4:	2d 83       	std	Y+5, r18	; 0x05
    44f6:	8d 81       	ldd	r24, Y+5	; 0x05
    44f8:	9e 81       	ldd	r25, Y+6	; 0x06
    44fa:	81 30       	cpi	r24, 0x01	; 1
    44fc:	91 05       	cpc	r25, r1
    44fe:	49 f1       	breq	.+82     	; 0x4552 <Dio_eneFlipChannel+0xa0>
    4500:	2d 81       	ldd	r18, Y+5	; 0x05
    4502:	3e 81       	ldd	r19, Y+6	; 0x06
    4504:	22 30       	cpi	r18, 0x02	; 2
    4506:	31 05       	cpc	r19, r1
    4508:	2c f4       	brge	.+10     	; 0x4514 <Dio_eneFlipChannel+0x62>
    450a:	8d 81       	ldd	r24, Y+5	; 0x05
    450c:	9e 81       	ldd	r25, Y+6	; 0x06
    450e:	00 97       	sbiw	r24, 0x00	; 0
    4510:	61 f0       	breq	.+24     	; 0x452a <Dio_eneFlipChannel+0x78>
    4512:	5a c0       	rjmp	.+180    	; 0x45c8 <Dio_eneFlipChannel+0x116>
    4514:	2d 81       	ldd	r18, Y+5	; 0x05
    4516:	3e 81       	ldd	r19, Y+6	; 0x06
    4518:	22 30       	cpi	r18, 0x02	; 2
    451a:	31 05       	cpc	r19, r1
    451c:	71 f1       	breq	.+92     	; 0x457a <Dio_eneFlipChannel+0xc8>
    451e:	8d 81       	ldd	r24, Y+5	; 0x05
    4520:	9e 81       	ldd	r25, Y+6	; 0x06
    4522:	83 30       	cpi	r24, 0x03	; 3
    4524:	91 05       	cpc	r25, r1
    4526:	e9 f1       	breq	.+122    	; 0x45a2 <Dio_eneFlipChannel+0xf0>
    4528:	4f c0       	rjmp	.+158    	; 0x45c8 <Dio_eneFlipChannel+0x116>
					{
					case Dio_PORTA:
						TOGGLE_BIT(DDRA,PinIndex);
    452a:	aa e3       	ldi	r26, 0x3A	; 58
    452c:	b0 e0       	ldi	r27, 0x00	; 0
    452e:	ea e3       	ldi	r30, 0x3A	; 58
    4530:	f0 e0       	ldi	r31, 0x00	; 0
    4532:	80 81       	ld	r24, Z
    4534:	48 2f       	mov	r20, r24
    4536:	89 81       	ldd	r24, Y+1	; 0x01
    4538:	28 2f       	mov	r18, r24
    453a:	30 e0       	ldi	r19, 0x00	; 0
    453c:	81 e0       	ldi	r24, 0x01	; 1
    453e:	90 e0       	ldi	r25, 0x00	; 0
    4540:	02 2e       	mov	r0, r18
    4542:	02 c0       	rjmp	.+4      	; 0x4548 <Dio_eneFlipChannel+0x96>
    4544:	88 0f       	add	r24, r24
    4546:	99 1f       	adc	r25, r25
    4548:	0a 94       	dec	r0
    454a:	e2 f7       	brpl	.-8      	; 0x4544 <Dio_eneFlipChannel+0x92>
    454c:	84 27       	eor	r24, r20
    454e:	8c 93       	st	X, r24
    4550:	3b c0       	rjmp	.+118    	; 0x45c8 <Dio_eneFlipChannel+0x116>

						break;
					case Dio_PORTB:
						TOGGLE_BIT(DDRB,PinIndex);
    4552:	a7 e3       	ldi	r26, 0x37	; 55
    4554:	b0 e0       	ldi	r27, 0x00	; 0
    4556:	e7 e3       	ldi	r30, 0x37	; 55
    4558:	f0 e0       	ldi	r31, 0x00	; 0
    455a:	80 81       	ld	r24, Z
    455c:	48 2f       	mov	r20, r24
    455e:	89 81       	ldd	r24, Y+1	; 0x01
    4560:	28 2f       	mov	r18, r24
    4562:	30 e0       	ldi	r19, 0x00	; 0
    4564:	81 e0       	ldi	r24, 0x01	; 1
    4566:	90 e0       	ldi	r25, 0x00	; 0
    4568:	02 2e       	mov	r0, r18
    456a:	02 c0       	rjmp	.+4      	; 0x4570 <Dio_eneFlipChannel+0xbe>
    456c:	88 0f       	add	r24, r24
    456e:	99 1f       	adc	r25, r25
    4570:	0a 94       	dec	r0
    4572:	e2 f7       	brpl	.-8      	; 0x456c <Dio_eneFlipChannel+0xba>
    4574:	84 27       	eor	r24, r20
    4576:	8c 93       	st	X, r24
    4578:	27 c0       	rjmp	.+78     	; 0x45c8 <Dio_eneFlipChannel+0x116>

						break;
					case Dio_PORTC:
						TOGGLE_BIT(DDRC,PinIndex);
    457a:	a4 e3       	ldi	r26, 0x34	; 52
    457c:	b0 e0       	ldi	r27, 0x00	; 0
    457e:	e4 e3       	ldi	r30, 0x34	; 52
    4580:	f0 e0       	ldi	r31, 0x00	; 0
    4582:	80 81       	ld	r24, Z
    4584:	48 2f       	mov	r20, r24
    4586:	89 81       	ldd	r24, Y+1	; 0x01
    4588:	28 2f       	mov	r18, r24
    458a:	30 e0       	ldi	r19, 0x00	; 0
    458c:	81 e0       	ldi	r24, 0x01	; 1
    458e:	90 e0       	ldi	r25, 0x00	; 0
    4590:	02 2e       	mov	r0, r18
    4592:	02 c0       	rjmp	.+4      	; 0x4598 <Dio_eneFlipChannel+0xe6>
    4594:	88 0f       	add	r24, r24
    4596:	99 1f       	adc	r25, r25
    4598:	0a 94       	dec	r0
    459a:	e2 f7       	brpl	.-8      	; 0x4594 <Dio_eneFlipChannel+0xe2>
    459c:	84 27       	eor	r24, r20
    459e:	8c 93       	st	X, r24
    45a0:	13 c0       	rjmp	.+38     	; 0x45c8 <Dio_eneFlipChannel+0x116>

						break;
					case Dio_PORTD:
						TOGGLE_BIT(DDRD,PinIndex);
    45a2:	a1 e3       	ldi	r26, 0x31	; 49
    45a4:	b0 e0       	ldi	r27, 0x00	; 0
    45a6:	e1 e3       	ldi	r30, 0x31	; 49
    45a8:	f0 e0       	ldi	r31, 0x00	; 0
    45aa:	80 81       	ld	r24, Z
    45ac:	48 2f       	mov	r20, r24
    45ae:	89 81       	ldd	r24, Y+1	; 0x01
    45b0:	28 2f       	mov	r18, r24
    45b2:	30 e0       	ldi	r19, 0x00	; 0
    45b4:	81 e0       	ldi	r24, 0x01	; 1
    45b6:	90 e0       	ldi	r25, 0x00	; 0
    45b8:	02 2e       	mov	r0, r18
    45ba:	02 c0       	rjmp	.+4      	; 0x45c0 <Dio_eneFlipChannel+0x10e>
    45bc:	88 0f       	add	r24, r24
    45be:	99 1f       	adc	r25, r25
    45c0:	0a 94       	dec	r0
    45c2:	e2 f7       	brpl	.-8      	; 0x45bc <Dio_eneFlipChannel+0x10a>
    45c4:	84 27       	eor	r24, r20
    45c6:	8c 93       	st	X, r24

						break;
					}
					return ErrorStatus;
    45c8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    45ca:	26 96       	adiw	r28, 0x06	; 6
    45cc:	0f b6       	in	r0, 0x3f	; 63
    45ce:	f8 94       	cli
    45d0:	de bf       	out	0x3e, r29	; 62
    45d2:	0f be       	out	0x3f, r0	; 63
    45d4:	cd bf       	out	0x3d, r28	; 61
    45d6:	cf 91       	pop	r28
    45d8:	df 91       	pop	r29
    45da:	08 95       	ret

000045dc <Lcd_Init>:
#include "../Includes/LCD_Cfg.h"
#include "../Includes/LCD_Prv.h"


void Lcd_Init(void)
{
    45dc:	df 93       	push	r29
    45de:	cf 93       	push	r28
    45e0:	cd b7       	in	r28, 0x3d	; 61
    45e2:	de b7       	in	r29, 0x3e	; 62
	//	_delay_ms(50);


#if(LCD_DATA_MODE==LCD_FOUR_BIT_MODE)
	Lcd_VidSendCommand(LCD_4_BIT_2_LINES_INIT1_COMMAND);
    45e4:	83 e3       	ldi	r24, 0x33	; 51
    45e6:	0e 94 04 23 	call	0x4608	; 0x4608 <Lcd_VidSendCommand>
	Lcd_VidSendCommand(LCD_4_BIT_2_LINES_INIT2_COMMAND);
    45ea:	82 e3       	ldi	r24, 0x32	; 50
    45ec:	0e 94 04 23 	call	0x4608	; 0x4608 <Lcd_VidSendCommand>
	Lcd_VidSendCommand(LCD_4_BIT_MODE_SELECTION);
    45f0:	88 e2       	ldi	r24, 0x28	; 40
    45f2:	0e 94 04 23 	call	0x4608	; 0x4608 <Lcd_VidSendCommand>
#elif(LCD_DATA_MODE==LCD_EIGHT_BIT_MODE)

	Lcd_VidSendCommand(LCD_8_BIT_MODE_SELECTION);

#endif
	Lcd_VidSendCommand(LCD_CURSOR_OFF_COMMAND);
    45f6:	8c e0       	ldi	r24, 0x0C	; 12
    45f8:	0e 94 04 23 	call	0x4608	; 0x4608 <Lcd_VidSendCommand>
	Lcd_VidSendCommand(LCD_CLEAR_SCREEN_COMMAND);
    45fc:	81 e0       	ldi	r24, 0x01	; 1
    45fe:	0e 94 04 23 	call	0x4608	; 0x4608 <Lcd_VidSendCommand>

}
    4602:	cf 91       	pop	r28
    4604:	df 91       	pop	r29
    4606:	08 95       	ret

00004608 <Lcd_VidSendCommand>:

void Lcd_VidSendCommand(uint8 Copy_u8Command)
{
    4608:	0f 93       	push	r16
    460a:	1f 93       	push	r17
    460c:	df 93       	push	r29
    460e:	cf 93       	push	r28
    4610:	cd b7       	in	r28, 0x3d	; 61
    4612:	de b7       	in	r29, 0x3e	; 62
    4614:	c3 56       	subi	r28, 0x63	; 99
    4616:	d0 40       	sbci	r29, 0x00	; 0
    4618:	0f b6       	in	r0, 0x3f	; 63
    461a:	f8 94       	cli
    461c:	de bf       	out	0x3e, r29	; 62
    461e:	0f be       	out	0x3f, r0	; 63
    4620:	cd bf       	out	0x3d, r28	; 61
    4622:	fe 01       	movw	r30, r28
    4624:	ed 59       	subi	r30, 0x9D	; 157
    4626:	ff 4f       	sbci	r31, 0xFF	; 255
    4628:	80 83       	st	Z, r24
	Dio_enuWriteChannel(LCD_RS_PIN_NUM,DIO_LOGIC_LOW);
    462a:	80 e1       	ldi	r24, 0x10	; 16
    462c:	60 e0       	ldi	r22, 0x00	; 0
    462e:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <Dio_enuWriteChannel>
    4632:	fe 01       	movw	r30, r28
    4634:	e1 5a       	subi	r30, 0xA1	; 161
    4636:	ff 4f       	sbci	r31, 0xFF	; 255
    4638:	80 e0       	ldi	r24, 0x00	; 0
    463a:	90 e0       	ldi	r25, 0x00	; 0
    463c:	a0 e8       	ldi	r26, 0x80	; 128
    463e:	bf e3       	ldi	r27, 0x3F	; 63
    4640:	80 83       	st	Z, r24
    4642:	91 83       	std	Z+1, r25	; 0x01
    4644:	a2 83       	std	Z+2, r26	; 0x02
    4646:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4648:	8e 01       	movw	r16, r28
    464a:	05 5a       	subi	r16, 0xA5	; 165
    464c:	1f 4f       	sbci	r17, 0xFF	; 255
    464e:	fe 01       	movw	r30, r28
    4650:	e1 5a       	subi	r30, 0xA1	; 161
    4652:	ff 4f       	sbci	r31, 0xFF	; 255
    4654:	60 81       	ld	r22, Z
    4656:	71 81       	ldd	r23, Z+1	; 0x01
    4658:	82 81       	ldd	r24, Z+2	; 0x02
    465a:	93 81       	ldd	r25, Z+3	; 0x03
    465c:	20 e0       	ldi	r18, 0x00	; 0
    465e:	30 e0       	ldi	r19, 0x00	; 0
    4660:	4a ef       	ldi	r20, 0xFA	; 250
    4662:	54 e4       	ldi	r21, 0x44	; 68
    4664:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4668:	dc 01       	movw	r26, r24
    466a:	cb 01       	movw	r24, r22
    466c:	f8 01       	movw	r30, r16
    466e:	80 83       	st	Z, r24
    4670:	91 83       	std	Z+1, r25	; 0x01
    4672:	a2 83       	std	Z+2, r26	; 0x02
    4674:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4676:	fe 01       	movw	r30, r28
    4678:	e5 5a       	subi	r30, 0xA5	; 165
    467a:	ff 4f       	sbci	r31, 0xFF	; 255
    467c:	60 81       	ld	r22, Z
    467e:	71 81       	ldd	r23, Z+1	; 0x01
    4680:	82 81       	ldd	r24, Z+2	; 0x02
    4682:	93 81       	ldd	r25, Z+3	; 0x03
    4684:	20 e0       	ldi	r18, 0x00	; 0
    4686:	30 e0       	ldi	r19, 0x00	; 0
    4688:	40 e8       	ldi	r20, 0x80	; 128
    468a:	5f e3       	ldi	r21, 0x3F	; 63
    468c:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    4690:	88 23       	and	r24, r24
    4692:	44 f4       	brge	.+16     	; 0x46a4 <Lcd_VidSendCommand+0x9c>
		__ticks = 1;
    4694:	fe 01       	movw	r30, r28
    4696:	e7 5a       	subi	r30, 0xA7	; 167
    4698:	ff 4f       	sbci	r31, 0xFF	; 255
    469a:	81 e0       	ldi	r24, 0x01	; 1
    469c:	90 e0       	ldi	r25, 0x00	; 0
    469e:	91 83       	std	Z+1, r25	; 0x01
    46a0:	80 83       	st	Z, r24
    46a2:	64 c0       	rjmp	.+200    	; 0x476c <Lcd_VidSendCommand+0x164>
	else if (__tmp > 65535)
    46a4:	fe 01       	movw	r30, r28
    46a6:	e5 5a       	subi	r30, 0xA5	; 165
    46a8:	ff 4f       	sbci	r31, 0xFF	; 255
    46aa:	60 81       	ld	r22, Z
    46ac:	71 81       	ldd	r23, Z+1	; 0x01
    46ae:	82 81       	ldd	r24, Z+2	; 0x02
    46b0:	93 81       	ldd	r25, Z+3	; 0x03
    46b2:	20 e0       	ldi	r18, 0x00	; 0
    46b4:	3f ef       	ldi	r19, 0xFF	; 255
    46b6:	4f e7       	ldi	r20, 0x7F	; 127
    46b8:	57 e4       	ldi	r21, 0x47	; 71
    46ba:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    46be:	18 16       	cp	r1, r24
    46c0:	0c f0       	brlt	.+2      	; 0x46c4 <Lcd_VidSendCommand+0xbc>
    46c2:	43 c0       	rjmp	.+134    	; 0x474a <Lcd_VidSendCommand+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46c4:	fe 01       	movw	r30, r28
    46c6:	e1 5a       	subi	r30, 0xA1	; 161
    46c8:	ff 4f       	sbci	r31, 0xFF	; 255
    46ca:	60 81       	ld	r22, Z
    46cc:	71 81       	ldd	r23, Z+1	; 0x01
    46ce:	82 81       	ldd	r24, Z+2	; 0x02
    46d0:	93 81       	ldd	r25, Z+3	; 0x03
    46d2:	20 e0       	ldi	r18, 0x00	; 0
    46d4:	30 e0       	ldi	r19, 0x00	; 0
    46d6:	40 e2       	ldi	r20, 0x20	; 32
    46d8:	51 e4       	ldi	r21, 0x41	; 65
    46da:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    46de:	dc 01       	movw	r26, r24
    46e0:	cb 01       	movw	r24, r22
    46e2:	8e 01       	movw	r16, r28
    46e4:	07 5a       	subi	r16, 0xA7	; 167
    46e6:	1f 4f       	sbci	r17, 0xFF	; 255
    46e8:	bc 01       	movw	r22, r24
    46ea:	cd 01       	movw	r24, r26
    46ec:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    46f0:	dc 01       	movw	r26, r24
    46f2:	cb 01       	movw	r24, r22
    46f4:	f8 01       	movw	r30, r16
    46f6:	91 83       	std	Z+1, r25	; 0x01
    46f8:	80 83       	st	Z, r24
    46fa:	1f c0       	rjmp	.+62     	; 0x473a <Lcd_VidSendCommand+0x132>
    46fc:	fe 01       	movw	r30, r28
    46fe:	e9 5a       	subi	r30, 0xA9	; 169
    4700:	ff 4f       	sbci	r31, 0xFF	; 255
    4702:	88 ec       	ldi	r24, 0xC8	; 200
    4704:	90 e0       	ldi	r25, 0x00	; 0
    4706:	91 83       	std	Z+1, r25	; 0x01
    4708:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    470a:	fe 01       	movw	r30, r28
    470c:	e9 5a       	subi	r30, 0xA9	; 169
    470e:	ff 4f       	sbci	r31, 0xFF	; 255
    4710:	80 81       	ld	r24, Z
    4712:	91 81       	ldd	r25, Z+1	; 0x01
    4714:	01 97       	sbiw	r24, 0x01	; 1
    4716:	f1 f7       	brne	.-4      	; 0x4714 <Lcd_VidSendCommand+0x10c>
    4718:	fe 01       	movw	r30, r28
    471a:	e9 5a       	subi	r30, 0xA9	; 169
    471c:	ff 4f       	sbci	r31, 0xFF	; 255
    471e:	91 83       	std	Z+1, r25	; 0x01
    4720:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4722:	de 01       	movw	r26, r28
    4724:	a7 5a       	subi	r26, 0xA7	; 167
    4726:	bf 4f       	sbci	r27, 0xFF	; 255
    4728:	fe 01       	movw	r30, r28
    472a:	e7 5a       	subi	r30, 0xA7	; 167
    472c:	ff 4f       	sbci	r31, 0xFF	; 255
    472e:	80 81       	ld	r24, Z
    4730:	91 81       	ldd	r25, Z+1	; 0x01
    4732:	01 97       	sbiw	r24, 0x01	; 1
    4734:	11 96       	adiw	r26, 0x01	; 1
    4736:	9c 93       	st	X, r25
    4738:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    473a:	fe 01       	movw	r30, r28
    473c:	e7 5a       	subi	r30, 0xA7	; 167
    473e:	ff 4f       	sbci	r31, 0xFF	; 255
    4740:	80 81       	ld	r24, Z
    4742:	91 81       	ldd	r25, Z+1	; 0x01
    4744:	00 97       	sbiw	r24, 0x00	; 0
    4746:	d1 f6       	brne	.-76     	; 0x46fc <Lcd_VidSendCommand+0xf4>
    4748:	27 c0       	rjmp	.+78     	; 0x4798 <Lcd_VidSendCommand+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    474a:	8e 01       	movw	r16, r28
    474c:	07 5a       	subi	r16, 0xA7	; 167
    474e:	1f 4f       	sbci	r17, 0xFF	; 255
    4750:	fe 01       	movw	r30, r28
    4752:	e5 5a       	subi	r30, 0xA5	; 165
    4754:	ff 4f       	sbci	r31, 0xFF	; 255
    4756:	60 81       	ld	r22, Z
    4758:	71 81       	ldd	r23, Z+1	; 0x01
    475a:	82 81       	ldd	r24, Z+2	; 0x02
    475c:	93 81       	ldd	r25, Z+3	; 0x03
    475e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4762:	dc 01       	movw	r26, r24
    4764:	cb 01       	movw	r24, r22
    4766:	f8 01       	movw	r30, r16
    4768:	91 83       	std	Z+1, r25	; 0x01
    476a:	80 83       	st	Z, r24
    476c:	de 01       	movw	r26, r28
    476e:	ab 5a       	subi	r26, 0xAB	; 171
    4770:	bf 4f       	sbci	r27, 0xFF	; 255
    4772:	fe 01       	movw	r30, r28
    4774:	e7 5a       	subi	r30, 0xA7	; 167
    4776:	ff 4f       	sbci	r31, 0xFF	; 255
    4778:	80 81       	ld	r24, Z
    477a:	91 81       	ldd	r25, Z+1	; 0x01
    477c:	8d 93       	st	X+, r24
    477e:	9c 93       	st	X, r25
    4780:	fe 01       	movw	r30, r28
    4782:	eb 5a       	subi	r30, 0xAB	; 171
    4784:	ff 4f       	sbci	r31, 0xFF	; 255
    4786:	80 81       	ld	r24, Z
    4788:	91 81       	ldd	r25, Z+1	; 0x01
    478a:	01 97       	sbiw	r24, 0x01	; 1
    478c:	f1 f7       	brne	.-4      	; 0x478a <Lcd_VidSendCommand+0x182>
    478e:	fe 01       	movw	r30, r28
    4790:	eb 5a       	subi	r30, 0xAB	; 171
    4792:	ff 4f       	sbci	r31, 0xFF	; 255
    4794:	91 83       	std	Z+1, r25	; 0x01
    4796:	80 83       	st	Z, r24
	_delay_ms(1);
	Dio_enuWriteChannel(LCD_E_PIN_NUM,DIO_LOGIC_HIGH);
    4798:	81 e1       	ldi	r24, 0x11	; 17
    479a:	61 e0       	ldi	r22, 0x01	; 1
    479c:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <Dio_enuWriteChannel>
    47a0:	fe 01       	movw	r30, r28
    47a2:	ef 5a       	subi	r30, 0xAF	; 175
    47a4:	ff 4f       	sbci	r31, 0xFF	; 255
    47a6:	80 e0       	ldi	r24, 0x00	; 0
    47a8:	90 e0       	ldi	r25, 0x00	; 0
    47aa:	a0 e8       	ldi	r26, 0x80	; 128
    47ac:	bf e3       	ldi	r27, 0x3F	; 63
    47ae:	80 83       	st	Z, r24
    47b0:	91 83       	std	Z+1, r25	; 0x01
    47b2:	a2 83       	std	Z+2, r26	; 0x02
    47b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47b6:	8e 01       	movw	r16, r28
    47b8:	03 5b       	subi	r16, 0xB3	; 179
    47ba:	1f 4f       	sbci	r17, 0xFF	; 255
    47bc:	fe 01       	movw	r30, r28
    47be:	ef 5a       	subi	r30, 0xAF	; 175
    47c0:	ff 4f       	sbci	r31, 0xFF	; 255
    47c2:	60 81       	ld	r22, Z
    47c4:	71 81       	ldd	r23, Z+1	; 0x01
    47c6:	82 81       	ldd	r24, Z+2	; 0x02
    47c8:	93 81       	ldd	r25, Z+3	; 0x03
    47ca:	20 e0       	ldi	r18, 0x00	; 0
    47cc:	30 e0       	ldi	r19, 0x00	; 0
    47ce:	4a ef       	ldi	r20, 0xFA	; 250
    47d0:	54 e4       	ldi	r21, 0x44	; 68
    47d2:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    47d6:	dc 01       	movw	r26, r24
    47d8:	cb 01       	movw	r24, r22
    47da:	f8 01       	movw	r30, r16
    47dc:	80 83       	st	Z, r24
    47de:	91 83       	std	Z+1, r25	; 0x01
    47e0:	a2 83       	std	Z+2, r26	; 0x02
    47e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    47e4:	fe 01       	movw	r30, r28
    47e6:	e3 5b       	subi	r30, 0xB3	; 179
    47e8:	ff 4f       	sbci	r31, 0xFF	; 255
    47ea:	60 81       	ld	r22, Z
    47ec:	71 81       	ldd	r23, Z+1	; 0x01
    47ee:	82 81       	ldd	r24, Z+2	; 0x02
    47f0:	93 81       	ldd	r25, Z+3	; 0x03
    47f2:	20 e0       	ldi	r18, 0x00	; 0
    47f4:	30 e0       	ldi	r19, 0x00	; 0
    47f6:	40 e8       	ldi	r20, 0x80	; 128
    47f8:	5f e3       	ldi	r21, 0x3F	; 63
    47fa:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    47fe:	88 23       	and	r24, r24
    4800:	44 f4       	brge	.+16     	; 0x4812 <Lcd_VidSendCommand+0x20a>
		__ticks = 1;
    4802:	fe 01       	movw	r30, r28
    4804:	e5 5b       	subi	r30, 0xB5	; 181
    4806:	ff 4f       	sbci	r31, 0xFF	; 255
    4808:	81 e0       	ldi	r24, 0x01	; 1
    480a:	90 e0       	ldi	r25, 0x00	; 0
    480c:	91 83       	std	Z+1, r25	; 0x01
    480e:	80 83       	st	Z, r24
    4810:	64 c0       	rjmp	.+200    	; 0x48da <Lcd_VidSendCommand+0x2d2>
	else if (__tmp > 65535)
    4812:	fe 01       	movw	r30, r28
    4814:	e3 5b       	subi	r30, 0xB3	; 179
    4816:	ff 4f       	sbci	r31, 0xFF	; 255
    4818:	60 81       	ld	r22, Z
    481a:	71 81       	ldd	r23, Z+1	; 0x01
    481c:	82 81       	ldd	r24, Z+2	; 0x02
    481e:	93 81       	ldd	r25, Z+3	; 0x03
    4820:	20 e0       	ldi	r18, 0x00	; 0
    4822:	3f ef       	ldi	r19, 0xFF	; 255
    4824:	4f e7       	ldi	r20, 0x7F	; 127
    4826:	57 e4       	ldi	r21, 0x47	; 71
    4828:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    482c:	18 16       	cp	r1, r24
    482e:	0c f0       	brlt	.+2      	; 0x4832 <Lcd_VidSendCommand+0x22a>
    4830:	43 c0       	rjmp	.+134    	; 0x48b8 <Lcd_VidSendCommand+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4832:	fe 01       	movw	r30, r28
    4834:	ef 5a       	subi	r30, 0xAF	; 175
    4836:	ff 4f       	sbci	r31, 0xFF	; 255
    4838:	60 81       	ld	r22, Z
    483a:	71 81       	ldd	r23, Z+1	; 0x01
    483c:	82 81       	ldd	r24, Z+2	; 0x02
    483e:	93 81       	ldd	r25, Z+3	; 0x03
    4840:	20 e0       	ldi	r18, 0x00	; 0
    4842:	30 e0       	ldi	r19, 0x00	; 0
    4844:	40 e2       	ldi	r20, 0x20	; 32
    4846:	51 e4       	ldi	r21, 0x41	; 65
    4848:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    484c:	dc 01       	movw	r26, r24
    484e:	cb 01       	movw	r24, r22
    4850:	8e 01       	movw	r16, r28
    4852:	05 5b       	subi	r16, 0xB5	; 181
    4854:	1f 4f       	sbci	r17, 0xFF	; 255
    4856:	bc 01       	movw	r22, r24
    4858:	cd 01       	movw	r24, r26
    485a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    485e:	dc 01       	movw	r26, r24
    4860:	cb 01       	movw	r24, r22
    4862:	f8 01       	movw	r30, r16
    4864:	91 83       	std	Z+1, r25	; 0x01
    4866:	80 83       	st	Z, r24
    4868:	1f c0       	rjmp	.+62     	; 0x48a8 <Lcd_VidSendCommand+0x2a0>
    486a:	fe 01       	movw	r30, r28
    486c:	e7 5b       	subi	r30, 0xB7	; 183
    486e:	ff 4f       	sbci	r31, 0xFF	; 255
    4870:	88 ec       	ldi	r24, 0xC8	; 200
    4872:	90 e0       	ldi	r25, 0x00	; 0
    4874:	91 83       	std	Z+1, r25	; 0x01
    4876:	80 83       	st	Z, r24
    4878:	fe 01       	movw	r30, r28
    487a:	e7 5b       	subi	r30, 0xB7	; 183
    487c:	ff 4f       	sbci	r31, 0xFF	; 255
    487e:	80 81       	ld	r24, Z
    4880:	91 81       	ldd	r25, Z+1	; 0x01
    4882:	01 97       	sbiw	r24, 0x01	; 1
    4884:	f1 f7       	brne	.-4      	; 0x4882 <Lcd_VidSendCommand+0x27a>
    4886:	fe 01       	movw	r30, r28
    4888:	e7 5b       	subi	r30, 0xB7	; 183
    488a:	ff 4f       	sbci	r31, 0xFF	; 255
    488c:	91 83       	std	Z+1, r25	; 0x01
    488e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4890:	de 01       	movw	r26, r28
    4892:	a5 5b       	subi	r26, 0xB5	; 181
    4894:	bf 4f       	sbci	r27, 0xFF	; 255
    4896:	fe 01       	movw	r30, r28
    4898:	e5 5b       	subi	r30, 0xB5	; 181
    489a:	ff 4f       	sbci	r31, 0xFF	; 255
    489c:	80 81       	ld	r24, Z
    489e:	91 81       	ldd	r25, Z+1	; 0x01
    48a0:	01 97       	sbiw	r24, 0x01	; 1
    48a2:	11 96       	adiw	r26, 0x01	; 1
    48a4:	9c 93       	st	X, r25
    48a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48a8:	fe 01       	movw	r30, r28
    48aa:	e5 5b       	subi	r30, 0xB5	; 181
    48ac:	ff 4f       	sbci	r31, 0xFF	; 255
    48ae:	80 81       	ld	r24, Z
    48b0:	91 81       	ldd	r25, Z+1	; 0x01
    48b2:	00 97       	sbiw	r24, 0x00	; 0
    48b4:	d1 f6       	brne	.-76     	; 0x486a <Lcd_VidSendCommand+0x262>
    48b6:	27 c0       	rjmp	.+78     	; 0x4906 <Lcd_VidSendCommand+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48b8:	8e 01       	movw	r16, r28
    48ba:	05 5b       	subi	r16, 0xB5	; 181
    48bc:	1f 4f       	sbci	r17, 0xFF	; 255
    48be:	fe 01       	movw	r30, r28
    48c0:	e3 5b       	subi	r30, 0xB3	; 179
    48c2:	ff 4f       	sbci	r31, 0xFF	; 255
    48c4:	60 81       	ld	r22, Z
    48c6:	71 81       	ldd	r23, Z+1	; 0x01
    48c8:	82 81       	ldd	r24, Z+2	; 0x02
    48ca:	93 81       	ldd	r25, Z+3	; 0x03
    48cc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    48d0:	dc 01       	movw	r26, r24
    48d2:	cb 01       	movw	r24, r22
    48d4:	f8 01       	movw	r30, r16
    48d6:	91 83       	std	Z+1, r25	; 0x01
    48d8:	80 83       	st	Z, r24
    48da:	de 01       	movw	r26, r28
    48dc:	a9 5b       	subi	r26, 0xB9	; 185
    48de:	bf 4f       	sbci	r27, 0xFF	; 255
    48e0:	fe 01       	movw	r30, r28
    48e2:	e5 5b       	subi	r30, 0xB5	; 181
    48e4:	ff 4f       	sbci	r31, 0xFF	; 255
    48e6:	80 81       	ld	r24, Z
    48e8:	91 81       	ldd	r25, Z+1	; 0x01
    48ea:	8d 93       	st	X+, r24
    48ec:	9c 93       	st	X, r25
    48ee:	fe 01       	movw	r30, r28
    48f0:	e9 5b       	subi	r30, 0xB9	; 185
    48f2:	ff 4f       	sbci	r31, 0xFF	; 255
    48f4:	80 81       	ld	r24, Z
    48f6:	91 81       	ldd	r25, Z+1	; 0x01
    48f8:	01 97       	sbiw	r24, 0x01	; 1
    48fa:	f1 f7       	brne	.-4      	; 0x48f8 <Lcd_VidSendCommand+0x2f0>
    48fc:	fe 01       	movw	r30, r28
    48fe:	e9 5b       	subi	r30, 0xB9	; 185
    4900:	ff 4f       	sbci	r31, 0xFF	; 255
    4902:	91 83       	std	Z+1, r25	; 0x01
    4904:	80 83       	st	Z, r24
	_delay_ms(1);
#if(LCD_DATA_MODE==LCD_FOUR_BIT_MODE)
	Dio_enuWriteChannel(LCD_DATA_PIN4,GET_BIT(Copy_u8Command,4));
    4906:	fe 01       	movw	r30, r28
    4908:	ed 59       	subi	r30, 0x9D	; 157
    490a:	ff 4f       	sbci	r31, 0xFF	; 255
    490c:	80 81       	ld	r24, Z
    490e:	88 2f       	mov	r24, r24
    4910:	90 e0       	ldi	r25, 0x00	; 0
    4912:	80 71       	andi	r24, 0x10	; 16
    4914:	90 70       	andi	r25, 0x00	; 0
    4916:	95 95       	asr	r25
    4918:	87 95       	ror	r24
    491a:	95 95       	asr	r25
    491c:	87 95       	ror	r24
    491e:	95 95       	asr	r25
    4920:	87 95       	ror	r24
    4922:	95 95       	asr	r25
    4924:	87 95       	ror	r24
    4926:	98 2f       	mov	r25, r24
    4928:	82 e1       	ldi	r24, 0x12	; 18
    492a:	69 2f       	mov	r22, r25
    492c:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <Dio_enuWriteChannel>
	Dio_enuWriteChannel(LCD_DATA_PIN5,GET_BIT(Copy_u8Command,5));
    4930:	fe 01       	movw	r30, r28
    4932:	ed 59       	subi	r30, 0x9D	; 157
    4934:	ff 4f       	sbci	r31, 0xFF	; 255
    4936:	80 81       	ld	r24, Z
    4938:	88 2f       	mov	r24, r24
    493a:	90 e0       	ldi	r25, 0x00	; 0
    493c:	80 72       	andi	r24, 0x20	; 32
    493e:	90 70       	andi	r25, 0x00	; 0
    4940:	95 95       	asr	r25
    4942:	87 95       	ror	r24
    4944:	95 95       	asr	r25
    4946:	87 95       	ror	r24
    4948:	95 95       	asr	r25
    494a:	87 95       	ror	r24
    494c:	95 95       	asr	r25
    494e:	87 95       	ror	r24
    4950:	95 95       	asr	r25
    4952:	87 95       	ror	r24
    4954:	98 2f       	mov	r25, r24
    4956:	83 e1       	ldi	r24, 0x13	; 19
    4958:	69 2f       	mov	r22, r25
    495a:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <Dio_enuWriteChannel>
	Dio_enuWriteChannel(LCD_DATA_PIN6,GET_BIT(Copy_u8Command,6));
    495e:	fe 01       	movw	r30, r28
    4960:	ed 59       	subi	r30, 0x9D	; 157
    4962:	ff 4f       	sbci	r31, 0xFF	; 255
    4964:	80 81       	ld	r24, Z
    4966:	88 2f       	mov	r24, r24
    4968:	90 e0       	ldi	r25, 0x00	; 0
    496a:	80 74       	andi	r24, 0x40	; 64
    496c:	90 70       	andi	r25, 0x00	; 0
    496e:	08 2e       	mov	r0, r24
    4970:	89 2f       	mov	r24, r25
    4972:	00 0c       	add	r0, r0
    4974:	88 1f       	adc	r24, r24
    4976:	99 0b       	sbc	r25, r25
    4978:	00 0c       	add	r0, r0
    497a:	88 1f       	adc	r24, r24
    497c:	99 1f       	adc	r25, r25
    497e:	98 2f       	mov	r25, r24
    4980:	84 e1       	ldi	r24, 0x14	; 20
    4982:	69 2f       	mov	r22, r25
    4984:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <Dio_enuWriteChannel>
	Dio_enuWriteChannel(LCD_DATA_PIN7,GET_BIT(Copy_u8Command,7));
    4988:	fe 01       	movw	r30, r28
    498a:	ed 59       	subi	r30, 0x9D	; 157
    498c:	ff 4f       	sbci	r31, 0xFF	; 255
    498e:	80 81       	ld	r24, Z
    4990:	98 2f       	mov	r25, r24
    4992:	99 1f       	adc	r25, r25
    4994:	99 27       	eor	r25, r25
    4996:	99 1f       	adc	r25, r25
    4998:	85 e1       	ldi	r24, 0x15	; 21
    499a:	69 2f       	mov	r22, r25
    499c:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <Dio_enuWriteChannel>
    49a0:	fe 01       	movw	r30, r28
    49a2:	ed 5b       	subi	r30, 0xBD	; 189
    49a4:	ff 4f       	sbci	r31, 0xFF	; 255
    49a6:	80 e0       	ldi	r24, 0x00	; 0
    49a8:	90 e0       	ldi	r25, 0x00	; 0
    49aa:	a0 e8       	ldi	r26, 0x80	; 128
    49ac:	bf e3       	ldi	r27, 0x3F	; 63
    49ae:	80 83       	st	Z, r24
    49b0:	91 83       	std	Z+1, r25	; 0x01
    49b2:	a2 83       	std	Z+2, r26	; 0x02
    49b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49b6:	8e 01       	movw	r16, r28
    49b8:	01 5c       	subi	r16, 0xC1	; 193
    49ba:	1f 4f       	sbci	r17, 0xFF	; 255
    49bc:	fe 01       	movw	r30, r28
    49be:	ed 5b       	subi	r30, 0xBD	; 189
    49c0:	ff 4f       	sbci	r31, 0xFF	; 255
    49c2:	60 81       	ld	r22, Z
    49c4:	71 81       	ldd	r23, Z+1	; 0x01
    49c6:	82 81       	ldd	r24, Z+2	; 0x02
    49c8:	93 81       	ldd	r25, Z+3	; 0x03
    49ca:	20 e0       	ldi	r18, 0x00	; 0
    49cc:	30 e0       	ldi	r19, 0x00	; 0
    49ce:	4a ef       	ldi	r20, 0xFA	; 250
    49d0:	54 e4       	ldi	r21, 0x44	; 68
    49d2:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    49d6:	dc 01       	movw	r26, r24
    49d8:	cb 01       	movw	r24, r22
    49da:	f8 01       	movw	r30, r16
    49dc:	80 83       	st	Z, r24
    49de:	91 83       	std	Z+1, r25	; 0x01
    49e0:	a2 83       	std	Z+2, r26	; 0x02
    49e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    49e4:	fe 01       	movw	r30, r28
    49e6:	ff 96       	adiw	r30, 0x3f	; 63
    49e8:	60 81       	ld	r22, Z
    49ea:	71 81       	ldd	r23, Z+1	; 0x01
    49ec:	82 81       	ldd	r24, Z+2	; 0x02
    49ee:	93 81       	ldd	r25, Z+3	; 0x03
    49f0:	20 e0       	ldi	r18, 0x00	; 0
    49f2:	30 e0       	ldi	r19, 0x00	; 0
    49f4:	40 e8       	ldi	r20, 0x80	; 128
    49f6:	5f e3       	ldi	r21, 0x3F	; 63
    49f8:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    49fc:	88 23       	and	r24, r24
    49fe:	2c f4       	brge	.+10     	; 0x4a0a <Lcd_VidSendCommand+0x402>
		__ticks = 1;
    4a00:	81 e0       	ldi	r24, 0x01	; 1
    4a02:	90 e0       	ldi	r25, 0x00	; 0
    4a04:	9e af       	std	Y+62, r25	; 0x3e
    4a06:	8d af       	std	Y+61, r24	; 0x3d
    4a08:	46 c0       	rjmp	.+140    	; 0x4a96 <Lcd_VidSendCommand+0x48e>
	else if (__tmp > 65535)
    4a0a:	fe 01       	movw	r30, r28
    4a0c:	ff 96       	adiw	r30, 0x3f	; 63
    4a0e:	60 81       	ld	r22, Z
    4a10:	71 81       	ldd	r23, Z+1	; 0x01
    4a12:	82 81       	ldd	r24, Z+2	; 0x02
    4a14:	93 81       	ldd	r25, Z+3	; 0x03
    4a16:	20 e0       	ldi	r18, 0x00	; 0
    4a18:	3f ef       	ldi	r19, 0xFF	; 255
    4a1a:	4f e7       	ldi	r20, 0x7F	; 127
    4a1c:	57 e4       	ldi	r21, 0x47	; 71
    4a1e:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    4a22:	18 16       	cp	r1, r24
    4a24:	64 f5       	brge	.+88     	; 0x4a7e <Lcd_VidSendCommand+0x476>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a26:	fe 01       	movw	r30, r28
    4a28:	ed 5b       	subi	r30, 0xBD	; 189
    4a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a2c:	60 81       	ld	r22, Z
    4a2e:	71 81       	ldd	r23, Z+1	; 0x01
    4a30:	82 81       	ldd	r24, Z+2	; 0x02
    4a32:	93 81       	ldd	r25, Z+3	; 0x03
    4a34:	20 e0       	ldi	r18, 0x00	; 0
    4a36:	30 e0       	ldi	r19, 0x00	; 0
    4a38:	40 e2       	ldi	r20, 0x20	; 32
    4a3a:	51 e4       	ldi	r21, 0x41	; 65
    4a3c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4a40:	dc 01       	movw	r26, r24
    4a42:	cb 01       	movw	r24, r22
    4a44:	bc 01       	movw	r22, r24
    4a46:	cd 01       	movw	r24, r26
    4a48:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4a4c:	dc 01       	movw	r26, r24
    4a4e:	cb 01       	movw	r24, r22
    4a50:	9e af       	std	Y+62, r25	; 0x3e
    4a52:	8d af       	std	Y+61, r24	; 0x3d
    4a54:	0f c0       	rjmp	.+30     	; 0x4a74 <Lcd_VidSendCommand+0x46c>
    4a56:	88 ec       	ldi	r24, 0xC8	; 200
    4a58:	90 e0       	ldi	r25, 0x00	; 0
    4a5a:	9c af       	std	Y+60, r25	; 0x3c
    4a5c:	8b af       	std	Y+59, r24	; 0x3b
    4a5e:	8b ad       	ldd	r24, Y+59	; 0x3b
    4a60:	9c ad       	ldd	r25, Y+60	; 0x3c
    4a62:	01 97       	sbiw	r24, 0x01	; 1
    4a64:	f1 f7       	brne	.-4      	; 0x4a62 <Lcd_VidSendCommand+0x45a>
    4a66:	9c af       	std	Y+60, r25	; 0x3c
    4a68:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a6a:	8d ad       	ldd	r24, Y+61	; 0x3d
    4a6c:	9e ad       	ldd	r25, Y+62	; 0x3e
    4a6e:	01 97       	sbiw	r24, 0x01	; 1
    4a70:	9e af       	std	Y+62, r25	; 0x3e
    4a72:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a74:	8d ad       	ldd	r24, Y+61	; 0x3d
    4a76:	9e ad       	ldd	r25, Y+62	; 0x3e
    4a78:	00 97       	sbiw	r24, 0x00	; 0
    4a7a:	69 f7       	brne	.-38     	; 0x4a56 <Lcd_VidSendCommand+0x44e>
    4a7c:	16 c0       	rjmp	.+44     	; 0x4aaa <Lcd_VidSendCommand+0x4a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a7e:	fe 01       	movw	r30, r28
    4a80:	ff 96       	adiw	r30, 0x3f	; 63
    4a82:	60 81       	ld	r22, Z
    4a84:	71 81       	ldd	r23, Z+1	; 0x01
    4a86:	82 81       	ldd	r24, Z+2	; 0x02
    4a88:	93 81       	ldd	r25, Z+3	; 0x03
    4a8a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4a8e:	dc 01       	movw	r26, r24
    4a90:	cb 01       	movw	r24, r22
    4a92:	9e af       	std	Y+62, r25	; 0x3e
    4a94:	8d af       	std	Y+61, r24	; 0x3d
    4a96:	8d ad       	ldd	r24, Y+61	; 0x3d
    4a98:	9e ad       	ldd	r25, Y+62	; 0x3e
    4a9a:	9a af       	std	Y+58, r25	; 0x3a
    4a9c:	89 af       	std	Y+57, r24	; 0x39
    4a9e:	89 ad       	ldd	r24, Y+57	; 0x39
    4aa0:	9a ad       	ldd	r25, Y+58	; 0x3a
    4aa2:	01 97       	sbiw	r24, 0x01	; 1
    4aa4:	f1 f7       	brne	.-4      	; 0x4aa2 <Lcd_VidSendCommand+0x49a>
    4aa6:	9a af       	std	Y+58, r25	; 0x3a
    4aa8:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	Dio_enuWriteChannel(LCD_E_PIN_NUM,DIO_LOGIC_LOW);
    4aaa:	81 e1       	ldi	r24, 0x11	; 17
    4aac:	60 e0       	ldi	r22, 0x00	; 0
    4aae:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <Dio_enuWriteChannel>
    4ab2:	80 e0       	ldi	r24, 0x00	; 0
    4ab4:	90 e0       	ldi	r25, 0x00	; 0
    4ab6:	a0 e8       	ldi	r26, 0x80	; 128
    4ab8:	bf e3       	ldi	r27, 0x3F	; 63
    4aba:	8d ab       	std	Y+53, r24	; 0x35
    4abc:	9e ab       	std	Y+54, r25	; 0x36
    4abe:	af ab       	std	Y+55, r26	; 0x37
    4ac0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ac2:	6d a9       	ldd	r22, Y+53	; 0x35
    4ac4:	7e a9       	ldd	r23, Y+54	; 0x36
    4ac6:	8f a9       	ldd	r24, Y+55	; 0x37
    4ac8:	98 ad       	ldd	r25, Y+56	; 0x38
    4aca:	20 e0       	ldi	r18, 0x00	; 0
    4acc:	30 e0       	ldi	r19, 0x00	; 0
    4ace:	4a ef       	ldi	r20, 0xFA	; 250
    4ad0:	54 e4       	ldi	r21, 0x44	; 68
    4ad2:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4ad6:	dc 01       	movw	r26, r24
    4ad8:	cb 01       	movw	r24, r22
    4ada:	89 ab       	std	Y+49, r24	; 0x31
    4adc:	9a ab       	std	Y+50, r25	; 0x32
    4ade:	ab ab       	std	Y+51, r26	; 0x33
    4ae0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4ae2:	69 a9       	ldd	r22, Y+49	; 0x31
    4ae4:	7a a9       	ldd	r23, Y+50	; 0x32
    4ae6:	8b a9       	ldd	r24, Y+51	; 0x33
    4ae8:	9c a9       	ldd	r25, Y+52	; 0x34
    4aea:	20 e0       	ldi	r18, 0x00	; 0
    4aec:	30 e0       	ldi	r19, 0x00	; 0
    4aee:	40 e8       	ldi	r20, 0x80	; 128
    4af0:	5f e3       	ldi	r21, 0x3F	; 63
    4af2:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    4af6:	88 23       	and	r24, r24
    4af8:	2c f4       	brge	.+10     	; 0x4b04 <Lcd_VidSendCommand+0x4fc>
		__ticks = 1;
    4afa:	81 e0       	ldi	r24, 0x01	; 1
    4afc:	90 e0       	ldi	r25, 0x00	; 0
    4afe:	98 ab       	std	Y+48, r25	; 0x30
    4b00:	8f a7       	std	Y+47, r24	; 0x2f
    4b02:	3f c0       	rjmp	.+126    	; 0x4b82 <Lcd_VidSendCommand+0x57a>
	else if (__tmp > 65535)
    4b04:	69 a9       	ldd	r22, Y+49	; 0x31
    4b06:	7a a9       	ldd	r23, Y+50	; 0x32
    4b08:	8b a9       	ldd	r24, Y+51	; 0x33
    4b0a:	9c a9       	ldd	r25, Y+52	; 0x34
    4b0c:	20 e0       	ldi	r18, 0x00	; 0
    4b0e:	3f ef       	ldi	r19, 0xFF	; 255
    4b10:	4f e7       	ldi	r20, 0x7F	; 127
    4b12:	57 e4       	ldi	r21, 0x47	; 71
    4b14:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    4b18:	18 16       	cp	r1, r24
    4b1a:	4c f5       	brge	.+82     	; 0x4b6e <Lcd_VidSendCommand+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b1c:	6d a9       	ldd	r22, Y+53	; 0x35
    4b1e:	7e a9       	ldd	r23, Y+54	; 0x36
    4b20:	8f a9       	ldd	r24, Y+55	; 0x37
    4b22:	98 ad       	ldd	r25, Y+56	; 0x38
    4b24:	20 e0       	ldi	r18, 0x00	; 0
    4b26:	30 e0       	ldi	r19, 0x00	; 0
    4b28:	40 e2       	ldi	r20, 0x20	; 32
    4b2a:	51 e4       	ldi	r21, 0x41	; 65
    4b2c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4b30:	dc 01       	movw	r26, r24
    4b32:	cb 01       	movw	r24, r22
    4b34:	bc 01       	movw	r22, r24
    4b36:	cd 01       	movw	r24, r26
    4b38:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4b3c:	dc 01       	movw	r26, r24
    4b3e:	cb 01       	movw	r24, r22
    4b40:	98 ab       	std	Y+48, r25	; 0x30
    4b42:	8f a7       	std	Y+47, r24	; 0x2f
    4b44:	0f c0       	rjmp	.+30     	; 0x4b64 <Lcd_VidSendCommand+0x55c>
    4b46:	88 ec       	ldi	r24, 0xC8	; 200
    4b48:	90 e0       	ldi	r25, 0x00	; 0
    4b4a:	9e a7       	std	Y+46, r25	; 0x2e
    4b4c:	8d a7       	std	Y+45, r24	; 0x2d
    4b4e:	8d a5       	ldd	r24, Y+45	; 0x2d
    4b50:	9e a5       	ldd	r25, Y+46	; 0x2e
    4b52:	01 97       	sbiw	r24, 0x01	; 1
    4b54:	f1 f7       	brne	.-4      	; 0x4b52 <Lcd_VidSendCommand+0x54a>
    4b56:	9e a7       	std	Y+46, r25	; 0x2e
    4b58:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b5c:	98 a9       	ldd	r25, Y+48	; 0x30
    4b5e:	01 97       	sbiw	r24, 0x01	; 1
    4b60:	98 ab       	std	Y+48, r25	; 0x30
    4b62:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b64:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b66:	98 a9       	ldd	r25, Y+48	; 0x30
    4b68:	00 97       	sbiw	r24, 0x00	; 0
    4b6a:	69 f7       	brne	.-38     	; 0x4b46 <Lcd_VidSendCommand+0x53e>
    4b6c:	14 c0       	rjmp	.+40     	; 0x4b96 <Lcd_VidSendCommand+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b6e:	69 a9       	ldd	r22, Y+49	; 0x31
    4b70:	7a a9       	ldd	r23, Y+50	; 0x32
    4b72:	8b a9       	ldd	r24, Y+51	; 0x33
    4b74:	9c a9       	ldd	r25, Y+52	; 0x34
    4b76:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4b7a:	dc 01       	movw	r26, r24
    4b7c:	cb 01       	movw	r24, r22
    4b7e:	98 ab       	std	Y+48, r25	; 0x30
    4b80:	8f a7       	std	Y+47, r24	; 0x2f
    4b82:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b84:	98 a9       	ldd	r25, Y+48	; 0x30
    4b86:	9c a7       	std	Y+44, r25	; 0x2c
    4b88:	8b a7       	std	Y+43, r24	; 0x2b
    4b8a:	8b a5       	ldd	r24, Y+43	; 0x2b
    4b8c:	9c a5       	ldd	r25, Y+44	; 0x2c
    4b8e:	01 97       	sbiw	r24, 0x01	; 1
    4b90:	f1 f7       	brne	.-4      	; 0x4b8e <Lcd_VidSendCommand+0x586>
    4b92:	9c a7       	std	Y+44, r25	; 0x2c
    4b94:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	Dio_enuWriteChannel(LCD_E_PIN_NUM,DIO_LOGIC_HIGH);
    4b96:	81 e1       	ldi	r24, 0x11	; 17
    4b98:	61 e0       	ldi	r22, 0x01	; 1
    4b9a:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <Dio_enuWriteChannel>
    4b9e:	80 e0       	ldi	r24, 0x00	; 0
    4ba0:	90 e0       	ldi	r25, 0x00	; 0
    4ba2:	a0 e8       	ldi	r26, 0x80	; 128
    4ba4:	bf e3       	ldi	r27, 0x3F	; 63
    4ba6:	8f a3       	std	Y+39, r24	; 0x27
    4ba8:	98 a7       	std	Y+40, r25	; 0x28
    4baa:	a9 a7       	std	Y+41, r26	; 0x29
    4bac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bae:	6f a1       	ldd	r22, Y+39	; 0x27
    4bb0:	78 a5       	ldd	r23, Y+40	; 0x28
    4bb2:	89 a5       	ldd	r24, Y+41	; 0x29
    4bb4:	9a a5       	ldd	r25, Y+42	; 0x2a
    4bb6:	20 e0       	ldi	r18, 0x00	; 0
    4bb8:	30 e0       	ldi	r19, 0x00	; 0
    4bba:	4a ef       	ldi	r20, 0xFA	; 250
    4bbc:	54 e4       	ldi	r21, 0x44	; 68
    4bbe:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4bc2:	dc 01       	movw	r26, r24
    4bc4:	cb 01       	movw	r24, r22
    4bc6:	8b a3       	std	Y+35, r24	; 0x23
    4bc8:	9c a3       	std	Y+36, r25	; 0x24
    4bca:	ad a3       	std	Y+37, r26	; 0x25
    4bcc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4bce:	6b a1       	ldd	r22, Y+35	; 0x23
    4bd0:	7c a1       	ldd	r23, Y+36	; 0x24
    4bd2:	8d a1       	ldd	r24, Y+37	; 0x25
    4bd4:	9e a1       	ldd	r25, Y+38	; 0x26
    4bd6:	20 e0       	ldi	r18, 0x00	; 0
    4bd8:	30 e0       	ldi	r19, 0x00	; 0
    4bda:	40 e8       	ldi	r20, 0x80	; 128
    4bdc:	5f e3       	ldi	r21, 0x3F	; 63
    4bde:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    4be2:	88 23       	and	r24, r24
    4be4:	2c f4       	brge	.+10     	; 0x4bf0 <Lcd_VidSendCommand+0x5e8>
		__ticks = 1;
    4be6:	81 e0       	ldi	r24, 0x01	; 1
    4be8:	90 e0       	ldi	r25, 0x00	; 0
    4bea:	9a a3       	std	Y+34, r25	; 0x22
    4bec:	89 a3       	std	Y+33, r24	; 0x21
    4bee:	3f c0       	rjmp	.+126    	; 0x4c6e <Lcd_VidSendCommand+0x666>
	else if (__tmp > 65535)
    4bf0:	6b a1       	ldd	r22, Y+35	; 0x23
    4bf2:	7c a1       	ldd	r23, Y+36	; 0x24
    4bf4:	8d a1       	ldd	r24, Y+37	; 0x25
    4bf6:	9e a1       	ldd	r25, Y+38	; 0x26
    4bf8:	20 e0       	ldi	r18, 0x00	; 0
    4bfa:	3f ef       	ldi	r19, 0xFF	; 255
    4bfc:	4f e7       	ldi	r20, 0x7F	; 127
    4bfe:	57 e4       	ldi	r21, 0x47	; 71
    4c00:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    4c04:	18 16       	cp	r1, r24
    4c06:	4c f5       	brge	.+82     	; 0x4c5a <Lcd_VidSendCommand+0x652>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c08:	6f a1       	ldd	r22, Y+39	; 0x27
    4c0a:	78 a5       	ldd	r23, Y+40	; 0x28
    4c0c:	89 a5       	ldd	r24, Y+41	; 0x29
    4c0e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4c10:	20 e0       	ldi	r18, 0x00	; 0
    4c12:	30 e0       	ldi	r19, 0x00	; 0
    4c14:	40 e2       	ldi	r20, 0x20	; 32
    4c16:	51 e4       	ldi	r21, 0x41	; 65
    4c18:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4c1c:	dc 01       	movw	r26, r24
    4c1e:	cb 01       	movw	r24, r22
    4c20:	bc 01       	movw	r22, r24
    4c22:	cd 01       	movw	r24, r26
    4c24:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4c28:	dc 01       	movw	r26, r24
    4c2a:	cb 01       	movw	r24, r22
    4c2c:	9a a3       	std	Y+34, r25	; 0x22
    4c2e:	89 a3       	std	Y+33, r24	; 0x21
    4c30:	0f c0       	rjmp	.+30     	; 0x4c50 <Lcd_VidSendCommand+0x648>
    4c32:	88 ec       	ldi	r24, 0xC8	; 200
    4c34:	90 e0       	ldi	r25, 0x00	; 0
    4c36:	98 a3       	std	Y+32, r25	; 0x20
    4c38:	8f 8f       	std	Y+31, r24	; 0x1f
    4c3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4c3c:	98 a1       	ldd	r25, Y+32	; 0x20
    4c3e:	01 97       	sbiw	r24, 0x01	; 1
    4c40:	f1 f7       	brne	.-4      	; 0x4c3e <Lcd_VidSendCommand+0x636>
    4c42:	98 a3       	std	Y+32, r25	; 0x20
    4c44:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c46:	89 a1       	ldd	r24, Y+33	; 0x21
    4c48:	9a a1       	ldd	r25, Y+34	; 0x22
    4c4a:	01 97       	sbiw	r24, 0x01	; 1
    4c4c:	9a a3       	std	Y+34, r25	; 0x22
    4c4e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c50:	89 a1       	ldd	r24, Y+33	; 0x21
    4c52:	9a a1       	ldd	r25, Y+34	; 0x22
    4c54:	00 97       	sbiw	r24, 0x00	; 0
    4c56:	69 f7       	brne	.-38     	; 0x4c32 <Lcd_VidSendCommand+0x62a>
    4c58:	14 c0       	rjmp	.+40     	; 0x4c82 <Lcd_VidSendCommand+0x67a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c5a:	6b a1       	ldd	r22, Y+35	; 0x23
    4c5c:	7c a1       	ldd	r23, Y+36	; 0x24
    4c5e:	8d a1       	ldd	r24, Y+37	; 0x25
    4c60:	9e a1       	ldd	r25, Y+38	; 0x26
    4c62:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4c66:	dc 01       	movw	r26, r24
    4c68:	cb 01       	movw	r24, r22
    4c6a:	9a a3       	std	Y+34, r25	; 0x22
    4c6c:	89 a3       	std	Y+33, r24	; 0x21
    4c6e:	89 a1       	ldd	r24, Y+33	; 0x21
    4c70:	9a a1       	ldd	r25, Y+34	; 0x22
    4c72:	9e 8f       	std	Y+30, r25	; 0x1e
    4c74:	8d 8f       	std	Y+29, r24	; 0x1d
    4c76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4c78:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4c7a:	01 97       	sbiw	r24, 0x01	; 1
    4c7c:	f1 f7       	brne	.-4      	; 0x4c7a <Lcd_VidSendCommand+0x672>
    4c7e:	9e 8f       	std	Y+30, r25	; 0x1e
    4c80:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	Dio_enuWriteChannel(LCD_DATA_PIN4,GET_BIT(Copy_u8Command,0));
    4c82:	fe 01       	movw	r30, r28
    4c84:	ed 59       	subi	r30, 0x9D	; 157
    4c86:	ff 4f       	sbci	r31, 0xFF	; 255
    4c88:	80 81       	ld	r24, Z
    4c8a:	98 2f       	mov	r25, r24
    4c8c:	91 70       	andi	r25, 0x01	; 1
    4c8e:	82 e1       	ldi	r24, 0x12	; 18
    4c90:	69 2f       	mov	r22, r25
    4c92:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <Dio_enuWriteChannel>
	Dio_enuWriteChannel(LCD_DATA_PIN5,GET_BIT(Copy_u8Command,1));
    4c96:	fe 01       	movw	r30, r28
    4c98:	ed 59       	subi	r30, 0x9D	; 157
    4c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c9c:	80 81       	ld	r24, Z
    4c9e:	88 2f       	mov	r24, r24
    4ca0:	90 e0       	ldi	r25, 0x00	; 0
    4ca2:	82 70       	andi	r24, 0x02	; 2
    4ca4:	90 70       	andi	r25, 0x00	; 0
    4ca6:	95 95       	asr	r25
    4ca8:	87 95       	ror	r24
    4caa:	98 2f       	mov	r25, r24
    4cac:	83 e1       	ldi	r24, 0x13	; 19
    4cae:	69 2f       	mov	r22, r25
    4cb0:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <Dio_enuWriteChannel>
	Dio_enuWriteChannel(LCD_DATA_PIN6,GET_BIT(Copy_u8Command,2));
    4cb4:	fe 01       	movw	r30, r28
    4cb6:	ed 59       	subi	r30, 0x9D	; 157
    4cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    4cba:	80 81       	ld	r24, Z
    4cbc:	88 2f       	mov	r24, r24
    4cbe:	90 e0       	ldi	r25, 0x00	; 0
    4cc0:	84 70       	andi	r24, 0x04	; 4
    4cc2:	90 70       	andi	r25, 0x00	; 0
    4cc4:	95 95       	asr	r25
    4cc6:	87 95       	ror	r24
    4cc8:	95 95       	asr	r25
    4cca:	87 95       	ror	r24
    4ccc:	98 2f       	mov	r25, r24
    4cce:	84 e1       	ldi	r24, 0x14	; 20
    4cd0:	69 2f       	mov	r22, r25
    4cd2:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <Dio_enuWriteChannel>
	Dio_enuWriteChannel(LCD_DATA_PIN7,GET_BIT(Copy_u8Command,3));
    4cd6:	fe 01       	movw	r30, r28
    4cd8:	ed 59       	subi	r30, 0x9D	; 157
    4cda:	ff 4f       	sbci	r31, 0xFF	; 255
    4cdc:	80 81       	ld	r24, Z
    4cde:	88 2f       	mov	r24, r24
    4ce0:	90 e0       	ldi	r25, 0x00	; 0
    4ce2:	88 70       	andi	r24, 0x08	; 8
    4ce4:	90 70       	andi	r25, 0x00	; 0
    4ce6:	95 95       	asr	r25
    4ce8:	87 95       	ror	r24
    4cea:	95 95       	asr	r25
    4cec:	87 95       	ror	r24
    4cee:	95 95       	asr	r25
    4cf0:	87 95       	ror	r24
    4cf2:	98 2f       	mov	r25, r24
    4cf4:	85 e1       	ldi	r24, 0x15	; 21
    4cf6:	69 2f       	mov	r22, r25
    4cf8:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <Dio_enuWriteChannel>
    4cfc:	80 e0       	ldi	r24, 0x00	; 0
    4cfe:	90 e0       	ldi	r25, 0x00	; 0
    4d00:	a0 e8       	ldi	r26, 0x80	; 128
    4d02:	bf e3       	ldi	r27, 0x3F	; 63
    4d04:	89 8f       	std	Y+25, r24	; 0x19
    4d06:	9a 8f       	std	Y+26, r25	; 0x1a
    4d08:	ab 8f       	std	Y+27, r26	; 0x1b
    4d0a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d0c:	69 8d       	ldd	r22, Y+25	; 0x19
    4d0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d14:	20 e0       	ldi	r18, 0x00	; 0
    4d16:	30 e0       	ldi	r19, 0x00	; 0
    4d18:	4a ef       	ldi	r20, 0xFA	; 250
    4d1a:	54 e4       	ldi	r21, 0x44	; 68
    4d1c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4d20:	dc 01       	movw	r26, r24
    4d22:	cb 01       	movw	r24, r22
    4d24:	8d 8b       	std	Y+21, r24	; 0x15
    4d26:	9e 8b       	std	Y+22, r25	; 0x16
    4d28:	af 8b       	std	Y+23, r26	; 0x17
    4d2a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4d2c:	6d 89       	ldd	r22, Y+21	; 0x15
    4d2e:	7e 89       	ldd	r23, Y+22	; 0x16
    4d30:	8f 89       	ldd	r24, Y+23	; 0x17
    4d32:	98 8d       	ldd	r25, Y+24	; 0x18
    4d34:	20 e0       	ldi	r18, 0x00	; 0
    4d36:	30 e0       	ldi	r19, 0x00	; 0
    4d38:	40 e8       	ldi	r20, 0x80	; 128
    4d3a:	5f e3       	ldi	r21, 0x3F	; 63
    4d3c:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    4d40:	88 23       	and	r24, r24
    4d42:	2c f4       	brge	.+10     	; 0x4d4e <Lcd_VidSendCommand+0x746>
		__ticks = 1;
    4d44:	81 e0       	ldi	r24, 0x01	; 1
    4d46:	90 e0       	ldi	r25, 0x00	; 0
    4d48:	9c 8b       	std	Y+20, r25	; 0x14
    4d4a:	8b 8b       	std	Y+19, r24	; 0x13
    4d4c:	3f c0       	rjmp	.+126    	; 0x4dcc <Lcd_VidSendCommand+0x7c4>
	else if (__tmp > 65535)
    4d4e:	6d 89       	ldd	r22, Y+21	; 0x15
    4d50:	7e 89       	ldd	r23, Y+22	; 0x16
    4d52:	8f 89       	ldd	r24, Y+23	; 0x17
    4d54:	98 8d       	ldd	r25, Y+24	; 0x18
    4d56:	20 e0       	ldi	r18, 0x00	; 0
    4d58:	3f ef       	ldi	r19, 0xFF	; 255
    4d5a:	4f e7       	ldi	r20, 0x7F	; 127
    4d5c:	57 e4       	ldi	r21, 0x47	; 71
    4d5e:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    4d62:	18 16       	cp	r1, r24
    4d64:	4c f5       	brge	.+82     	; 0x4db8 <Lcd_VidSendCommand+0x7b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d66:	69 8d       	ldd	r22, Y+25	; 0x19
    4d68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d6e:	20 e0       	ldi	r18, 0x00	; 0
    4d70:	30 e0       	ldi	r19, 0x00	; 0
    4d72:	40 e2       	ldi	r20, 0x20	; 32
    4d74:	51 e4       	ldi	r21, 0x41	; 65
    4d76:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4d7a:	dc 01       	movw	r26, r24
    4d7c:	cb 01       	movw	r24, r22
    4d7e:	bc 01       	movw	r22, r24
    4d80:	cd 01       	movw	r24, r26
    4d82:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4d86:	dc 01       	movw	r26, r24
    4d88:	cb 01       	movw	r24, r22
    4d8a:	9c 8b       	std	Y+20, r25	; 0x14
    4d8c:	8b 8b       	std	Y+19, r24	; 0x13
    4d8e:	0f c0       	rjmp	.+30     	; 0x4dae <Lcd_VidSendCommand+0x7a6>
    4d90:	88 ec       	ldi	r24, 0xC8	; 200
    4d92:	90 e0       	ldi	r25, 0x00	; 0
    4d94:	9a 8b       	std	Y+18, r25	; 0x12
    4d96:	89 8b       	std	Y+17, r24	; 0x11
    4d98:	89 89       	ldd	r24, Y+17	; 0x11
    4d9a:	9a 89       	ldd	r25, Y+18	; 0x12
    4d9c:	01 97       	sbiw	r24, 0x01	; 1
    4d9e:	f1 f7       	brne	.-4      	; 0x4d9c <Lcd_VidSendCommand+0x794>
    4da0:	9a 8b       	std	Y+18, r25	; 0x12
    4da2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4da4:	8b 89       	ldd	r24, Y+19	; 0x13
    4da6:	9c 89       	ldd	r25, Y+20	; 0x14
    4da8:	01 97       	sbiw	r24, 0x01	; 1
    4daa:	9c 8b       	std	Y+20, r25	; 0x14
    4dac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dae:	8b 89       	ldd	r24, Y+19	; 0x13
    4db0:	9c 89       	ldd	r25, Y+20	; 0x14
    4db2:	00 97       	sbiw	r24, 0x00	; 0
    4db4:	69 f7       	brne	.-38     	; 0x4d90 <Lcd_VidSendCommand+0x788>
    4db6:	14 c0       	rjmp	.+40     	; 0x4de0 <Lcd_VidSendCommand+0x7d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4db8:	6d 89       	ldd	r22, Y+21	; 0x15
    4dba:	7e 89       	ldd	r23, Y+22	; 0x16
    4dbc:	8f 89       	ldd	r24, Y+23	; 0x17
    4dbe:	98 8d       	ldd	r25, Y+24	; 0x18
    4dc0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4dc4:	dc 01       	movw	r26, r24
    4dc6:	cb 01       	movw	r24, r22
    4dc8:	9c 8b       	std	Y+20, r25	; 0x14
    4dca:	8b 8b       	std	Y+19, r24	; 0x13
    4dcc:	8b 89       	ldd	r24, Y+19	; 0x13
    4dce:	9c 89       	ldd	r25, Y+20	; 0x14
    4dd0:	98 8b       	std	Y+16, r25	; 0x10
    4dd2:	8f 87       	std	Y+15, r24	; 0x0f
    4dd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    4dd6:	98 89       	ldd	r25, Y+16	; 0x10
    4dd8:	01 97       	sbiw	r24, 0x01	; 1
    4dda:	f1 f7       	brne	.-4      	; 0x4dd8 <Lcd_VidSendCommand+0x7d0>
    4ddc:	98 8b       	std	Y+16, r25	; 0x10
    4dde:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);
	Dio_enuWriteChannel(LCD_E_PIN_NUM,DIO_LOGIC_LOW);
    4de0:	81 e1       	ldi	r24, 0x11	; 17
    4de2:	60 e0       	ldi	r22, 0x00	; 0
    4de4:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <Dio_enuWriteChannel>
    4de8:	80 e0       	ldi	r24, 0x00	; 0
    4dea:	90 e0       	ldi	r25, 0x00	; 0
    4dec:	a0 e8       	ldi	r26, 0x80	; 128
    4dee:	bf e3       	ldi	r27, 0x3F	; 63
    4df0:	8b 87       	std	Y+11, r24	; 0x0b
    4df2:	9c 87       	std	Y+12, r25	; 0x0c
    4df4:	ad 87       	std	Y+13, r26	; 0x0d
    4df6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4df8:	6b 85       	ldd	r22, Y+11	; 0x0b
    4dfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    4dfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    4dfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e00:	20 e0       	ldi	r18, 0x00	; 0
    4e02:	30 e0       	ldi	r19, 0x00	; 0
    4e04:	4a ef       	ldi	r20, 0xFA	; 250
    4e06:	54 e4       	ldi	r21, 0x44	; 68
    4e08:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4e0c:	dc 01       	movw	r26, r24
    4e0e:	cb 01       	movw	r24, r22
    4e10:	8f 83       	std	Y+7, r24	; 0x07
    4e12:	98 87       	std	Y+8, r25	; 0x08
    4e14:	a9 87       	std	Y+9, r26	; 0x09
    4e16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e18:	6f 81       	ldd	r22, Y+7	; 0x07
    4e1a:	78 85       	ldd	r23, Y+8	; 0x08
    4e1c:	89 85       	ldd	r24, Y+9	; 0x09
    4e1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e20:	20 e0       	ldi	r18, 0x00	; 0
    4e22:	30 e0       	ldi	r19, 0x00	; 0
    4e24:	40 e8       	ldi	r20, 0x80	; 128
    4e26:	5f e3       	ldi	r21, 0x3F	; 63
    4e28:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    4e2c:	88 23       	and	r24, r24
    4e2e:	2c f4       	brge	.+10     	; 0x4e3a <Lcd_VidSendCommand+0x832>
		__ticks = 1;
    4e30:	81 e0       	ldi	r24, 0x01	; 1
    4e32:	90 e0       	ldi	r25, 0x00	; 0
    4e34:	9e 83       	std	Y+6, r25	; 0x06
    4e36:	8d 83       	std	Y+5, r24	; 0x05
    4e38:	3f c0       	rjmp	.+126    	; 0x4eb8 <Lcd_VidSendCommand+0x8b0>
	else if (__tmp > 65535)
    4e3a:	6f 81       	ldd	r22, Y+7	; 0x07
    4e3c:	78 85       	ldd	r23, Y+8	; 0x08
    4e3e:	89 85       	ldd	r24, Y+9	; 0x09
    4e40:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e42:	20 e0       	ldi	r18, 0x00	; 0
    4e44:	3f ef       	ldi	r19, 0xFF	; 255
    4e46:	4f e7       	ldi	r20, 0x7F	; 127
    4e48:	57 e4       	ldi	r21, 0x47	; 71
    4e4a:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    4e4e:	18 16       	cp	r1, r24
    4e50:	4c f5       	brge	.+82     	; 0x4ea4 <Lcd_VidSendCommand+0x89c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e52:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e54:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e56:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e58:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e5a:	20 e0       	ldi	r18, 0x00	; 0
    4e5c:	30 e0       	ldi	r19, 0x00	; 0
    4e5e:	40 e2       	ldi	r20, 0x20	; 32
    4e60:	51 e4       	ldi	r21, 0x41	; 65
    4e62:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4e66:	dc 01       	movw	r26, r24
    4e68:	cb 01       	movw	r24, r22
    4e6a:	bc 01       	movw	r22, r24
    4e6c:	cd 01       	movw	r24, r26
    4e6e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4e72:	dc 01       	movw	r26, r24
    4e74:	cb 01       	movw	r24, r22
    4e76:	9e 83       	std	Y+6, r25	; 0x06
    4e78:	8d 83       	std	Y+5, r24	; 0x05
    4e7a:	0f c0       	rjmp	.+30     	; 0x4e9a <Lcd_VidSendCommand+0x892>
    4e7c:	88 ec       	ldi	r24, 0xC8	; 200
    4e7e:	90 e0       	ldi	r25, 0x00	; 0
    4e80:	9c 83       	std	Y+4, r25	; 0x04
    4e82:	8b 83       	std	Y+3, r24	; 0x03
    4e84:	8b 81       	ldd	r24, Y+3	; 0x03
    4e86:	9c 81       	ldd	r25, Y+4	; 0x04
    4e88:	01 97       	sbiw	r24, 0x01	; 1
    4e8a:	f1 f7       	brne	.-4      	; 0x4e88 <Lcd_VidSendCommand+0x880>
    4e8c:	9c 83       	std	Y+4, r25	; 0x04
    4e8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e90:	8d 81       	ldd	r24, Y+5	; 0x05
    4e92:	9e 81       	ldd	r25, Y+6	; 0x06
    4e94:	01 97       	sbiw	r24, 0x01	; 1
    4e96:	9e 83       	std	Y+6, r25	; 0x06
    4e98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e9a:	8d 81       	ldd	r24, Y+5	; 0x05
    4e9c:	9e 81       	ldd	r25, Y+6	; 0x06
    4e9e:	00 97       	sbiw	r24, 0x00	; 0
    4ea0:	69 f7       	brne	.-38     	; 0x4e7c <Lcd_VidSendCommand+0x874>
    4ea2:	14 c0       	rjmp	.+40     	; 0x4ecc <Lcd_VidSendCommand+0x8c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ea4:	6f 81       	ldd	r22, Y+7	; 0x07
    4ea6:	78 85       	ldd	r23, Y+8	; 0x08
    4ea8:	89 85       	ldd	r24, Y+9	; 0x09
    4eaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    4eac:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4eb0:	dc 01       	movw	r26, r24
    4eb2:	cb 01       	movw	r24, r22
    4eb4:	9e 83       	std	Y+6, r25	; 0x06
    4eb6:	8d 83       	std	Y+5, r24	; 0x05
    4eb8:	8d 81       	ldd	r24, Y+5	; 0x05
    4eba:	9e 81       	ldd	r25, Y+6	; 0x06
    4ebc:	9a 83       	std	Y+2, r25	; 0x02
    4ebe:	89 83       	std	Y+1, r24	; 0x01
    4ec0:	89 81       	ldd	r24, Y+1	; 0x01
    4ec2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ec4:	01 97       	sbiw	r24, 0x01	; 1
    4ec6:	f1 f7       	brne	.-4      	; 0x4ec4 <Lcd_VidSendCommand+0x8bc>
    4ec8:	9a 83       	std	Y+2, r25	; 0x02
    4eca:	89 83       	std	Y+1, r24	; 0x01
	Dio_enuWriteChannel(LCD_E_PIN_NUM,DIO_LOGIC_HIGH);
	LCD_Delay(1);
	Dio_enuWriteChannel(LCD_E_PIN_NUM,DIO_LOGIC_LOW);
	LCD_Delay(2);
#endif
}
    4ecc:	cd 59       	subi	r28, 0x9D	; 157
    4ece:	df 4f       	sbci	r29, 0xFF	; 255
    4ed0:	0f b6       	in	r0, 0x3f	; 63
    4ed2:	f8 94       	cli
    4ed4:	de bf       	out	0x3e, r29	; 62
    4ed6:	0f be       	out	0x3f, r0	; 63
    4ed8:	cd bf       	out	0x3d, r28	; 61
    4eda:	cf 91       	pop	r28
    4edc:	df 91       	pop	r29
    4ede:	1f 91       	pop	r17
    4ee0:	0f 91       	pop	r16
    4ee2:	08 95       	ret

00004ee4 <Lcd_VidDisplayChracter>:

void Lcd_VidDisplayChracter(uint8 Copy_u8Command)
{
    4ee4:	0f 93       	push	r16
    4ee6:	1f 93       	push	r17
    4ee8:	df 93       	push	r29
    4eea:	cf 93       	push	r28
    4eec:	cd b7       	in	r28, 0x3d	; 61
    4eee:	de b7       	in	r29, 0x3e	; 62
    4ef0:	c3 56       	subi	r28, 0x63	; 99
    4ef2:	d0 40       	sbci	r29, 0x00	; 0
    4ef4:	0f b6       	in	r0, 0x3f	; 63
    4ef6:	f8 94       	cli
    4ef8:	de bf       	out	0x3e, r29	; 62
    4efa:	0f be       	out	0x3f, r0	; 63
    4efc:	cd bf       	out	0x3d, r28	; 61
    4efe:	fe 01       	movw	r30, r28
    4f00:	ed 59       	subi	r30, 0x9D	; 157
    4f02:	ff 4f       	sbci	r31, 0xFF	; 255
    4f04:	80 83       	st	Z, r24
	Dio_enuWriteChannel(LCD_RS_PIN_NUM,DIO_LOGIC_HIGH);
    4f06:	80 e1       	ldi	r24, 0x10	; 16
    4f08:	61 e0       	ldi	r22, 0x01	; 1
    4f0a:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <Dio_enuWriteChannel>
    4f0e:	fe 01       	movw	r30, r28
    4f10:	e1 5a       	subi	r30, 0xA1	; 161
    4f12:	ff 4f       	sbci	r31, 0xFF	; 255
    4f14:	80 e0       	ldi	r24, 0x00	; 0
    4f16:	90 e0       	ldi	r25, 0x00	; 0
    4f18:	a0 e8       	ldi	r26, 0x80	; 128
    4f1a:	bf e3       	ldi	r27, 0x3F	; 63
    4f1c:	80 83       	st	Z, r24
    4f1e:	91 83       	std	Z+1, r25	; 0x01
    4f20:	a2 83       	std	Z+2, r26	; 0x02
    4f22:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f24:	8e 01       	movw	r16, r28
    4f26:	05 5a       	subi	r16, 0xA5	; 165
    4f28:	1f 4f       	sbci	r17, 0xFF	; 255
    4f2a:	fe 01       	movw	r30, r28
    4f2c:	e1 5a       	subi	r30, 0xA1	; 161
    4f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f30:	60 81       	ld	r22, Z
    4f32:	71 81       	ldd	r23, Z+1	; 0x01
    4f34:	82 81       	ldd	r24, Z+2	; 0x02
    4f36:	93 81       	ldd	r25, Z+3	; 0x03
    4f38:	20 e0       	ldi	r18, 0x00	; 0
    4f3a:	30 e0       	ldi	r19, 0x00	; 0
    4f3c:	4a ef       	ldi	r20, 0xFA	; 250
    4f3e:	54 e4       	ldi	r21, 0x44	; 68
    4f40:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4f44:	dc 01       	movw	r26, r24
    4f46:	cb 01       	movw	r24, r22
    4f48:	f8 01       	movw	r30, r16
    4f4a:	80 83       	st	Z, r24
    4f4c:	91 83       	std	Z+1, r25	; 0x01
    4f4e:	a2 83       	std	Z+2, r26	; 0x02
    4f50:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4f52:	fe 01       	movw	r30, r28
    4f54:	e5 5a       	subi	r30, 0xA5	; 165
    4f56:	ff 4f       	sbci	r31, 0xFF	; 255
    4f58:	60 81       	ld	r22, Z
    4f5a:	71 81       	ldd	r23, Z+1	; 0x01
    4f5c:	82 81       	ldd	r24, Z+2	; 0x02
    4f5e:	93 81       	ldd	r25, Z+3	; 0x03
    4f60:	20 e0       	ldi	r18, 0x00	; 0
    4f62:	30 e0       	ldi	r19, 0x00	; 0
    4f64:	40 e8       	ldi	r20, 0x80	; 128
    4f66:	5f e3       	ldi	r21, 0x3F	; 63
    4f68:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    4f6c:	88 23       	and	r24, r24
    4f6e:	44 f4       	brge	.+16     	; 0x4f80 <Lcd_VidDisplayChracter+0x9c>
		__ticks = 1;
    4f70:	fe 01       	movw	r30, r28
    4f72:	e7 5a       	subi	r30, 0xA7	; 167
    4f74:	ff 4f       	sbci	r31, 0xFF	; 255
    4f76:	81 e0       	ldi	r24, 0x01	; 1
    4f78:	90 e0       	ldi	r25, 0x00	; 0
    4f7a:	91 83       	std	Z+1, r25	; 0x01
    4f7c:	80 83       	st	Z, r24
    4f7e:	64 c0       	rjmp	.+200    	; 0x5048 <Lcd_VidDisplayChracter+0x164>
	else if (__tmp > 65535)
    4f80:	fe 01       	movw	r30, r28
    4f82:	e5 5a       	subi	r30, 0xA5	; 165
    4f84:	ff 4f       	sbci	r31, 0xFF	; 255
    4f86:	60 81       	ld	r22, Z
    4f88:	71 81       	ldd	r23, Z+1	; 0x01
    4f8a:	82 81       	ldd	r24, Z+2	; 0x02
    4f8c:	93 81       	ldd	r25, Z+3	; 0x03
    4f8e:	20 e0       	ldi	r18, 0x00	; 0
    4f90:	3f ef       	ldi	r19, 0xFF	; 255
    4f92:	4f e7       	ldi	r20, 0x7F	; 127
    4f94:	57 e4       	ldi	r21, 0x47	; 71
    4f96:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    4f9a:	18 16       	cp	r1, r24
    4f9c:	0c f0       	brlt	.+2      	; 0x4fa0 <Lcd_VidDisplayChracter+0xbc>
    4f9e:	43 c0       	rjmp	.+134    	; 0x5026 <Lcd_VidDisplayChracter+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fa0:	fe 01       	movw	r30, r28
    4fa2:	e1 5a       	subi	r30, 0xA1	; 161
    4fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fa6:	60 81       	ld	r22, Z
    4fa8:	71 81       	ldd	r23, Z+1	; 0x01
    4faa:	82 81       	ldd	r24, Z+2	; 0x02
    4fac:	93 81       	ldd	r25, Z+3	; 0x03
    4fae:	20 e0       	ldi	r18, 0x00	; 0
    4fb0:	30 e0       	ldi	r19, 0x00	; 0
    4fb2:	40 e2       	ldi	r20, 0x20	; 32
    4fb4:	51 e4       	ldi	r21, 0x41	; 65
    4fb6:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4fba:	dc 01       	movw	r26, r24
    4fbc:	cb 01       	movw	r24, r22
    4fbe:	8e 01       	movw	r16, r28
    4fc0:	07 5a       	subi	r16, 0xA7	; 167
    4fc2:	1f 4f       	sbci	r17, 0xFF	; 255
    4fc4:	bc 01       	movw	r22, r24
    4fc6:	cd 01       	movw	r24, r26
    4fc8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4fcc:	dc 01       	movw	r26, r24
    4fce:	cb 01       	movw	r24, r22
    4fd0:	f8 01       	movw	r30, r16
    4fd2:	91 83       	std	Z+1, r25	; 0x01
    4fd4:	80 83       	st	Z, r24
    4fd6:	1f c0       	rjmp	.+62     	; 0x5016 <Lcd_VidDisplayChracter+0x132>
    4fd8:	fe 01       	movw	r30, r28
    4fda:	e9 5a       	subi	r30, 0xA9	; 169
    4fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    4fde:	88 ec       	ldi	r24, 0xC8	; 200
    4fe0:	90 e0       	ldi	r25, 0x00	; 0
    4fe2:	91 83       	std	Z+1, r25	; 0x01
    4fe4:	80 83       	st	Z, r24
    4fe6:	fe 01       	movw	r30, r28
    4fe8:	e9 5a       	subi	r30, 0xA9	; 169
    4fea:	ff 4f       	sbci	r31, 0xFF	; 255
    4fec:	80 81       	ld	r24, Z
    4fee:	91 81       	ldd	r25, Z+1	; 0x01
    4ff0:	01 97       	sbiw	r24, 0x01	; 1
    4ff2:	f1 f7       	brne	.-4      	; 0x4ff0 <Lcd_VidDisplayChracter+0x10c>
    4ff4:	fe 01       	movw	r30, r28
    4ff6:	e9 5a       	subi	r30, 0xA9	; 169
    4ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    4ffa:	91 83       	std	Z+1, r25	; 0x01
    4ffc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ffe:	de 01       	movw	r26, r28
    5000:	a7 5a       	subi	r26, 0xA7	; 167
    5002:	bf 4f       	sbci	r27, 0xFF	; 255
    5004:	fe 01       	movw	r30, r28
    5006:	e7 5a       	subi	r30, 0xA7	; 167
    5008:	ff 4f       	sbci	r31, 0xFF	; 255
    500a:	80 81       	ld	r24, Z
    500c:	91 81       	ldd	r25, Z+1	; 0x01
    500e:	01 97       	sbiw	r24, 0x01	; 1
    5010:	11 96       	adiw	r26, 0x01	; 1
    5012:	9c 93       	st	X, r25
    5014:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5016:	fe 01       	movw	r30, r28
    5018:	e7 5a       	subi	r30, 0xA7	; 167
    501a:	ff 4f       	sbci	r31, 0xFF	; 255
    501c:	80 81       	ld	r24, Z
    501e:	91 81       	ldd	r25, Z+1	; 0x01
    5020:	00 97       	sbiw	r24, 0x00	; 0
    5022:	d1 f6       	brne	.-76     	; 0x4fd8 <Lcd_VidDisplayChracter+0xf4>
    5024:	27 c0       	rjmp	.+78     	; 0x5074 <Lcd_VidDisplayChracter+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5026:	8e 01       	movw	r16, r28
    5028:	07 5a       	subi	r16, 0xA7	; 167
    502a:	1f 4f       	sbci	r17, 0xFF	; 255
    502c:	fe 01       	movw	r30, r28
    502e:	e5 5a       	subi	r30, 0xA5	; 165
    5030:	ff 4f       	sbci	r31, 0xFF	; 255
    5032:	60 81       	ld	r22, Z
    5034:	71 81       	ldd	r23, Z+1	; 0x01
    5036:	82 81       	ldd	r24, Z+2	; 0x02
    5038:	93 81       	ldd	r25, Z+3	; 0x03
    503a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    503e:	dc 01       	movw	r26, r24
    5040:	cb 01       	movw	r24, r22
    5042:	f8 01       	movw	r30, r16
    5044:	91 83       	std	Z+1, r25	; 0x01
    5046:	80 83       	st	Z, r24
    5048:	de 01       	movw	r26, r28
    504a:	ab 5a       	subi	r26, 0xAB	; 171
    504c:	bf 4f       	sbci	r27, 0xFF	; 255
    504e:	fe 01       	movw	r30, r28
    5050:	e7 5a       	subi	r30, 0xA7	; 167
    5052:	ff 4f       	sbci	r31, 0xFF	; 255
    5054:	80 81       	ld	r24, Z
    5056:	91 81       	ldd	r25, Z+1	; 0x01
    5058:	8d 93       	st	X+, r24
    505a:	9c 93       	st	X, r25
    505c:	fe 01       	movw	r30, r28
    505e:	eb 5a       	subi	r30, 0xAB	; 171
    5060:	ff 4f       	sbci	r31, 0xFF	; 255
    5062:	80 81       	ld	r24, Z
    5064:	91 81       	ldd	r25, Z+1	; 0x01
    5066:	01 97       	sbiw	r24, 0x01	; 1
    5068:	f1 f7       	brne	.-4      	; 0x5066 <Lcd_VidDisplayChracter+0x182>
    506a:	fe 01       	movw	r30, r28
    506c:	eb 5a       	subi	r30, 0xAB	; 171
    506e:	ff 4f       	sbci	r31, 0xFF	; 255
    5070:	91 83       	std	Z+1, r25	; 0x01
    5072:	80 83       	st	Z, r24
	_delay_ms(1);
	Dio_enuWriteChannel(LCD_E_PIN_NUM,DIO_LOGIC_HIGH);
    5074:	81 e1       	ldi	r24, 0x11	; 17
    5076:	61 e0       	ldi	r22, 0x01	; 1
    5078:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <Dio_enuWriteChannel>
    507c:	fe 01       	movw	r30, r28
    507e:	ef 5a       	subi	r30, 0xAF	; 175
    5080:	ff 4f       	sbci	r31, 0xFF	; 255
    5082:	80 e0       	ldi	r24, 0x00	; 0
    5084:	90 e0       	ldi	r25, 0x00	; 0
    5086:	a0 e8       	ldi	r26, 0x80	; 128
    5088:	bf e3       	ldi	r27, 0x3F	; 63
    508a:	80 83       	st	Z, r24
    508c:	91 83       	std	Z+1, r25	; 0x01
    508e:	a2 83       	std	Z+2, r26	; 0x02
    5090:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5092:	8e 01       	movw	r16, r28
    5094:	03 5b       	subi	r16, 0xB3	; 179
    5096:	1f 4f       	sbci	r17, 0xFF	; 255
    5098:	fe 01       	movw	r30, r28
    509a:	ef 5a       	subi	r30, 0xAF	; 175
    509c:	ff 4f       	sbci	r31, 0xFF	; 255
    509e:	60 81       	ld	r22, Z
    50a0:	71 81       	ldd	r23, Z+1	; 0x01
    50a2:	82 81       	ldd	r24, Z+2	; 0x02
    50a4:	93 81       	ldd	r25, Z+3	; 0x03
    50a6:	20 e0       	ldi	r18, 0x00	; 0
    50a8:	30 e0       	ldi	r19, 0x00	; 0
    50aa:	4a ef       	ldi	r20, 0xFA	; 250
    50ac:	54 e4       	ldi	r21, 0x44	; 68
    50ae:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    50b2:	dc 01       	movw	r26, r24
    50b4:	cb 01       	movw	r24, r22
    50b6:	f8 01       	movw	r30, r16
    50b8:	80 83       	st	Z, r24
    50ba:	91 83       	std	Z+1, r25	; 0x01
    50bc:	a2 83       	std	Z+2, r26	; 0x02
    50be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    50c0:	fe 01       	movw	r30, r28
    50c2:	e3 5b       	subi	r30, 0xB3	; 179
    50c4:	ff 4f       	sbci	r31, 0xFF	; 255
    50c6:	60 81       	ld	r22, Z
    50c8:	71 81       	ldd	r23, Z+1	; 0x01
    50ca:	82 81       	ldd	r24, Z+2	; 0x02
    50cc:	93 81       	ldd	r25, Z+3	; 0x03
    50ce:	20 e0       	ldi	r18, 0x00	; 0
    50d0:	30 e0       	ldi	r19, 0x00	; 0
    50d2:	40 e8       	ldi	r20, 0x80	; 128
    50d4:	5f e3       	ldi	r21, 0x3F	; 63
    50d6:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    50da:	88 23       	and	r24, r24
    50dc:	44 f4       	brge	.+16     	; 0x50ee <Lcd_VidDisplayChracter+0x20a>
		__ticks = 1;
    50de:	fe 01       	movw	r30, r28
    50e0:	e5 5b       	subi	r30, 0xB5	; 181
    50e2:	ff 4f       	sbci	r31, 0xFF	; 255
    50e4:	81 e0       	ldi	r24, 0x01	; 1
    50e6:	90 e0       	ldi	r25, 0x00	; 0
    50e8:	91 83       	std	Z+1, r25	; 0x01
    50ea:	80 83       	st	Z, r24
    50ec:	64 c0       	rjmp	.+200    	; 0x51b6 <Lcd_VidDisplayChracter+0x2d2>
	else if (__tmp > 65535)
    50ee:	fe 01       	movw	r30, r28
    50f0:	e3 5b       	subi	r30, 0xB3	; 179
    50f2:	ff 4f       	sbci	r31, 0xFF	; 255
    50f4:	60 81       	ld	r22, Z
    50f6:	71 81       	ldd	r23, Z+1	; 0x01
    50f8:	82 81       	ldd	r24, Z+2	; 0x02
    50fa:	93 81       	ldd	r25, Z+3	; 0x03
    50fc:	20 e0       	ldi	r18, 0x00	; 0
    50fe:	3f ef       	ldi	r19, 0xFF	; 255
    5100:	4f e7       	ldi	r20, 0x7F	; 127
    5102:	57 e4       	ldi	r21, 0x47	; 71
    5104:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    5108:	18 16       	cp	r1, r24
    510a:	0c f0       	brlt	.+2      	; 0x510e <Lcd_VidDisplayChracter+0x22a>
    510c:	43 c0       	rjmp	.+134    	; 0x5194 <Lcd_VidDisplayChracter+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    510e:	fe 01       	movw	r30, r28
    5110:	ef 5a       	subi	r30, 0xAF	; 175
    5112:	ff 4f       	sbci	r31, 0xFF	; 255
    5114:	60 81       	ld	r22, Z
    5116:	71 81       	ldd	r23, Z+1	; 0x01
    5118:	82 81       	ldd	r24, Z+2	; 0x02
    511a:	93 81       	ldd	r25, Z+3	; 0x03
    511c:	20 e0       	ldi	r18, 0x00	; 0
    511e:	30 e0       	ldi	r19, 0x00	; 0
    5120:	40 e2       	ldi	r20, 0x20	; 32
    5122:	51 e4       	ldi	r21, 0x41	; 65
    5124:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5128:	dc 01       	movw	r26, r24
    512a:	cb 01       	movw	r24, r22
    512c:	8e 01       	movw	r16, r28
    512e:	05 5b       	subi	r16, 0xB5	; 181
    5130:	1f 4f       	sbci	r17, 0xFF	; 255
    5132:	bc 01       	movw	r22, r24
    5134:	cd 01       	movw	r24, r26
    5136:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    513a:	dc 01       	movw	r26, r24
    513c:	cb 01       	movw	r24, r22
    513e:	f8 01       	movw	r30, r16
    5140:	91 83       	std	Z+1, r25	; 0x01
    5142:	80 83       	st	Z, r24
    5144:	1f c0       	rjmp	.+62     	; 0x5184 <Lcd_VidDisplayChracter+0x2a0>
    5146:	fe 01       	movw	r30, r28
    5148:	e7 5b       	subi	r30, 0xB7	; 183
    514a:	ff 4f       	sbci	r31, 0xFF	; 255
    514c:	88 ec       	ldi	r24, 0xC8	; 200
    514e:	90 e0       	ldi	r25, 0x00	; 0
    5150:	91 83       	std	Z+1, r25	; 0x01
    5152:	80 83       	st	Z, r24
    5154:	fe 01       	movw	r30, r28
    5156:	e7 5b       	subi	r30, 0xB7	; 183
    5158:	ff 4f       	sbci	r31, 0xFF	; 255
    515a:	80 81       	ld	r24, Z
    515c:	91 81       	ldd	r25, Z+1	; 0x01
    515e:	01 97       	sbiw	r24, 0x01	; 1
    5160:	f1 f7       	brne	.-4      	; 0x515e <Lcd_VidDisplayChracter+0x27a>
    5162:	fe 01       	movw	r30, r28
    5164:	e7 5b       	subi	r30, 0xB7	; 183
    5166:	ff 4f       	sbci	r31, 0xFF	; 255
    5168:	91 83       	std	Z+1, r25	; 0x01
    516a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    516c:	de 01       	movw	r26, r28
    516e:	a5 5b       	subi	r26, 0xB5	; 181
    5170:	bf 4f       	sbci	r27, 0xFF	; 255
    5172:	fe 01       	movw	r30, r28
    5174:	e5 5b       	subi	r30, 0xB5	; 181
    5176:	ff 4f       	sbci	r31, 0xFF	; 255
    5178:	80 81       	ld	r24, Z
    517a:	91 81       	ldd	r25, Z+1	; 0x01
    517c:	01 97       	sbiw	r24, 0x01	; 1
    517e:	11 96       	adiw	r26, 0x01	; 1
    5180:	9c 93       	st	X, r25
    5182:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5184:	fe 01       	movw	r30, r28
    5186:	e5 5b       	subi	r30, 0xB5	; 181
    5188:	ff 4f       	sbci	r31, 0xFF	; 255
    518a:	80 81       	ld	r24, Z
    518c:	91 81       	ldd	r25, Z+1	; 0x01
    518e:	00 97       	sbiw	r24, 0x00	; 0
    5190:	d1 f6       	brne	.-76     	; 0x5146 <Lcd_VidDisplayChracter+0x262>
    5192:	27 c0       	rjmp	.+78     	; 0x51e2 <Lcd_VidDisplayChracter+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5194:	8e 01       	movw	r16, r28
    5196:	05 5b       	subi	r16, 0xB5	; 181
    5198:	1f 4f       	sbci	r17, 0xFF	; 255
    519a:	fe 01       	movw	r30, r28
    519c:	e3 5b       	subi	r30, 0xB3	; 179
    519e:	ff 4f       	sbci	r31, 0xFF	; 255
    51a0:	60 81       	ld	r22, Z
    51a2:	71 81       	ldd	r23, Z+1	; 0x01
    51a4:	82 81       	ldd	r24, Z+2	; 0x02
    51a6:	93 81       	ldd	r25, Z+3	; 0x03
    51a8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    51ac:	dc 01       	movw	r26, r24
    51ae:	cb 01       	movw	r24, r22
    51b0:	f8 01       	movw	r30, r16
    51b2:	91 83       	std	Z+1, r25	; 0x01
    51b4:	80 83       	st	Z, r24
    51b6:	de 01       	movw	r26, r28
    51b8:	a9 5b       	subi	r26, 0xB9	; 185
    51ba:	bf 4f       	sbci	r27, 0xFF	; 255
    51bc:	fe 01       	movw	r30, r28
    51be:	e5 5b       	subi	r30, 0xB5	; 181
    51c0:	ff 4f       	sbci	r31, 0xFF	; 255
    51c2:	80 81       	ld	r24, Z
    51c4:	91 81       	ldd	r25, Z+1	; 0x01
    51c6:	8d 93       	st	X+, r24
    51c8:	9c 93       	st	X, r25
    51ca:	fe 01       	movw	r30, r28
    51cc:	e9 5b       	subi	r30, 0xB9	; 185
    51ce:	ff 4f       	sbci	r31, 0xFF	; 255
    51d0:	80 81       	ld	r24, Z
    51d2:	91 81       	ldd	r25, Z+1	; 0x01
    51d4:	01 97       	sbiw	r24, 0x01	; 1
    51d6:	f1 f7       	brne	.-4      	; 0x51d4 <Lcd_VidDisplayChracter+0x2f0>
    51d8:	fe 01       	movw	r30, r28
    51da:	e9 5b       	subi	r30, 0xB9	; 185
    51dc:	ff 4f       	sbci	r31, 0xFF	; 255
    51de:	91 83       	std	Z+1, r25	; 0x01
    51e0:	80 83       	st	Z, r24
	_delay_ms(1);
#if(LCD_DATA_MODE==LCD_FOUR_BIT_MODE)
	Dio_enuWriteChannel(LCD_DATA_PIN4,GET_BIT(Copy_u8Command,4));
    51e2:	fe 01       	movw	r30, r28
    51e4:	ed 59       	subi	r30, 0x9D	; 157
    51e6:	ff 4f       	sbci	r31, 0xFF	; 255
    51e8:	80 81       	ld	r24, Z
    51ea:	88 2f       	mov	r24, r24
    51ec:	90 e0       	ldi	r25, 0x00	; 0
    51ee:	80 71       	andi	r24, 0x10	; 16
    51f0:	90 70       	andi	r25, 0x00	; 0
    51f2:	95 95       	asr	r25
    51f4:	87 95       	ror	r24
    51f6:	95 95       	asr	r25
    51f8:	87 95       	ror	r24
    51fa:	95 95       	asr	r25
    51fc:	87 95       	ror	r24
    51fe:	95 95       	asr	r25
    5200:	87 95       	ror	r24
    5202:	98 2f       	mov	r25, r24
    5204:	82 e1       	ldi	r24, 0x12	; 18
    5206:	69 2f       	mov	r22, r25
    5208:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <Dio_enuWriteChannel>
	Dio_enuWriteChannel(LCD_DATA_PIN5,GET_BIT(Copy_u8Command,5));
    520c:	fe 01       	movw	r30, r28
    520e:	ed 59       	subi	r30, 0x9D	; 157
    5210:	ff 4f       	sbci	r31, 0xFF	; 255
    5212:	80 81       	ld	r24, Z
    5214:	88 2f       	mov	r24, r24
    5216:	90 e0       	ldi	r25, 0x00	; 0
    5218:	80 72       	andi	r24, 0x20	; 32
    521a:	90 70       	andi	r25, 0x00	; 0
    521c:	95 95       	asr	r25
    521e:	87 95       	ror	r24
    5220:	95 95       	asr	r25
    5222:	87 95       	ror	r24
    5224:	95 95       	asr	r25
    5226:	87 95       	ror	r24
    5228:	95 95       	asr	r25
    522a:	87 95       	ror	r24
    522c:	95 95       	asr	r25
    522e:	87 95       	ror	r24
    5230:	98 2f       	mov	r25, r24
    5232:	83 e1       	ldi	r24, 0x13	; 19
    5234:	69 2f       	mov	r22, r25
    5236:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <Dio_enuWriteChannel>
	Dio_enuWriteChannel(LCD_DATA_PIN6,GET_BIT(Copy_u8Command,6));
    523a:	fe 01       	movw	r30, r28
    523c:	ed 59       	subi	r30, 0x9D	; 157
    523e:	ff 4f       	sbci	r31, 0xFF	; 255
    5240:	80 81       	ld	r24, Z
    5242:	88 2f       	mov	r24, r24
    5244:	90 e0       	ldi	r25, 0x00	; 0
    5246:	80 74       	andi	r24, 0x40	; 64
    5248:	90 70       	andi	r25, 0x00	; 0
    524a:	08 2e       	mov	r0, r24
    524c:	89 2f       	mov	r24, r25
    524e:	00 0c       	add	r0, r0
    5250:	88 1f       	adc	r24, r24
    5252:	99 0b       	sbc	r25, r25
    5254:	00 0c       	add	r0, r0
    5256:	88 1f       	adc	r24, r24
    5258:	99 1f       	adc	r25, r25
    525a:	98 2f       	mov	r25, r24
    525c:	84 e1       	ldi	r24, 0x14	; 20
    525e:	69 2f       	mov	r22, r25
    5260:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <Dio_enuWriteChannel>
	Dio_enuWriteChannel(LCD_DATA_PIN7,GET_BIT(Copy_u8Command,7));
    5264:	fe 01       	movw	r30, r28
    5266:	ed 59       	subi	r30, 0x9D	; 157
    5268:	ff 4f       	sbci	r31, 0xFF	; 255
    526a:	80 81       	ld	r24, Z
    526c:	98 2f       	mov	r25, r24
    526e:	99 1f       	adc	r25, r25
    5270:	99 27       	eor	r25, r25
    5272:	99 1f       	adc	r25, r25
    5274:	85 e1       	ldi	r24, 0x15	; 21
    5276:	69 2f       	mov	r22, r25
    5278:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <Dio_enuWriteChannel>
    527c:	fe 01       	movw	r30, r28
    527e:	ed 5b       	subi	r30, 0xBD	; 189
    5280:	ff 4f       	sbci	r31, 0xFF	; 255
    5282:	80 e0       	ldi	r24, 0x00	; 0
    5284:	90 e0       	ldi	r25, 0x00	; 0
    5286:	a0 e8       	ldi	r26, 0x80	; 128
    5288:	bf e3       	ldi	r27, 0x3F	; 63
    528a:	80 83       	st	Z, r24
    528c:	91 83       	std	Z+1, r25	; 0x01
    528e:	a2 83       	std	Z+2, r26	; 0x02
    5290:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5292:	8e 01       	movw	r16, r28
    5294:	01 5c       	subi	r16, 0xC1	; 193
    5296:	1f 4f       	sbci	r17, 0xFF	; 255
    5298:	fe 01       	movw	r30, r28
    529a:	ed 5b       	subi	r30, 0xBD	; 189
    529c:	ff 4f       	sbci	r31, 0xFF	; 255
    529e:	60 81       	ld	r22, Z
    52a0:	71 81       	ldd	r23, Z+1	; 0x01
    52a2:	82 81       	ldd	r24, Z+2	; 0x02
    52a4:	93 81       	ldd	r25, Z+3	; 0x03
    52a6:	20 e0       	ldi	r18, 0x00	; 0
    52a8:	30 e0       	ldi	r19, 0x00	; 0
    52aa:	4a ef       	ldi	r20, 0xFA	; 250
    52ac:	54 e4       	ldi	r21, 0x44	; 68
    52ae:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    52b2:	dc 01       	movw	r26, r24
    52b4:	cb 01       	movw	r24, r22
    52b6:	f8 01       	movw	r30, r16
    52b8:	80 83       	st	Z, r24
    52ba:	91 83       	std	Z+1, r25	; 0x01
    52bc:	a2 83       	std	Z+2, r26	; 0x02
    52be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    52c0:	fe 01       	movw	r30, r28
    52c2:	ff 96       	adiw	r30, 0x3f	; 63
    52c4:	60 81       	ld	r22, Z
    52c6:	71 81       	ldd	r23, Z+1	; 0x01
    52c8:	82 81       	ldd	r24, Z+2	; 0x02
    52ca:	93 81       	ldd	r25, Z+3	; 0x03
    52cc:	20 e0       	ldi	r18, 0x00	; 0
    52ce:	30 e0       	ldi	r19, 0x00	; 0
    52d0:	40 e8       	ldi	r20, 0x80	; 128
    52d2:	5f e3       	ldi	r21, 0x3F	; 63
    52d4:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    52d8:	88 23       	and	r24, r24
    52da:	2c f4       	brge	.+10     	; 0x52e6 <Lcd_VidDisplayChracter+0x402>
		__ticks = 1;
    52dc:	81 e0       	ldi	r24, 0x01	; 1
    52de:	90 e0       	ldi	r25, 0x00	; 0
    52e0:	9e af       	std	Y+62, r25	; 0x3e
    52e2:	8d af       	std	Y+61, r24	; 0x3d
    52e4:	46 c0       	rjmp	.+140    	; 0x5372 <Lcd_VidDisplayChracter+0x48e>
	else if (__tmp > 65535)
    52e6:	fe 01       	movw	r30, r28
    52e8:	ff 96       	adiw	r30, 0x3f	; 63
    52ea:	60 81       	ld	r22, Z
    52ec:	71 81       	ldd	r23, Z+1	; 0x01
    52ee:	82 81       	ldd	r24, Z+2	; 0x02
    52f0:	93 81       	ldd	r25, Z+3	; 0x03
    52f2:	20 e0       	ldi	r18, 0x00	; 0
    52f4:	3f ef       	ldi	r19, 0xFF	; 255
    52f6:	4f e7       	ldi	r20, 0x7F	; 127
    52f8:	57 e4       	ldi	r21, 0x47	; 71
    52fa:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    52fe:	18 16       	cp	r1, r24
    5300:	64 f5       	brge	.+88     	; 0x535a <Lcd_VidDisplayChracter+0x476>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5302:	fe 01       	movw	r30, r28
    5304:	ed 5b       	subi	r30, 0xBD	; 189
    5306:	ff 4f       	sbci	r31, 0xFF	; 255
    5308:	60 81       	ld	r22, Z
    530a:	71 81       	ldd	r23, Z+1	; 0x01
    530c:	82 81       	ldd	r24, Z+2	; 0x02
    530e:	93 81       	ldd	r25, Z+3	; 0x03
    5310:	20 e0       	ldi	r18, 0x00	; 0
    5312:	30 e0       	ldi	r19, 0x00	; 0
    5314:	40 e2       	ldi	r20, 0x20	; 32
    5316:	51 e4       	ldi	r21, 0x41	; 65
    5318:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    531c:	dc 01       	movw	r26, r24
    531e:	cb 01       	movw	r24, r22
    5320:	bc 01       	movw	r22, r24
    5322:	cd 01       	movw	r24, r26
    5324:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5328:	dc 01       	movw	r26, r24
    532a:	cb 01       	movw	r24, r22
    532c:	9e af       	std	Y+62, r25	; 0x3e
    532e:	8d af       	std	Y+61, r24	; 0x3d
    5330:	0f c0       	rjmp	.+30     	; 0x5350 <Lcd_VidDisplayChracter+0x46c>
    5332:	88 ec       	ldi	r24, 0xC8	; 200
    5334:	90 e0       	ldi	r25, 0x00	; 0
    5336:	9c af       	std	Y+60, r25	; 0x3c
    5338:	8b af       	std	Y+59, r24	; 0x3b
    533a:	8b ad       	ldd	r24, Y+59	; 0x3b
    533c:	9c ad       	ldd	r25, Y+60	; 0x3c
    533e:	01 97       	sbiw	r24, 0x01	; 1
    5340:	f1 f7       	brne	.-4      	; 0x533e <Lcd_VidDisplayChracter+0x45a>
    5342:	9c af       	std	Y+60, r25	; 0x3c
    5344:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5346:	8d ad       	ldd	r24, Y+61	; 0x3d
    5348:	9e ad       	ldd	r25, Y+62	; 0x3e
    534a:	01 97       	sbiw	r24, 0x01	; 1
    534c:	9e af       	std	Y+62, r25	; 0x3e
    534e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5350:	8d ad       	ldd	r24, Y+61	; 0x3d
    5352:	9e ad       	ldd	r25, Y+62	; 0x3e
    5354:	00 97       	sbiw	r24, 0x00	; 0
    5356:	69 f7       	brne	.-38     	; 0x5332 <Lcd_VidDisplayChracter+0x44e>
    5358:	16 c0       	rjmp	.+44     	; 0x5386 <Lcd_VidDisplayChracter+0x4a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    535a:	fe 01       	movw	r30, r28
    535c:	ff 96       	adiw	r30, 0x3f	; 63
    535e:	60 81       	ld	r22, Z
    5360:	71 81       	ldd	r23, Z+1	; 0x01
    5362:	82 81       	ldd	r24, Z+2	; 0x02
    5364:	93 81       	ldd	r25, Z+3	; 0x03
    5366:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    536a:	dc 01       	movw	r26, r24
    536c:	cb 01       	movw	r24, r22
    536e:	9e af       	std	Y+62, r25	; 0x3e
    5370:	8d af       	std	Y+61, r24	; 0x3d
    5372:	8d ad       	ldd	r24, Y+61	; 0x3d
    5374:	9e ad       	ldd	r25, Y+62	; 0x3e
    5376:	9a af       	std	Y+58, r25	; 0x3a
    5378:	89 af       	std	Y+57, r24	; 0x39
    537a:	89 ad       	ldd	r24, Y+57	; 0x39
    537c:	9a ad       	ldd	r25, Y+58	; 0x3a
    537e:	01 97       	sbiw	r24, 0x01	; 1
    5380:	f1 f7       	brne	.-4      	; 0x537e <Lcd_VidDisplayChracter+0x49a>
    5382:	9a af       	std	Y+58, r25	; 0x3a
    5384:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	Dio_enuWriteChannel(LCD_E_PIN_NUM,DIO_LOGIC_LOW);
    5386:	81 e1       	ldi	r24, 0x11	; 17
    5388:	60 e0       	ldi	r22, 0x00	; 0
    538a:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <Dio_enuWriteChannel>
    538e:	80 e0       	ldi	r24, 0x00	; 0
    5390:	90 e0       	ldi	r25, 0x00	; 0
    5392:	a0 e8       	ldi	r26, 0x80	; 128
    5394:	bf e3       	ldi	r27, 0x3F	; 63
    5396:	8d ab       	std	Y+53, r24	; 0x35
    5398:	9e ab       	std	Y+54, r25	; 0x36
    539a:	af ab       	std	Y+55, r26	; 0x37
    539c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    539e:	6d a9       	ldd	r22, Y+53	; 0x35
    53a0:	7e a9       	ldd	r23, Y+54	; 0x36
    53a2:	8f a9       	ldd	r24, Y+55	; 0x37
    53a4:	98 ad       	ldd	r25, Y+56	; 0x38
    53a6:	20 e0       	ldi	r18, 0x00	; 0
    53a8:	30 e0       	ldi	r19, 0x00	; 0
    53aa:	4a ef       	ldi	r20, 0xFA	; 250
    53ac:	54 e4       	ldi	r21, 0x44	; 68
    53ae:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    53b2:	dc 01       	movw	r26, r24
    53b4:	cb 01       	movw	r24, r22
    53b6:	89 ab       	std	Y+49, r24	; 0x31
    53b8:	9a ab       	std	Y+50, r25	; 0x32
    53ba:	ab ab       	std	Y+51, r26	; 0x33
    53bc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    53be:	69 a9       	ldd	r22, Y+49	; 0x31
    53c0:	7a a9       	ldd	r23, Y+50	; 0x32
    53c2:	8b a9       	ldd	r24, Y+51	; 0x33
    53c4:	9c a9       	ldd	r25, Y+52	; 0x34
    53c6:	20 e0       	ldi	r18, 0x00	; 0
    53c8:	30 e0       	ldi	r19, 0x00	; 0
    53ca:	40 e8       	ldi	r20, 0x80	; 128
    53cc:	5f e3       	ldi	r21, 0x3F	; 63
    53ce:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    53d2:	88 23       	and	r24, r24
    53d4:	2c f4       	brge	.+10     	; 0x53e0 <Lcd_VidDisplayChracter+0x4fc>
		__ticks = 1;
    53d6:	81 e0       	ldi	r24, 0x01	; 1
    53d8:	90 e0       	ldi	r25, 0x00	; 0
    53da:	98 ab       	std	Y+48, r25	; 0x30
    53dc:	8f a7       	std	Y+47, r24	; 0x2f
    53de:	3f c0       	rjmp	.+126    	; 0x545e <Lcd_VidDisplayChracter+0x57a>
	else if (__tmp > 65535)
    53e0:	69 a9       	ldd	r22, Y+49	; 0x31
    53e2:	7a a9       	ldd	r23, Y+50	; 0x32
    53e4:	8b a9       	ldd	r24, Y+51	; 0x33
    53e6:	9c a9       	ldd	r25, Y+52	; 0x34
    53e8:	20 e0       	ldi	r18, 0x00	; 0
    53ea:	3f ef       	ldi	r19, 0xFF	; 255
    53ec:	4f e7       	ldi	r20, 0x7F	; 127
    53ee:	57 e4       	ldi	r21, 0x47	; 71
    53f0:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    53f4:	18 16       	cp	r1, r24
    53f6:	4c f5       	brge	.+82     	; 0x544a <Lcd_VidDisplayChracter+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53f8:	6d a9       	ldd	r22, Y+53	; 0x35
    53fa:	7e a9       	ldd	r23, Y+54	; 0x36
    53fc:	8f a9       	ldd	r24, Y+55	; 0x37
    53fe:	98 ad       	ldd	r25, Y+56	; 0x38
    5400:	20 e0       	ldi	r18, 0x00	; 0
    5402:	30 e0       	ldi	r19, 0x00	; 0
    5404:	40 e2       	ldi	r20, 0x20	; 32
    5406:	51 e4       	ldi	r21, 0x41	; 65
    5408:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    540c:	dc 01       	movw	r26, r24
    540e:	cb 01       	movw	r24, r22
    5410:	bc 01       	movw	r22, r24
    5412:	cd 01       	movw	r24, r26
    5414:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5418:	dc 01       	movw	r26, r24
    541a:	cb 01       	movw	r24, r22
    541c:	98 ab       	std	Y+48, r25	; 0x30
    541e:	8f a7       	std	Y+47, r24	; 0x2f
    5420:	0f c0       	rjmp	.+30     	; 0x5440 <Lcd_VidDisplayChracter+0x55c>
    5422:	88 ec       	ldi	r24, 0xC8	; 200
    5424:	90 e0       	ldi	r25, 0x00	; 0
    5426:	9e a7       	std	Y+46, r25	; 0x2e
    5428:	8d a7       	std	Y+45, r24	; 0x2d
    542a:	8d a5       	ldd	r24, Y+45	; 0x2d
    542c:	9e a5       	ldd	r25, Y+46	; 0x2e
    542e:	01 97       	sbiw	r24, 0x01	; 1
    5430:	f1 f7       	brne	.-4      	; 0x542e <Lcd_VidDisplayChracter+0x54a>
    5432:	9e a7       	std	Y+46, r25	; 0x2e
    5434:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5436:	8f a5       	ldd	r24, Y+47	; 0x2f
    5438:	98 a9       	ldd	r25, Y+48	; 0x30
    543a:	01 97       	sbiw	r24, 0x01	; 1
    543c:	98 ab       	std	Y+48, r25	; 0x30
    543e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5440:	8f a5       	ldd	r24, Y+47	; 0x2f
    5442:	98 a9       	ldd	r25, Y+48	; 0x30
    5444:	00 97       	sbiw	r24, 0x00	; 0
    5446:	69 f7       	brne	.-38     	; 0x5422 <Lcd_VidDisplayChracter+0x53e>
    5448:	14 c0       	rjmp	.+40     	; 0x5472 <Lcd_VidDisplayChracter+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    544a:	69 a9       	ldd	r22, Y+49	; 0x31
    544c:	7a a9       	ldd	r23, Y+50	; 0x32
    544e:	8b a9       	ldd	r24, Y+51	; 0x33
    5450:	9c a9       	ldd	r25, Y+52	; 0x34
    5452:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5456:	dc 01       	movw	r26, r24
    5458:	cb 01       	movw	r24, r22
    545a:	98 ab       	std	Y+48, r25	; 0x30
    545c:	8f a7       	std	Y+47, r24	; 0x2f
    545e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5460:	98 a9       	ldd	r25, Y+48	; 0x30
    5462:	9c a7       	std	Y+44, r25	; 0x2c
    5464:	8b a7       	std	Y+43, r24	; 0x2b
    5466:	8b a5       	ldd	r24, Y+43	; 0x2b
    5468:	9c a5       	ldd	r25, Y+44	; 0x2c
    546a:	01 97       	sbiw	r24, 0x01	; 1
    546c:	f1 f7       	brne	.-4      	; 0x546a <Lcd_VidDisplayChracter+0x586>
    546e:	9c a7       	std	Y+44, r25	; 0x2c
    5470:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	Dio_enuWriteChannel(LCD_E_PIN_NUM,DIO_LOGIC_HIGH);
    5472:	81 e1       	ldi	r24, 0x11	; 17
    5474:	61 e0       	ldi	r22, 0x01	; 1
    5476:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <Dio_enuWriteChannel>
    547a:	80 e0       	ldi	r24, 0x00	; 0
    547c:	90 e0       	ldi	r25, 0x00	; 0
    547e:	a0 e8       	ldi	r26, 0x80	; 128
    5480:	bf e3       	ldi	r27, 0x3F	; 63
    5482:	8f a3       	std	Y+39, r24	; 0x27
    5484:	98 a7       	std	Y+40, r25	; 0x28
    5486:	a9 a7       	std	Y+41, r26	; 0x29
    5488:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    548a:	6f a1       	ldd	r22, Y+39	; 0x27
    548c:	78 a5       	ldd	r23, Y+40	; 0x28
    548e:	89 a5       	ldd	r24, Y+41	; 0x29
    5490:	9a a5       	ldd	r25, Y+42	; 0x2a
    5492:	20 e0       	ldi	r18, 0x00	; 0
    5494:	30 e0       	ldi	r19, 0x00	; 0
    5496:	4a ef       	ldi	r20, 0xFA	; 250
    5498:	54 e4       	ldi	r21, 0x44	; 68
    549a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    549e:	dc 01       	movw	r26, r24
    54a0:	cb 01       	movw	r24, r22
    54a2:	8b a3       	std	Y+35, r24	; 0x23
    54a4:	9c a3       	std	Y+36, r25	; 0x24
    54a6:	ad a3       	std	Y+37, r26	; 0x25
    54a8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    54aa:	6b a1       	ldd	r22, Y+35	; 0x23
    54ac:	7c a1       	ldd	r23, Y+36	; 0x24
    54ae:	8d a1       	ldd	r24, Y+37	; 0x25
    54b0:	9e a1       	ldd	r25, Y+38	; 0x26
    54b2:	20 e0       	ldi	r18, 0x00	; 0
    54b4:	30 e0       	ldi	r19, 0x00	; 0
    54b6:	40 e8       	ldi	r20, 0x80	; 128
    54b8:	5f e3       	ldi	r21, 0x3F	; 63
    54ba:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    54be:	88 23       	and	r24, r24
    54c0:	2c f4       	brge	.+10     	; 0x54cc <Lcd_VidDisplayChracter+0x5e8>
		__ticks = 1;
    54c2:	81 e0       	ldi	r24, 0x01	; 1
    54c4:	90 e0       	ldi	r25, 0x00	; 0
    54c6:	9a a3       	std	Y+34, r25	; 0x22
    54c8:	89 a3       	std	Y+33, r24	; 0x21
    54ca:	3f c0       	rjmp	.+126    	; 0x554a <Lcd_VidDisplayChracter+0x666>
	else if (__tmp > 65535)
    54cc:	6b a1       	ldd	r22, Y+35	; 0x23
    54ce:	7c a1       	ldd	r23, Y+36	; 0x24
    54d0:	8d a1       	ldd	r24, Y+37	; 0x25
    54d2:	9e a1       	ldd	r25, Y+38	; 0x26
    54d4:	20 e0       	ldi	r18, 0x00	; 0
    54d6:	3f ef       	ldi	r19, 0xFF	; 255
    54d8:	4f e7       	ldi	r20, 0x7F	; 127
    54da:	57 e4       	ldi	r21, 0x47	; 71
    54dc:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    54e0:	18 16       	cp	r1, r24
    54e2:	4c f5       	brge	.+82     	; 0x5536 <Lcd_VidDisplayChracter+0x652>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54e4:	6f a1       	ldd	r22, Y+39	; 0x27
    54e6:	78 a5       	ldd	r23, Y+40	; 0x28
    54e8:	89 a5       	ldd	r24, Y+41	; 0x29
    54ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    54ec:	20 e0       	ldi	r18, 0x00	; 0
    54ee:	30 e0       	ldi	r19, 0x00	; 0
    54f0:	40 e2       	ldi	r20, 0x20	; 32
    54f2:	51 e4       	ldi	r21, 0x41	; 65
    54f4:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    54f8:	dc 01       	movw	r26, r24
    54fa:	cb 01       	movw	r24, r22
    54fc:	bc 01       	movw	r22, r24
    54fe:	cd 01       	movw	r24, r26
    5500:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5504:	dc 01       	movw	r26, r24
    5506:	cb 01       	movw	r24, r22
    5508:	9a a3       	std	Y+34, r25	; 0x22
    550a:	89 a3       	std	Y+33, r24	; 0x21
    550c:	0f c0       	rjmp	.+30     	; 0x552c <Lcd_VidDisplayChracter+0x648>
    550e:	88 ec       	ldi	r24, 0xC8	; 200
    5510:	90 e0       	ldi	r25, 0x00	; 0
    5512:	98 a3       	std	Y+32, r25	; 0x20
    5514:	8f 8f       	std	Y+31, r24	; 0x1f
    5516:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5518:	98 a1       	ldd	r25, Y+32	; 0x20
    551a:	01 97       	sbiw	r24, 0x01	; 1
    551c:	f1 f7       	brne	.-4      	; 0x551a <Lcd_VidDisplayChracter+0x636>
    551e:	98 a3       	std	Y+32, r25	; 0x20
    5520:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5522:	89 a1       	ldd	r24, Y+33	; 0x21
    5524:	9a a1       	ldd	r25, Y+34	; 0x22
    5526:	01 97       	sbiw	r24, 0x01	; 1
    5528:	9a a3       	std	Y+34, r25	; 0x22
    552a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    552c:	89 a1       	ldd	r24, Y+33	; 0x21
    552e:	9a a1       	ldd	r25, Y+34	; 0x22
    5530:	00 97       	sbiw	r24, 0x00	; 0
    5532:	69 f7       	brne	.-38     	; 0x550e <Lcd_VidDisplayChracter+0x62a>
    5534:	14 c0       	rjmp	.+40     	; 0x555e <Lcd_VidDisplayChracter+0x67a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5536:	6b a1       	ldd	r22, Y+35	; 0x23
    5538:	7c a1       	ldd	r23, Y+36	; 0x24
    553a:	8d a1       	ldd	r24, Y+37	; 0x25
    553c:	9e a1       	ldd	r25, Y+38	; 0x26
    553e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5542:	dc 01       	movw	r26, r24
    5544:	cb 01       	movw	r24, r22
    5546:	9a a3       	std	Y+34, r25	; 0x22
    5548:	89 a3       	std	Y+33, r24	; 0x21
    554a:	89 a1       	ldd	r24, Y+33	; 0x21
    554c:	9a a1       	ldd	r25, Y+34	; 0x22
    554e:	9e 8f       	std	Y+30, r25	; 0x1e
    5550:	8d 8f       	std	Y+29, r24	; 0x1d
    5552:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5554:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5556:	01 97       	sbiw	r24, 0x01	; 1
    5558:	f1 f7       	brne	.-4      	; 0x5556 <Lcd_VidDisplayChracter+0x672>
    555a:	9e 8f       	std	Y+30, r25	; 0x1e
    555c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);


	Dio_enuWriteChannel(LCD_DATA_PIN4,GET_BIT(Copy_u8Command,0));
    555e:	fe 01       	movw	r30, r28
    5560:	ed 59       	subi	r30, 0x9D	; 157
    5562:	ff 4f       	sbci	r31, 0xFF	; 255
    5564:	80 81       	ld	r24, Z
    5566:	98 2f       	mov	r25, r24
    5568:	91 70       	andi	r25, 0x01	; 1
    556a:	82 e1       	ldi	r24, 0x12	; 18
    556c:	69 2f       	mov	r22, r25
    556e:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <Dio_enuWriteChannel>
	Dio_enuWriteChannel(LCD_DATA_PIN5,GET_BIT(Copy_u8Command,1));
    5572:	fe 01       	movw	r30, r28
    5574:	ed 59       	subi	r30, 0x9D	; 157
    5576:	ff 4f       	sbci	r31, 0xFF	; 255
    5578:	80 81       	ld	r24, Z
    557a:	88 2f       	mov	r24, r24
    557c:	90 e0       	ldi	r25, 0x00	; 0
    557e:	82 70       	andi	r24, 0x02	; 2
    5580:	90 70       	andi	r25, 0x00	; 0
    5582:	95 95       	asr	r25
    5584:	87 95       	ror	r24
    5586:	98 2f       	mov	r25, r24
    5588:	83 e1       	ldi	r24, 0x13	; 19
    558a:	69 2f       	mov	r22, r25
    558c:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <Dio_enuWriteChannel>
	Dio_enuWriteChannel(LCD_DATA_PIN6,GET_BIT(Copy_u8Command,2));
    5590:	fe 01       	movw	r30, r28
    5592:	ed 59       	subi	r30, 0x9D	; 157
    5594:	ff 4f       	sbci	r31, 0xFF	; 255
    5596:	80 81       	ld	r24, Z
    5598:	88 2f       	mov	r24, r24
    559a:	90 e0       	ldi	r25, 0x00	; 0
    559c:	84 70       	andi	r24, 0x04	; 4
    559e:	90 70       	andi	r25, 0x00	; 0
    55a0:	95 95       	asr	r25
    55a2:	87 95       	ror	r24
    55a4:	95 95       	asr	r25
    55a6:	87 95       	ror	r24
    55a8:	98 2f       	mov	r25, r24
    55aa:	84 e1       	ldi	r24, 0x14	; 20
    55ac:	69 2f       	mov	r22, r25
    55ae:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <Dio_enuWriteChannel>
	Dio_enuWriteChannel(LCD_DATA_PIN7,GET_BIT(Copy_u8Command,3));
    55b2:	fe 01       	movw	r30, r28
    55b4:	ed 59       	subi	r30, 0x9D	; 157
    55b6:	ff 4f       	sbci	r31, 0xFF	; 255
    55b8:	80 81       	ld	r24, Z
    55ba:	88 2f       	mov	r24, r24
    55bc:	90 e0       	ldi	r25, 0x00	; 0
    55be:	88 70       	andi	r24, 0x08	; 8
    55c0:	90 70       	andi	r25, 0x00	; 0
    55c2:	95 95       	asr	r25
    55c4:	87 95       	ror	r24
    55c6:	95 95       	asr	r25
    55c8:	87 95       	ror	r24
    55ca:	95 95       	asr	r25
    55cc:	87 95       	ror	r24
    55ce:	98 2f       	mov	r25, r24
    55d0:	85 e1       	ldi	r24, 0x15	; 21
    55d2:	69 2f       	mov	r22, r25
    55d4:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <Dio_enuWriteChannel>
    55d8:	80 e0       	ldi	r24, 0x00	; 0
    55da:	90 e0       	ldi	r25, 0x00	; 0
    55dc:	a0 e8       	ldi	r26, 0x80	; 128
    55de:	bf e3       	ldi	r27, 0x3F	; 63
    55e0:	89 8f       	std	Y+25, r24	; 0x19
    55e2:	9a 8f       	std	Y+26, r25	; 0x1a
    55e4:	ab 8f       	std	Y+27, r26	; 0x1b
    55e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55e8:	69 8d       	ldd	r22, Y+25	; 0x19
    55ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    55ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    55ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    55f0:	20 e0       	ldi	r18, 0x00	; 0
    55f2:	30 e0       	ldi	r19, 0x00	; 0
    55f4:	4a ef       	ldi	r20, 0xFA	; 250
    55f6:	54 e4       	ldi	r21, 0x44	; 68
    55f8:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    55fc:	dc 01       	movw	r26, r24
    55fe:	cb 01       	movw	r24, r22
    5600:	8d 8b       	std	Y+21, r24	; 0x15
    5602:	9e 8b       	std	Y+22, r25	; 0x16
    5604:	af 8b       	std	Y+23, r26	; 0x17
    5606:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5608:	6d 89       	ldd	r22, Y+21	; 0x15
    560a:	7e 89       	ldd	r23, Y+22	; 0x16
    560c:	8f 89       	ldd	r24, Y+23	; 0x17
    560e:	98 8d       	ldd	r25, Y+24	; 0x18
    5610:	20 e0       	ldi	r18, 0x00	; 0
    5612:	30 e0       	ldi	r19, 0x00	; 0
    5614:	40 e8       	ldi	r20, 0x80	; 128
    5616:	5f e3       	ldi	r21, 0x3F	; 63
    5618:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    561c:	88 23       	and	r24, r24
    561e:	2c f4       	brge	.+10     	; 0x562a <Lcd_VidDisplayChracter+0x746>
		__ticks = 1;
    5620:	81 e0       	ldi	r24, 0x01	; 1
    5622:	90 e0       	ldi	r25, 0x00	; 0
    5624:	9c 8b       	std	Y+20, r25	; 0x14
    5626:	8b 8b       	std	Y+19, r24	; 0x13
    5628:	3f c0       	rjmp	.+126    	; 0x56a8 <Lcd_VidDisplayChracter+0x7c4>
	else if (__tmp > 65535)
    562a:	6d 89       	ldd	r22, Y+21	; 0x15
    562c:	7e 89       	ldd	r23, Y+22	; 0x16
    562e:	8f 89       	ldd	r24, Y+23	; 0x17
    5630:	98 8d       	ldd	r25, Y+24	; 0x18
    5632:	20 e0       	ldi	r18, 0x00	; 0
    5634:	3f ef       	ldi	r19, 0xFF	; 255
    5636:	4f e7       	ldi	r20, 0x7F	; 127
    5638:	57 e4       	ldi	r21, 0x47	; 71
    563a:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    563e:	18 16       	cp	r1, r24
    5640:	4c f5       	brge	.+82     	; 0x5694 <Lcd_VidDisplayChracter+0x7b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5642:	69 8d       	ldd	r22, Y+25	; 0x19
    5644:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5646:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5648:	9c 8d       	ldd	r25, Y+28	; 0x1c
    564a:	20 e0       	ldi	r18, 0x00	; 0
    564c:	30 e0       	ldi	r19, 0x00	; 0
    564e:	40 e2       	ldi	r20, 0x20	; 32
    5650:	51 e4       	ldi	r21, 0x41	; 65
    5652:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5656:	dc 01       	movw	r26, r24
    5658:	cb 01       	movw	r24, r22
    565a:	bc 01       	movw	r22, r24
    565c:	cd 01       	movw	r24, r26
    565e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5662:	dc 01       	movw	r26, r24
    5664:	cb 01       	movw	r24, r22
    5666:	9c 8b       	std	Y+20, r25	; 0x14
    5668:	8b 8b       	std	Y+19, r24	; 0x13
    566a:	0f c0       	rjmp	.+30     	; 0x568a <Lcd_VidDisplayChracter+0x7a6>
    566c:	88 ec       	ldi	r24, 0xC8	; 200
    566e:	90 e0       	ldi	r25, 0x00	; 0
    5670:	9a 8b       	std	Y+18, r25	; 0x12
    5672:	89 8b       	std	Y+17, r24	; 0x11
    5674:	89 89       	ldd	r24, Y+17	; 0x11
    5676:	9a 89       	ldd	r25, Y+18	; 0x12
    5678:	01 97       	sbiw	r24, 0x01	; 1
    567a:	f1 f7       	brne	.-4      	; 0x5678 <Lcd_VidDisplayChracter+0x794>
    567c:	9a 8b       	std	Y+18, r25	; 0x12
    567e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5680:	8b 89       	ldd	r24, Y+19	; 0x13
    5682:	9c 89       	ldd	r25, Y+20	; 0x14
    5684:	01 97       	sbiw	r24, 0x01	; 1
    5686:	9c 8b       	std	Y+20, r25	; 0x14
    5688:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    568a:	8b 89       	ldd	r24, Y+19	; 0x13
    568c:	9c 89       	ldd	r25, Y+20	; 0x14
    568e:	00 97       	sbiw	r24, 0x00	; 0
    5690:	69 f7       	brne	.-38     	; 0x566c <Lcd_VidDisplayChracter+0x788>
    5692:	14 c0       	rjmp	.+40     	; 0x56bc <Lcd_VidDisplayChracter+0x7d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5694:	6d 89       	ldd	r22, Y+21	; 0x15
    5696:	7e 89       	ldd	r23, Y+22	; 0x16
    5698:	8f 89       	ldd	r24, Y+23	; 0x17
    569a:	98 8d       	ldd	r25, Y+24	; 0x18
    569c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    56a0:	dc 01       	movw	r26, r24
    56a2:	cb 01       	movw	r24, r22
    56a4:	9c 8b       	std	Y+20, r25	; 0x14
    56a6:	8b 8b       	std	Y+19, r24	; 0x13
    56a8:	8b 89       	ldd	r24, Y+19	; 0x13
    56aa:	9c 89       	ldd	r25, Y+20	; 0x14
    56ac:	98 8b       	std	Y+16, r25	; 0x10
    56ae:	8f 87       	std	Y+15, r24	; 0x0f
    56b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    56b2:	98 89       	ldd	r25, Y+16	; 0x10
    56b4:	01 97       	sbiw	r24, 0x01	; 1
    56b6:	f1 f7       	brne	.-4      	; 0x56b4 <Lcd_VidDisplayChracter+0x7d0>
    56b8:	98 8b       	std	Y+16, r25	; 0x10
    56ba:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);
	Dio_enuWriteChannel(LCD_E_PIN_NUM,DIO_LOGIC_LOW);
    56bc:	81 e1       	ldi	r24, 0x11	; 17
    56be:	60 e0       	ldi	r22, 0x00	; 0
    56c0:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <Dio_enuWriteChannel>
    56c4:	80 e0       	ldi	r24, 0x00	; 0
    56c6:	90 e0       	ldi	r25, 0x00	; 0
    56c8:	a0 e8       	ldi	r26, 0x80	; 128
    56ca:	bf e3       	ldi	r27, 0x3F	; 63
    56cc:	8b 87       	std	Y+11, r24	; 0x0b
    56ce:	9c 87       	std	Y+12, r25	; 0x0c
    56d0:	ad 87       	std	Y+13, r26	; 0x0d
    56d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    56d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    56d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    56da:	9e 85       	ldd	r25, Y+14	; 0x0e
    56dc:	20 e0       	ldi	r18, 0x00	; 0
    56de:	30 e0       	ldi	r19, 0x00	; 0
    56e0:	4a ef       	ldi	r20, 0xFA	; 250
    56e2:	54 e4       	ldi	r21, 0x44	; 68
    56e4:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    56e8:	dc 01       	movw	r26, r24
    56ea:	cb 01       	movw	r24, r22
    56ec:	8f 83       	std	Y+7, r24	; 0x07
    56ee:	98 87       	std	Y+8, r25	; 0x08
    56f0:	a9 87       	std	Y+9, r26	; 0x09
    56f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    56f4:	6f 81       	ldd	r22, Y+7	; 0x07
    56f6:	78 85       	ldd	r23, Y+8	; 0x08
    56f8:	89 85       	ldd	r24, Y+9	; 0x09
    56fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    56fc:	20 e0       	ldi	r18, 0x00	; 0
    56fe:	30 e0       	ldi	r19, 0x00	; 0
    5700:	40 e8       	ldi	r20, 0x80	; 128
    5702:	5f e3       	ldi	r21, 0x3F	; 63
    5704:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    5708:	88 23       	and	r24, r24
    570a:	2c f4       	brge	.+10     	; 0x5716 <Lcd_VidDisplayChracter+0x832>
		__ticks = 1;
    570c:	81 e0       	ldi	r24, 0x01	; 1
    570e:	90 e0       	ldi	r25, 0x00	; 0
    5710:	9e 83       	std	Y+6, r25	; 0x06
    5712:	8d 83       	std	Y+5, r24	; 0x05
    5714:	3f c0       	rjmp	.+126    	; 0x5794 <Lcd_VidDisplayChracter+0x8b0>
	else if (__tmp > 65535)
    5716:	6f 81       	ldd	r22, Y+7	; 0x07
    5718:	78 85       	ldd	r23, Y+8	; 0x08
    571a:	89 85       	ldd	r24, Y+9	; 0x09
    571c:	9a 85       	ldd	r25, Y+10	; 0x0a
    571e:	20 e0       	ldi	r18, 0x00	; 0
    5720:	3f ef       	ldi	r19, 0xFF	; 255
    5722:	4f e7       	ldi	r20, 0x7F	; 127
    5724:	57 e4       	ldi	r21, 0x47	; 71
    5726:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    572a:	18 16       	cp	r1, r24
    572c:	4c f5       	brge	.+82     	; 0x5780 <Lcd_VidDisplayChracter+0x89c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    572e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5730:	7c 85       	ldd	r23, Y+12	; 0x0c
    5732:	8d 85       	ldd	r24, Y+13	; 0x0d
    5734:	9e 85       	ldd	r25, Y+14	; 0x0e
    5736:	20 e0       	ldi	r18, 0x00	; 0
    5738:	30 e0       	ldi	r19, 0x00	; 0
    573a:	40 e2       	ldi	r20, 0x20	; 32
    573c:	51 e4       	ldi	r21, 0x41	; 65
    573e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5742:	dc 01       	movw	r26, r24
    5744:	cb 01       	movw	r24, r22
    5746:	bc 01       	movw	r22, r24
    5748:	cd 01       	movw	r24, r26
    574a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    574e:	dc 01       	movw	r26, r24
    5750:	cb 01       	movw	r24, r22
    5752:	9e 83       	std	Y+6, r25	; 0x06
    5754:	8d 83       	std	Y+5, r24	; 0x05
    5756:	0f c0       	rjmp	.+30     	; 0x5776 <Lcd_VidDisplayChracter+0x892>
    5758:	88 ec       	ldi	r24, 0xC8	; 200
    575a:	90 e0       	ldi	r25, 0x00	; 0
    575c:	9c 83       	std	Y+4, r25	; 0x04
    575e:	8b 83       	std	Y+3, r24	; 0x03
    5760:	8b 81       	ldd	r24, Y+3	; 0x03
    5762:	9c 81       	ldd	r25, Y+4	; 0x04
    5764:	01 97       	sbiw	r24, 0x01	; 1
    5766:	f1 f7       	brne	.-4      	; 0x5764 <Lcd_VidDisplayChracter+0x880>
    5768:	9c 83       	std	Y+4, r25	; 0x04
    576a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    576c:	8d 81       	ldd	r24, Y+5	; 0x05
    576e:	9e 81       	ldd	r25, Y+6	; 0x06
    5770:	01 97       	sbiw	r24, 0x01	; 1
    5772:	9e 83       	std	Y+6, r25	; 0x06
    5774:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5776:	8d 81       	ldd	r24, Y+5	; 0x05
    5778:	9e 81       	ldd	r25, Y+6	; 0x06
    577a:	00 97       	sbiw	r24, 0x00	; 0
    577c:	69 f7       	brne	.-38     	; 0x5758 <Lcd_VidDisplayChracter+0x874>
    577e:	14 c0       	rjmp	.+40     	; 0x57a8 <Lcd_VidDisplayChracter+0x8c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5780:	6f 81       	ldd	r22, Y+7	; 0x07
    5782:	78 85       	ldd	r23, Y+8	; 0x08
    5784:	89 85       	ldd	r24, Y+9	; 0x09
    5786:	9a 85       	ldd	r25, Y+10	; 0x0a
    5788:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    578c:	dc 01       	movw	r26, r24
    578e:	cb 01       	movw	r24, r22
    5790:	9e 83       	std	Y+6, r25	; 0x06
    5792:	8d 83       	std	Y+5, r24	; 0x05
    5794:	8d 81       	ldd	r24, Y+5	; 0x05
    5796:	9e 81       	ldd	r25, Y+6	; 0x06
    5798:	9a 83       	std	Y+2, r25	; 0x02
    579a:	89 83       	std	Y+1, r24	; 0x01
    579c:	89 81       	ldd	r24, Y+1	; 0x01
    579e:	9a 81       	ldd	r25, Y+2	; 0x02
    57a0:	01 97       	sbiw	r24, 0x01	; 1
    57a2:	f1 f7       	brne	.-4      	; 0x57a0 <Lcd_VidDisplayChracter+0x8bc>
    57a4:	9a 83       	std	Y+2, r25	; 0x02
    57a6:	89 83       	std	Y+1, r24	; 0x01
	Dio_enuWriteChannel(LCD_E_PIN_NUM,DIO_LOGIC_HIGH);
	_delay_ms(1);
	Dio_enuWriteChannel(LCD_E_PIN_NUM,DIO_LOGIC_LOW);
	_delay_ms(2);
#endif
}
    57a8:	cd 59       	subi	r28, 0x9D	; 157
    57aa:	df 4f       	sbci	r29, 0xFF	; 255
    57ac:	0f b6       	in	r0, 0x3f	; 63
    57ae:	f8 94       	cli
    57b0:	de bf       	out	0x3e, r29	; 62
    57b2:	0f be       	out	0x3f, r0	; 63
    57b4:	cd bf       	out	0x3d, r28	; 61
    57b6:	cf 91       	pop	r28
    57b8:	df 91       	pop	r29
    57ba:	1f 91       	pop	r17
    57bc:	0f 91       	pop	r16
    57be:	08 95       	ret

000057c0 <Lcd_VidGoToXY>:




void Lcd_VidGoToXY(uint8 Copy_u8Row,uint8 Copy_u8Column)
{if(Copy_u8Row == 0)
    57c0:	df 93       	push	r29
    57c2:	cf 93       	push	r28
    57c4:	00 d0       	rcall	.+0      	; 0x57c6 <Lcd_VidGoToXY+0x6>
    57c6:	cd b7       	in	r28, 0x3d	; 61
    57c8:	de b7       	in	r29, 0x3e	; 62
    57ca:	89 83       	std	Y+1, r24	; 0x01
    57cc:	6a 83       	std	Y+2, r22	; 0x02
    57ce:	89 81       	ldd	r24, Y+1	; 0x01
    57d0:	88 23       	and	r24, r24
    57d2:	29 f4       	brne	.+10     	; 0x57de <Lcd_VidGoToXY+0x1e>
{
	Lcd_VidSendCommand(LCD_SET_DDRAM_ADDR_CMD + 0 + Copy_u8Column);
    57d4:	8a 81       	ldd	r24, Y+2	; 0x02
    57d6:	80 58       	subi	r24, 0x80	; 128
    57d8:	0e 94 04 23 	call	0x4608	; 0x4608 <Lcd_VidSendCommand>
    57dc:	17 c0       	rjmp	.+46     	; 0x580c <Lcd_VidGoToXY+0x4c>
}
else if (Copy_u8Row == 1)
    57de:	89 81       	ldd	r24, Y+1	; 0x01
    57e0:	81 30       	cpi	r24, 0x01	; 1
    57e2:	29 f4       	brne	.+10     	; 0x57ee <Lcd_VidGoToXY+0x2e>
	Lcd_VidSendCommand(LCD_SET_DDRAM_ADDR_CMD + 0x40 + Copy_u8Column);
    57e4:	8a 81       	ldd	r24, Y+2	; 0x02
    57e6:	80 54       	subi	r24, 0x40	; 64
    57e8:	0e 94 04 23 	call	0x4608	; 0x4608 <Lcd_VidSendCommand>
    57ec:	0f c0       	rjmp	.+30     	; 0x580c <Lcd_VidGoToXY+0x4c>
else if (Copy_u8Row == 2)
    57ee:	89 81       	ldd	r24, Y+1	; 0x01
    57f0:	82 30       	cpi	r24, 0x02	; 2
    57f2:	29 f4       	brne	.+10     	; 0x57fe <Lcd_VidGoToXY+0x3e>
	Lcd_VidSendCommand(LCD_SET_DDRAM_ADDR_CMD + 0x14 + Copy_u8Column);
    57f4:	8a 81       	ldd	r24, Y+2	; 0x02
    57f6:	8c 56       	subi	r24, 0x6C	; 108
    57f8:	0e 94 04 23 	call	0x4608	; 0x4608 <Lcd_VidSendCommand>
    57fc:	07 c0       	rjmp	.+14     	; 0x580c <Lcd_VidGoToXY+0x4c>
else if (Copy_u8Row == 3)
    57fe:	89 81       	ldd	r24, Y+1	; 0x01
    5800:	83 30       	cpi	r24, 0x03	; 3
    5802:	21 f4       	brne	.+8      	; 0x580c <Lcd_VidGoToXY+0x4c>
	Lcd_VidSendCommand(LCD_SET_DDRAM_ADDR_CMD + 0x54 + Copy_u8Column);
    5804:	8a 81       	ldd	r24, Y+2	; 0x02
    5806:	8c 52       	subi	r24, 0x2C	; 44
    5808:	0e 94 04 23 	call	0x4608	; 0x4608 <Lcd_VidSendCommand>
}
    580c:	0f 90       	pop	r0
    580e:	0f 90       	pop	r0
    5810:	cf 91       	pop	r28
    5812:	df 91       	pop	r29
    5814:	08 95       	ret

00005816 <Lcd_VidDisplayString>:


void Lcd_VidDisplayString(const pu8 Add_pu8String )
{
    5816:	df 93       	push	r29
    5818:	cf 93       	push	r28
    581a:	00 d0       	rcall	.+0      	; 0x581c <Lcd_VidDisplayString+0x6>
    581c:	0f 92       	push	r0
    581e:	cd b7       	in	r28, 0x3d	; 61
    5820:	de b7       	in	r29, 0x3e	; 62
    5822:	9b 83       	std	Y+3, r25	; 0x03
    5824:	8a 83       	std	Y+2, r24	; 0x02
	uint8 LOC_u8Iterator=0;
    5826:	19 82       	std	Y+1, r1	; 0x01
    5828:	0e c0       	rjmp	.+28     	; 0x5846 <Lcd_VidDisplayString+0x30>
	while(Add_pu8String[LOC_u8Iterator] != '\0')
	{
		Lcd_VidDisplayChracter(Add_pu8String[LOC_u8Iterator]);
    582a:	89 81       	ldd	r24, Y+1	; 0x01
    582c:	28 2f       	mov	r18, r24
    582e:	30 e0       	ldi	r19, 0x00	; 0
    5830:	8a 81       	ldd	r24, Y+2	; 0x02
    5832:	9b 81       	ldd	r25, Y+3	; 0x03
    5834:	fc 01       	movw	r30, r24
    5836:	e2 0f       	add	r30, r18
    5838:	f3 1f       	adc	r31, r19
    583a:	80 81       	ld	r24, Z
    583c:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <Lcd_VidDisplayChracter>
		LOC_u8Iterator++;
    5840:	89 81       	ldd	r24, Y+1	; 0x01
    5842:	8f 5f       	subi	r24, 0xFF	; 255
    5844:	89 83       	std	Y+1, r24	; 0x01


void Lcd_VidDisplayString(const pu8 Add_pu8String )
{
	uint8 LOC_u8Iterator=0;
	while(Add_pu8String[LOC_u8Iterator] != '\0')
    5846:	89 81       	ldd	r24, Y+1	; 0x01
    5848:	28 2f       	mov	r18, r24
    584a:	30 e0       	ldi	r19, 0x00	; 0
    584c:	8a 81       	ldd	r24, Y+2	; 0x02
    584e:	9b 81       	ldd	r25, Y+3	; 0x03
    5850:	fc 01       	movw	r30, r24
    5852:	e2 0f       	add	r30, r18
    5854:	f3 1f       	adc	r31, r19
    5856:	80 81       	ld	r24, Z
    5858:	88 23       	and	r24, r24
    585a:	39 f7       	brne	.-50     	; 0x582a <Lcd_VidDisplayString+0x14>
	{
		Lcd_VidDisplayChracter(Add_pu8String[LOC_u8Iterator]);
		LOC_u8Iterator++;
	}
}
    585c:	0f 90       	pop	r0
    585e:	0f 90       	pop	r0
    5860:	0f 90       	pop	r0
    5862:	cf 91       	pop	r28
    5864:	df 91       	pop	r29
    5866:	08 95       	ret

00005868 <Lcd_VidDisplayNumber>:

void Lcd_VidDisplayNumber(uint64 Copy_u64Num )
{
    5868:	af 92       	push	r10
    586a:	bf 92       	push	r11
    586c:	cf 92       	push	r12
    586e:	df 92       	push	r13
    5870:	ef 92       	push	r14
    5872:	ff 92       	push	r15
    5874:	0f 93       	push	r16
    5876:	1f 93       	push	r17
    5878:	df 93       	push	r29
    587a:	cf 93       	push	r28
    587c:	cd b7       	in	r28, 0x3d	; 61
    587e:	de b7       	in	r29, 0x3e	; 62
    5880:	c6 56       	subi	r28, 0x66	; 102
    5882:	d0 40       	sbci	r29, 0x00	; 0
    5884:	0f b6       	in	r0, 0x3f	; 63
    5886:	f8 94       	cli
    5888:	de bf       	out	0x3e, r29	; 62
    588a:	0f be       	out	0x3f, r0	; 63
    588c:	cd bf       	out	0x3d, r28	; 61
    588e:	29 87       	std	Y+9, r18	; 0x09
    5890:	3a 87       	std	Y+10, r19	; 0x0a
    5892:	4b 87       	std	Y+11, r20	; 0x0b
    5894:	5c 87       	std	Y+12, r21	; 0x0c
    5896:	6d 87       	std	Y+13, r22	; 0x0d
    5898:	7e 87       	std	Y+14, r23	; 0x0e
    589a:	8f 87       	std	Y+15, r24	; 0x0f
    589c:	98 8b       	std	Y+16, r25	; 0x10
	uint64 LOC_u8Inverse=1;
    589e:	81 e0       	ldi	r24, 0x01	; 1
    58a0:	89 83       	std	Y+1, r24	; 0x01
    58a2:	1a 82       	std	Y+2, r1	; 0x02
    58a4:	1b 82       	std	Y+3, r1	; 0x03
    58a6:	1c 82       	std	Y+4, r1	; 0x04
    58a8:	1d 82       	std	Y+5, r1	; 0x05
    58aa:	1e 82       	std	Y+6, r1	; 0x06
    58ac:	1f 82       	std	Y+7, r1	; 0x07
    58ae:	18 86       	std	Y+8, r1	; 0x08
	if(Copy_u64Num==0)
    58b0:	89 85       	ldd	r24, Y+9	; 0x09
    58b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    58b4:	89 2b       	or	r24, r25
    58b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    58b8:	89 2b       	or	r24, r25
    58ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    58bc:	89 2b       	or	r24, r25
    58be:	9d 85       	ldd	r25, Y+13	; 0x0d
    58c0:	89 2b       	or	r24, r25
    58c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    58c4:	89 2b       	or	r24, r25
    58c6:	9f 85       	ldd	r25, Y+15	; 0x0f
    58c8:	89 2b       	or	r24, r25
    58ca:	98 89       	ldd	r25, Y+16	; 0x10
    58cc:	89 2b       	or	r24, r25
    58ce:	88 23       	and	r24, r24
    58d0:	09 f0       	breq	.+2      	; 0x58d4 <Lcd_VidDisplayNumber+0x6c>
    58d2:	62 c3       	rjmp	.+1732   	; 0x5f98 <Lcd_VidDisplayNumber+0x730>
	{
		Lcd_VidDisplayChracter('0');
    58d4:	80 e3       	ldi	r24, 0x30	; 48
    58d6:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <Lcd_VidDisplayChracter>
    58da:	5e c3       	rjmp	.+1724   	; 0x5f98 <Lcd_VidDisplayNumber+0x730>
	}
	while(Copy_u64Num != 0)
	{
		LOC_u8Inverse=(LOC_u8Inverse*10)+(Copy_u64Num%10);
    58dc:	29 81       	ldd	r18, Y+1	; 0x01
    58de:	3a 81       	ldd	r19, Y+2	; 0x02
    58e0:	4b 81       	ldd	r20, Y+3	; 0x03
    58e2:	5c 81       	ldd	r21, Y+4	; 0x04
    58e4:	6d 81       	ldd	r22, Y+5	; 0x05
    58e6:	7e 81       	ldd	r23, Y+6	; 0x06
    58e8:	8f 81       	ldd	r24, Y+7	; 0x07
    58ea:	98 85       	ldd	r25, Y+8	; 0x08
    58ec:	a2 2e       	mov	r10, r18
    58ee:	b3 2e       	mov	r11, r19
    58f0:	c4 2e       	mov	r12, r20
    58f2:	d5 2e       	mov	r13, r21
    58f4:	e6 2e       	mov	r14, r22
    58f6:	f7 2e       	mov	r15, r23
    58f8:	08 2f       	mov	r16, r24
    58fa:	19 2f       	mov	r17, r25
    58fc:	2a 2d       	mov	r18, r10
    58fe:	3b 2d       	mov	r19, r11
    5900:	4c 2d       	mov	r20, r12
    5902:	5d 2d       	mov	r21, r13
    5904:	6e 2d       	mov	r22, r14
    5906:	7f 2d       	mov	r23, r15
    5908:	80 2f       	mov	r24, r16
    590a:	91 2f       	mov	r25, r17
    590c:	01 e0       	ldi	r16, 0x01	; 1
    590e:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    5912:	29 a3       	std	Y+33, r18	; 0x21
    5914:	3a a3       	std	Y+34, r19	; 0x22
    5916:	4b a3       	std	Y+35, r20	; 0x23
    5918:	5c a3       	std	Y+36, r21	; 0x24
    591a:	6d a3       	std	Y+37, r22	; 0x25
    591c:	7e a3       	std	Y+38, r23	; 0x26
    591e:	8f a3       	std	Y+39, r24	; 0x27
    5920:	98 a7       	std	Y+40, r25	; 0x28
    5922:	29 a1       	ldd	r18, Y+33	; 0x21
    5924:	3a a1       	ldd	r19, Y+34	; 0x22
    5926:	4b a1       	ldd	r20, Y+35	; 0x23
    5928:	5c a1       	ldd	r21, Y+36	; 0x24
    592a:	6d a1       	ldd	r22, Y+37	; 0x25
    592c:	7e a1       	ldd	r23, Y+38	; 0x26
    592e:	8f a1       	ldd	r24, Y+39	; 0x27
    5930:	98 a5       	ldd	r25, Y+40	; 0x28
    5932:	02 e0       	ldi	r16, 0x02	; 2
    5934:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    5938:	29 a7       	std	Y+41, r18	; 0x29
    593a:	3a a7       	std	Y+42, r19	; 0x2a
    593c:	4b a7       	std	Y+43, r20	; 0x2b
    593e:	5c a7       	std	Y+44, r21	; 0x2c
    5940:	6d a7       	std	Y+45, r22	; 0x2d
    5942:	7e a7       	std	Y+46, r23	; 0x2e
    5944:	8f a7       	std	Y+47, r24	; 0x2f
    5946:	98 ab       	std	Y+48, r25	; 0x30
    5948:	89 a1       	ldd	r24, Y+33	; 0x21
    594a:	99 a5       	ldd	r25, Y+41	; 0x29
    594c:	89 0f       	add	r24, r25
    594e:	89 ab       	std	Y+49, r24	; 0x31
    5950:	81 e0       	ldi	r24, 0x01	; 1
    5952:	89 af       	std	Y+57, r24	; 0x39
    5954:	99 a9       	ldd	r25, Y+49	; 0x31
    5956:	89 a1       	ldd	r24, Y+33	; 0x21
    5958:	98 17       	cp	r25, r24
    595a:	08 f0       	brcs	.+2      	; 0x595e <Lcd_VidDisplayNumber+0xf6>
    595c:	19 ae       	std	Y+57, r1	; 0x39
    595e:	9a a1       	ldd	r25, Y+34	; 0x22
    5960:	8a a5       	ldd	r24, Y+42	; 0x2a
    5962:	98 0f       	add	r25, r24
    5964:	9a ab       	std	Y+50, r25	; 0x32
    5966:	91 e0       	ldi	r25, 0x01	; 1
    5968:	9a af       	std	Y+58, r25	; 0x3a
    596a:	8a a9       	ldd	r24, Y+50	; 0x32
    596c:	9a a1       	ldd	r25, Y+34	; 0x22
    596e:	89 17       	cp	r24, r25
    5970:	08 f0       	brcs	.+2      	; 0x5974 <Lcd_VidDisplayNumber+0x10c>
    5972:	1a ae       	std	Y+58, r1	; 0x3a
    5974:	89 ad       	ldd	r24, Y+57	; 0x39
    5976:	9a a9       	ldd	r25, Y+50	; 0x32
    5978:	89 0f       	add	r24, r25
    597a:	8b af       	std	Y+59, r24	; 0x3b
    597c:	81 e0       	ldi	r24, 0x01	; 1
    597e:	8c af       	std	Y+60, r24	; 0x3c
    5980:	9b ad       	ldd	r25, Y+59	; 0x3b
    5982:	8a a9       	ldd	r24, Y+50	; 0x32
    5984:	98 17       	cp	r25, r24
    5986:	08 f0       	brcs	.+2      	; 0x598a <Lcd_VidDisplayNumber+0x122>
    5988:	1c ae       	std	Y+60, r1	; 0x3c
    598a:	9a ad       	ldd	r25, Y+58	; 0x3a
    598c:	8c ad       	ldd	r24, Y+60	; 0x3c
    598e:	98 2b       	or	r25, r24
    5990:	9a af       	std	Y+58, r25	; 0x3a
    5992:	9b ad       	ldd	r25, Y+59	; 0x3b
    5994:	9a ab       	std	Y+50, r25	; 0x32
    5996:	8b a1       	ldd	r24, Y+35	; 0x23
    5998:	9b a5       	ldd	r25, Y+43	; 0x2b
    599a:	89 0f       	add	r24, r25
    599c:	8b ab       	std	Y+51, r24	; 0x33
    599e:	81 e0       	ldi	r24, 0x01	; 1
    59a0:	8d af       	std	Y+61, r24	; 0x3d
    59a2:	9b a9       	ldd	r25, Y+51	; 0x33
    59a4:	8b a1       	ldd	r24, Y+35	; 0x23
    59a6:	98 17       	cp	r25, r24
    59a8:	08 f0       	brcs	.+2      	; 0x59ac <Lcd_VidDisplayNumber+0x144>
    59aa:	1d ae       	std	Y+61, r1	; 0x3d
    59ac:	9a ad       	ldd	r25, Y+58	; 0x3a
    59ae:	8b a9       	ldd	r24, Y+51	; 0x33
    59b0:	98 0f       	add	r25, r24
    59b2:	9e af       	std	Y+62, r25	; 0x3e
    59b4:	91 e0       	ldi	r25, 0x01	; 1
    59b6:	9f af       	std	Y+63, r25	; 0x3f
    59b8:	8e ad       	ldd	r24, Y+62	; 0x3e
    59ba:	9b a9       	ldd	r25, Y+51	; 0x33
    59bc:	89 17       	cp	r24, r25
    59be:	08 f0       	brcs	.+2      	; 0x59c2 <Lcd_VidDisplayNumber+0x15a>
    59c0:	1f ae       	std	Y+63, r1	; 0x3f
    59c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    59c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    59c6:	89 2b       	or	r24, r25
    59c8:	8d af       	std	Y+61, r24	; 0x3d
    59ca:	8e ad       	ldd	r24, Y+62	; 0x3e
    59cc:	8b ab       	std	Y+51, r24	; 0x33
    59ce:	9c a1       	ldd	r25, Y+36	; 0x24
    59d0:	8c a5       	ldd	r24, Y+44	; 0x2c
    59d2:	98 0f       	add	r25, r24
    59d4:	9c ab       	std	Y+52, r25	; 0x34
    59d6:	91 e0       	ldi	r25, 0x01	; 1
    59d8:	21 96       	adiw	r28, 0x01	; 1
    59da:	9f af       	std	Y+63, r25	; 0x3f
    59dc:	21 97       	sbiw	r28, 0x01	; 1
    59de:	8c a9       	ldd	r24, Y+52	; 0x34
    59e0:	9c a1       	ldd	r25, Y+36	; 0x24
    59e2:	89 17       	cp	r24, r25
    59e4:	18 f0       	brcs	.+6      	; 0x59ec <Lcd_VidDisplayNumber+0x184>
    59e6:	21 96       	adiw	r28, 0x01	; 1
    59e8:	1f ae       	std	Y+63, r1	; 0x3f
    59ea:	21 97       	sbiw	r28, 0x01	; 1
    59ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    59ee:	9c a9       	ldd	r25, Y+52	; 0x34
    59f0:	89 0f       	add	r24, r25
    59f2:	22 96       	adiw	r28, 0x02	; 2
    59f4:	8f af       	std	Y+63, r24	; 0x3f
    59f6:	22 97       	sbiw	r28, 0x02	; 2
    59f8:	81 e0       	ldi	r24, 0x01	; 1
    59fa:	23 96       	adiw	r28, 0x03	; 3
    59fc:	8f af       	std	Y+63, r24	; 0x3f
    59fe:	23 97       	sbiw	r28, 0x03	; 3
    5a00:	22 96       	adiw	r28, 0x02	; 2
    5a02:	9f ad       	ldd	r25, Y+63	; 0x3f
    5a04:	22 97       	sbiw	r28, 0x02	; 2
    5a06:	8c a9       	ldd	r24, Y+52	; 0x34
    5a08:	98 17       	cp	r25, r24
    5a0a:	18 f0       	brcs	.+6      	; 0x5a12 <Lcd_VidDisplayNumber+0x1aa>
    5a0c:	23 96       	adiw	r28, 0x03	; 3
    5a0e:	1f ae       	std	Y+63, r1	; 0x3f
    5a10:	23 97       	sbiw	r28, 0x03	; 3
    5a12:	21 96       	adiw	r28, 0x01	; 1
    5a14:	9f ad       	ldd	r25, Y+63	; 0x3f
    5a16:	21 97       	sbiw	r28, 0x01	; 1
    5a18:	23 96       	adiw	r28, 0x03	; 3
    5a1a:	8f ad       	ldd	r24, Y+63	; 0x3f
    5a1c:	23 97       	sbiw	r28, 0x03	; 3
    5a1e:	98 2b       	or	r25, r24
    5a20:	21 96       	adiw	r28, 0x01	; 1
    5a22:	9f af       	std	Y+63, r25	; 0x3f
    5a24:	21 97       	sbiw	r28, 0x01	; 1
    5a26:	22 96       	adiw	r28, 0x02	; 2
    5a28:	9f ad       	ldd	r25, Y+63	; 0x3f
    5a2a:	22 97       	sbiw	r28, 0x02	; 2
    5a2c:	9c ab       	std	Y+52, r25	; 0x34
    5a2e:	8d a1       	ldd	r24, Y+37	; 0x25
    5a30:	9d a5       	ldd	r25, Y+45	; 0x2d
    5a32:	89 0f       	add	r24, r25
    5a34:	8d ab       	std	Y+53, r24	; 0x35
    5a36:	81 e0       	ldi	r24, 0x01	; 1
    5a38:	24 96       	adiw	r28, 0x04	; 4
    5a3a:	8f af       	std	Y+63, r24	; 0x3f
    5a3c:	24 97       	sbiw	r28, 0x04	; 4
    5a3e:	9d a9       	ldd	r25, Y+53	; 0x35
    5a40:	8d a1       	ldd	r24, Y+37	; 0x25
    5a42:	98 17       	cp	r25, r24
    5a44:	18 f0       	brcs	.+6      	; 0x5a4c <Lcd_VidDisplayNumber+0x1e4>
    5a46:	24 96       	adiw	r28, 0x04	; 4
    5a48:	1f ae       	std	Y+63, r1	; 0x3f
    5a4a:	24 97       	sbiw	r28, 0x04	; 4
    5a4c:	21 96       	adiw	r28, 0x01	; 1
    5a4e:	9f ad       	ldd	r25, Y+63	; 0x3f
    5a50:	21 97       	sbiw	r28, 0x01	; 1
    5a52:	8d a9       	ldd	r24, Y+53	; 0x35
    5a54:	98 0f       	add	r25, r24
    5a56:	25 96       	adiw	r28, 0x05	; 5
    5a58:	9f af       	std	Y+63, r25	; 0x3f
    5a5a:	25 97       	sbiw	r28, 0x05	; 5
    5a5c:	91 e0       	ldi	r25, 0x01	; 1
    5a5e:	26 96       	adiw	r28, 0x06	; 6
    5a60:	9f af       	std	Y+63, r25	; 0x3f
    5a62:	26 97       	sbiw	r28, 0x06	; 6
    5a64:	25 96       	adiw	r28, 0x05	; 5
    5a66:	8f ad       	ldd	r24, Y+63	; 0x3f
    5a68:	25 97       	sbiw	r28, 0x05	; 5
    5a6a:	9d a9       	ldd	r25, Y+53	; 0x35
    5a6c:	89 17       	cp	r24, r25
    5a6e:	18 f0       	brcs	.+6      	; 0x5a76 <Lcd_VidDisplayNumber+0x20e>
    5a70:	26 96       	adiw	r28, 0x06	; 6
    5a72:	1f ae       	std	Y+63, r1	; 0x3f
    5a74:	26 97       	sbiw	r28, 0x06	; 6
    5a76:	24 96       	adiw	r28, 0x04	; 4
    5a78:	8f ad       	ldd	r24, Y+63	; 0x3f
    5a7a:	24 97       	sbiw	r28, 0x04	; 4
    5a7c:	26 96       	adiw	r28, 0x06	; 6
    5a7e:	9f ad       	ldd	r25, Y+63	; 0x3f
    5a80:	26 97       	sbiw	r28, 0x06	; 6
    5a82:	89 2b       	or	r24, r25
    5a84:	24 96       	adiw	r28, 0x04	; 4
    5a86:	8f af       	std	Y+63, r24	; 0x3f
    5a88:	24 97       	sbiw	r28, 0x04	; 4
    5a8a:	25 96       	adiw	r28, 0x05	; 5
    5a8c:	8f ad       	ldd	r24, Y+63	; 0x3f
    5a8e:	25 97       	sbiw	r28, 0x05	; 5
    5a90:	8d ab       	std	Y+53, r24	; 0x35
    5a92:	9e a1       	ldd	r25, Y+38	; 0x26
    5a94:	8e a5       	ldd	r24, Y+46	; 0x2e
    5a96:	98 0f       	add	r25, r24
    5a98:	9e ab       	std	Y+54, r25	; 0x36
    5a9a:	91 e0       	ldi	r25, 0x01	; 1
    5a9c:	27 96       	adiw	r28, 0x07	; 7
    5a9e:	9f af       	std	Y+63, r25	; 0x3f
    5aa0:	27 97       	sbiw	r28, 0x07	; 7
    5aa2:	8e a9       	ldd	r24, Y+54	; 0x36
    5aa4:	9e a1       	ldd	r25, Y+38	; 0x26
    5aa6:	89 17       	cp	r24, r25
    5aa8:	18 f0       	brcs	.+6      	; 0x5ab0 <Lcd_VidDisplayNumber+0x248>
    5aaa:	27 96       	adiw	r28, 0x07	; 7
    5aac:	1f ae       	std	Y+63, r1	; 0x3f
    5aae:	27 97       	sbiw	r28, 0x07	; 7
    5ab0:	24 96       	adiw	r28, 0x04	; 4
    5ab2:	8f ad       	ldd	r24, Y+63	; 0x3f
    5ab4:	24 97       	sbiw	r28, 0x04	; 4
    5ab6:	9e a9       	ldd	r25, Y+54	; 0x36
    5ab8:	89 0f       	add	r24, r25
    5aba:	28 96       	adiw	r28, 0x08	; 8
    5abc:	8f af       	std	Y+63, r24	; 0x3f
    5abe:	28 97       	sbiw	r28, 0x08	; 8
    5ac0:	81 e0       	ldi	r24, 0x01	; 1
    5ac2:	29 96       	adiw	r28, 0x09	; 9
    5ac4:	8f af       	std	Y+63, r24	; 0x3f
    5ac6:	29 97       	sbiw	r28, 0x09	; 9
    5ac8:	28 96       	adiw	r28, 0x08	; 8
    5aca:	9f ad       	ldd	r25, Y+63	; 0x3f
    5acc:	28 97       	sbiw	r28, 0x08	; 8
    5ace:	8e a9       	ldd	r24, Y+54	; 0x36
    5ad0:	98 17       	cp	r25, r24
    5ad2:	18 f0       	brcs	.+6      	; 0x5ada <Lcd_VidDisplayNumber+0x272>
    5ad4:	29 96       	adiw	r28, 0x09	; 9
    5ad6:	1f ae       	std	Y+63, r1	; 0x3f
    5ad8:	29 97       	sbiw	r28, 0x09	; 9
    5ada:	27 96       	adiw	r28, 0x07	; 7
    5adc:	9f ad       	ldd	r25, Y+63	; 0x3f
    5ade:	27 97       	sbiw	r28, 0x07	; 7
    5ae0:	29 96       	adiw	r28, 0x09	; 9
    5ae2:	8f ad       	ldd	r24, Y+63	; 0x3f
    5ae4:	29 97       	sbiw	r28, 0x09	; 9
    5ae6:	98 2b       	or	r25, r24
    5ae8:	27 96       	adiw	r28, 0x07	; 7
    5aea:	9f af       	std	Y+63, r25	; 0x3f
    5aec:	27 97       	sbiw	r28, 0x07	; 7
    5aee:	28 96       	adiw	r28, 0x08	; 8
    5af0:	9f ad       	ldd	r25, Y+63	; 0x3f
    5af2:	28 97       	sbiw	r28, 0x08	; 8
    5af4:	9e ab       	std	Y+54, r25	; 0x36
    5af6:	8f a1       	ldd	r24, Y+39	; 0x27
    5af8:	9f a5       	ldd	r25, Y+47	; 0x2f
    5afa:	89 0f       	add	r24, r25
    5afc:	8f ab       	std	Y+55, r24	; 0x37
    5afe:	81 e0       	ldi	r24, 0x01	; 1
    5b00:	2a 96       	adiw	r28, 0x0a	; 10
    5b02:	8f af       	std	Y+63, r24	; 0x3f
    5b04:	2a 97       	sbiw	r28, 0x0a	; 10
    5b06:	9f a9       	ldd	r25, Y+55	; 0x37
    5b08:	8f a1       	ldd	r24, Y+39	; 0x27
    5b0a:	98 17       	cp	r25, r24
    5b0c:	18 f0       	brcs	.+6      	; 0x5b14 <Lcd_VidDisplayNumber+0x2ac>
    5b0e:	2a 96       	adiw	r28, 0x0a	; 10
    5b10:	1f ae       	std	Y+63, r1	; 0x3f
    5b12:	2a 97       	sbiw	r28, 0x0a	; 10
    5b14:	27 96       	adiw	r28, 0x07	; 7
    5b16:	9f ad       	ldd	r25, Y+63	; 0x3f
    5b18:	27 97       	sbiw	r28, 0x07	; 7
    5b1a:	8f a9       	ldd	r24, Y+55	; 0x37
    5b1c:	98 0f       	add	r25, r24
    5b1e:	2b 96       	adiw	r28, 0x0b	; 11
    5b20:	9f af       	std	Y+63, r25	; 0x3f
    5b22:	2b 97       	sbiw	r28, 0x0b	; 11
    5b24:	91 e0       	ldi	r25, 0x01	; 1
    5b26:	2c 96       	adiw	r28, 0x0c	; 12
    5b28:	9f af       	std	Y+63, r25	; 0x3f
    5b2a:	2c 97       	sbiw	r28, 0x0c	; 12
    5b2c:	2b 96       	adiw	r28, 0x0b	; 11
    5b2e:	8f ad       	ldd	r24, Y+63	; 0x3f
    5b30:	2b 97       	sbiw	r28, 0x0b	; 11
    5b32:	9f a9       	ldd	r25, Y+55	; 0x37
    5b34:	89 17       	cp	r24, r25
    5b36:	18 f0       	brcs	.+6      	; 0x5b3e <Lcd_VidDisplayNumber+0x2d6>
    5b38:	2c 96       	adiw	r28, 0x0c	; 12
    5b3a:	1f ae       	std	Y+63, r1	; 0x3f
    5b3c:	2c 97       	sbiw	r28, 0x0c	; 12
    5b3e:	2a 96       	adiw	r28, 0x0a	; 10
    5b40:	8f ad       	ldd	r24, Y+63	; 0x3f
    5b42:	2a 97       	sbiw	r28, 0x0a	; 10
    5b44:	2c 96       	adiw	r28, 0x0c	; 12
    5b46:	9f ad       	ldd	r25, Y+63	; 0x3f
    5b48:	2c 97       	sbiw	r28, 0x0c	; 12
    5b4a:	89 2b       	or	r24, r25
    5b4c:	2a 96       	adiw	r28, 0x0a	; 10
    5b4e:	8f af       	std	Y+63, r24	; 0x3f
    5b50:	2a 97       	sbiw	r28, 0x0a	; 10
    5b52:	2b 96       	adiw	r28, 0x0b	; 11
    5b54:	8f ad       	ldd	r24, Y+63	; 0x3f
    5b56:	2b 97       	sbiw	r28, 0x0b	; 11
    5b58:	8f ab       	std	Y+55, r24	; 0x37
    5b5a:	98 a5       	ldd	r25, Y+40	; 0x28
    5b5c:	88 a9       	ldd	r24, Y+48	; 0x30
    5b5e:	98 0f       	add	r25, r24
    5b60:	98 af       	std	Y+56, r25	; 0x38
    5b62:	2a 96       	adiw	r28, 0x0a	; 10
    5b64:	8f ad       	ldd	r24, Y+63	; 0x3f
    5b66:	2a 97       	sbiw	r28, 0x0a	; 10
    5b68:	98 ad       	ldd	r25, Y+56	; 0x38
    5b6a:	89 0f       	add	r24, r25
    5b6c:	88 af       	std	Y+56, r24	; 0x38
    5b6e:	89 a9       	ldd	r24, Y+49	; 0x31
    5b70:	89 8f       	std	Y+25, r24	; 0x19
    5b72:	9a a9       	ldd	r25, Y+50	; 0x32
    5b74:	9a 8f       	std	Y+26, r25	; 0x1a
    5b76:	8b a9       	ldd	r24, Y+51	; 0x33
    5b78:	8b 8f       	std	Y+27, r24	; 0x1b
    5b7a:	9c a9       	ldd	r25, Y+52	; 0x34
    5b7c:	9c 8f       	std	Y+28, r25	; 0x1c
    5b7e:	8d a9       	ldd	r24, Y+53	; 0x35
    5b80:	8d 8f       	std	Y+29, r24	; 0x1d
    5b82:	9e a9       	ldd	r25, Y+54	; 0x36
    5b84:	9e 8f       	std	Y+30, r25	; 0x1e
    5b86:	8f a9       	ldd	r24, Y+55	; 0x37
    5b88:	8f 8f       	std	Y+31, r24	; 0x1f
    5b8a:	98 ad       	ldd	r25, Y+56	; 0x38
    5b8c:	98 a3       	std	Y+32, r25	; 0x20
    5b8e:	a9 84       	ldd	r10, Y+9	; 0x09
    5b90:	ba 84       	ldd	r11, Y+10	; 0x0a
    5b92:	cb 84       	ldd	r12, Y+11	; 0x0b
    5b94:	dc 84       	ldd	r13, Y+12	; 0x0c
    5b96:	ed 84       	ldd	r14, Y+13	; 0x0d
    5b98:	fe 84       	ldd	r15, Y+14	; 0x0e
    5b9a:	0f 85       	ldd	r16, Y+15	; 0x0f
    5b9c:	18 89       	ldd	r17, Y+16	; 0x10
    5b9e:	2a 2d       	mov	r18, r10
    5ba0:	3b 2d       	mov	r19, r11
    5ba2:	4c 2d       	mov	r20, r12
    5ba4:	5d 2d       	mov	r21, r13
    5ba6:	6e 2d       	mov	r22, r14
    5ba8:	7f 2d       	mov	r23, r15
    5baa:	80 2f       	mov	r24, r16
    5bac:	91 2f       	mov	r25, r17
    5bae:	0f 2e       	mov	r0, r31
    5bb0:	fa e0       	ldi	r31, 0x0A	; 10
    5bb2:	af 2e       	mov	r10, r31
    5bb4:	f0 2d       	mov	r31, r0
    5bb6:	bb 24       	eor	r11, r11
    5bb8:	cc 24       	eor	r12, r12
    5bba:	dd 24       	eor	r13, r13
    5bbc:	ee 24       	eor	r14, r14
    5bbe:	ff 24       	eor	r15, r15
    5bc0:	00 e0       	ldi	r16, 0x00	; 0
    5bc2:	10 e0       	ldi	r17, 0x00	; 0
    5bc4:	0e 94 69 07 	call	0xed2	; 0xed2 <__umoddi3>
    5bc8:	a2 2e       	mov	r10, r18
    5bca:	b3 2e       	mov	r11, r19
    5bcc:	c4 2e       	mov	r12, r20
    5bce:	d5 2e       	mov	r13, r21
    5bd0:	e6 2e       	mov	r14, r22
    5bd2:	f7 2e       	mov	r15, r23
    5bd4:	08 2f       	mov	r16, r24
    5bd6:	19 2f       	mov	r17, r25
    5bd8:	a9 8a       	std	Y+17, r10	; 0x11
    5bda:	ba 8a       	std	Y+18, r11	; 0x12
    5bdc:	cb 8a       	std	Y+19, r12	; 0x13
    5bde:	dc 8a       	std	Y+20, r13	; 0x14
    5be0:	ed 8a       	std	Y+21, r14	; 0x15
    5be2:	fe 8a       	std	Y+22, r15	; 0x16
    5be4:	0f 8b       	std	Y+23, r16	; 0x17
    5be6:	18 8f       	std	Y+24, r17	; 0x18
    5be8:	89 8d       	ldd	r24, Y+25	; 0x19
    5bea:	99 89       	ldd	r25, Y+17	; 0x11
    5bec:	89 0f       	add	r24, r25
    5bee:	2d 96       	adiw	r28, 0x0d	; 13
    5bf0:	8f af       	std	Y+63, r24	; 0x3f
    5bf2:	2d 97       	sbiw	r28, 0x0d	; 13
    5bf4:	81 e0       	ldi	r24, 0x01	; 1
    5bf6:	65 96       	adiw	r28, 0x15	; 21
    5bf8:	8f af       	std	Y+63, r24	; 0x3f
    5bfa:	65 97       	sbiw	r28, 0x15	; 21
    5bfc:	2d 96       	adiw	r28, 0x0d	; 13
    5bfe:	9f ad       	ldd	r25, Y+63	; 0x3f
    5c00:	2d 97       	sbiw	r28, 0x0d	; 13
    5c02:	89 8d       	ldd	r24, Y+25	; 0x19
    5c04:	98 17       	cp	r25, r24
    5c06:	18 f0       	brcs	.+6      	; 0x5c0e <Lcd_VidDisplayNumber+0x3a6>
    5c08:	65 96       	adiw	r28, 0x15	; 21
    5c0a:	1f ae       	std	Y+63, r1	; 0x3f
    5c0c:	65 97       	sbiw	r28, 0x15	; 21
    5c0e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5c10:	8a 89       	ldd	r24, Y+18	; 0x12
    5c12:	98 0f       	add	r25, r24
    5c14:	2e 96       	adiw	r28, 0x0e	; 14
    5c16:	9f af       	std	Y+63, r25	; 0x3f
    5c18:	2e 97       	sbiw	r28, 0x0e	; 14
    5c1a:	91 e0       	ldi	r25, 0x01	; 1
    5c1c:	66 96       	adiw	r28, 0x16	; 22
    5c1e:	9f af       	std	Y+63, r25	; 0x3f
    5c20:	66 97       	sbiw	r28, 0x16	; 22
    5c22:	2e 96       	adiw	r28, 0x0e	; 14
    5c24:	8f ad       	ldd	r24, Y+63	; 0x3f
    5c26:	2e 97       	sbiw	r28, 0x0e	; 14
    5c28:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5c2a:	89 17       	cp	r24, r25
    5c2c:	18 f0       	brcs	.+6      	; 0x5c34 <Lcd_VidDisplayNumber+0x3cc>
    5c2e:	66 96       	adiw	r28, 0x16	; 22
    5c30:	1f ae       	std	Y+63, r1	; 0x3f
    5c32:	66 97       	sbiw	r28, 0x16	; 22
    5c34:	65 96       	adiw	r28, 0x15	; 21
    5c36:	8f ad       	ldd	r24, Y+63	; 0x3f
    5c38:	65 97       	sbiw	r28, 0x15	; 21
    5c3a:	2e 96       	adiw	r28, 0x0e	; 14
    5c3c:	9f ad       	ldd	r25, Y+63	; 0x3f
    5c3e:	2e 97       	sbiw	r28, 0x0e	; 14
    5c40:	89 0f       	add	r24, r25
    5c42:	67 96       	adiw	r28, 0x17	; 23
    5c44:	8f af       	std	Y+63, r24	; 0x3f
    5c46:	67 97       	sbiw	r28, 0x17	; 23
    5c48:	81 e0       	ldi	r24, 0x01	; 1
    5c4a:	68 96       	adiw	r28, 0x18	; 24
    5c4c:	8f af       	std	Y+63, r24	; 0x3f
    5c4e:	68 97       	sbiw	r28, 0x18	; 24
    5c50:	67 96       	adiw	r28, 0x17	; 23
    5c52:	9f ad       	ldd	r25, Y+63	; 0x3f
    5c54:	67 97       	sbiw	r28, 0x17	; 23
    5c56:	2e 96       	adiw	r28, 0x0e	; 14
    5c58:	8f ad       	ldd	r24, Y+63	; 0x3f
    5c5a:	2e 97       	sbiw	r28, 0x0e	; 14
    5c5c:	98 17       	cp	r25, r24
    5c5e:	18 f0       	brcs	.+6      	; 0x5c66 <Lcd_VidDisplayNumber+0x3fe>
    5c60:	68 96       	adiw	r28, 0x18	; 24
    5c62:	1f ae       	std	Y+63, r1	; 0x3f
    5c64:	68 97       	sbiw	r28, 0x18	; 24
    5c66:	66 96       	adiw	r28, 0x16	; 22
    5c68:	9f ad       	ldd	r25, Y+63	; 0x3f
    5c6a:	66 97       	sbiw	r28, 0x16	; 22
    5c6c:	68 96       	adiw	r28, 0x18	; 24
    5c6e:	8f ad       	ldd	r24, Y+63	; 0x3f
    5c70:	68 97       	sbiw	r28, 0x18	; 24
    5c72:	98 2b       	or	r25, r24
    5c74:	66 96       	adiw	r28, 0x16	; 22
    5c76:	9f af       	std	Y+63, r25	; 0x3f
    5c78:	66 97       	sbiw	r28, 0x16	; 22
    5c7a:	67 96       	adiw	r28, 0x17	; 23
    5c7c:	9f ad       	ldd	r25, Y+63	; 0x3f
    5c7e:	67 97       	sbiw	r28, 0x17	; 23
    5c80:	2e 96       	adiw	r28, 0x0e	; 14
    5c82:	9f af       	std	Y+63, r25	; 0x3f
    5c84:	2e 97       	sbiw	r28, 0x0e	; 14
    5c86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5c88:	9b 89       	ldd	r25, Y+19	; 0x13
    5c8a:	89 0f       	add	r24, r25
    5c8c:	2f 96       	adiw	r28, 0x0f	; 15
    5c8e:	8f af       	std	Y+63, r24	; 0x3f
    5c90:	2f 97       	sbiw	r28, 0x0f	; 15
    5c92:	81 e0       	ldi	r24, 0x01	; 1
    5c94:	69 96       	adiw	r28, 0x19	; 25
    5c96:	8f af       	std	Y+63, r24	; 0x3f
    5c98:	69 97       	sbiw	r28, 0x19	; 25
    5c9a:	2f 96       	adiw	r28, 0x0f	; 15
    5c9c:	9f ad       	ldd	r25, Y+63	; 0x3f
    5c9e:	2f 97       	sbiw	r28, 0x0f	; 15
    5ca0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5ca2:	98 17       	cp	r25, r24
    5ca4:	18 f0       	brcs	.+6      	; 0x5cac <Lcd_VidDisplayNumber+0x444>
    5ca6:	69 96       	adiw	r28, 0x19	; 25
    5ca8:	1f ae       	std	Y+63, r1	; 0x3f
    5caa:	69 97       	sbiw	r28, 0x19	; 25
    5cac:	66 96       	adiw	r28, 0x16	; 22
    5cae:	9f ad       	ldd	r25, Y+63	; 0x3f
    5cb0:	66 97       	sbiw	r28, 0x16	; 22
    5cb2:	2f 96       	adiw	r28, 0x0f	; 15
    5cb4:	8f ad       	ldd	r24, Y+63	; 0x3f
    5cb6:	2f 97       	sbiw	r28, 0x0f	; 15
    5cb8:	98 0f       	add	r25, r24
    5cba:	6a 96       	adiw	r28, 0x1a	; 26
    5cbc:	9f af       	std	Y+63, r25	; 0x3f
    5cbe:	6a 97       	sbiw	r28, 0x1a	; 26
    5cc0:	91 e0       	ldi	r25, 0x01	; 1
    5cc2:	6b 96       	adiw	r28, 0x1b	; 27
    5cc4:	9f af       	std	Y+63, r25	; 0x3f
    5cc6:	6b 97       	sbiw	r28, 0x1b	; 27
    5cc8:	6a 96       	adiw	r28, 0x1a	; 26
    5cca:	8f ad       	ldd	r24, Y+63	; 0x3f
    5ccc:	6a 97       	sbiw	r28, 0x1a	; 26
    5cce:	2f 96       	adiw	r28, 0x0f	; 15
    5cd0:	9f ad       	ldd	r25, Y+63	; 0x3f
    5cd2:	2f 97       	sbiw	r28, 0x0f	; 15
    5cd4:	89 17       	cp	r24, r25
    5cd6:	18 f0       	brcs	.+6      	; 0x5cde <Lcd_VidDisplayNumber+0x476>
    5cd8:	6b 96       	adiw	r28, 0x1b	; 27
    5cda:	1f ae       	std	Y+63, r1	; 0x3f
    5cdc:	6b 97       	sbiw	r28, 0x1b	; 27
    5cde:	69 96       	adiw	r28, 0x19	; 25
    5ce0:	8f ad       	ldd	r24, Y+63	; 0x3f
    5ce2:	69 97       	sbiw	r28, 0x19	; 25
    5ce4:	6b 96       	adiw	r28, 0x1b	; 27
    5ce6:	9f ad       	ldd	r25, Y+63	; 0x3f
    5ce8:	6b 97       	sbiw	r28, 0x1b	; 27
    5cea:	89 2b       	or	r24, r25
    5cec:	69 96       	adiw	r28, 0x19	; 25
    5cee:	8f af       	std	Y+63, r24	; 0x3f
    5cf0:	69 97       	sbiw	r28, 0x19	; 25
    5cf2:	6a 96       	adiw	r28, 0x1a	; 26
    5cf4:	8f ad       	ldd	r24, Y+63	; 0x3f
    5cf6:	6a 97       	sbiw	r28, 0x1a	; 26
    5cf8:	2f 96       	adiw	r28, 0x0f	; 15
    5cfa:	8f af       	std	Y+63, r24	; 0x3f
    5cfc:	2f 97       	sbiw	r28, 0x0f	; 15
    5cfe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5d00:	8c 89       	ldd	r24, Y+20	; 0x14
    5d02:	98 0f       	add	r25, r24
    5d04:	60 96       	adiw	r28, 0x10	; 16
    5d06:	9f af       	std	Y+63, r25	; 0x3f
    5d08:	60 97       	sbiw	r28, 0x10	; 16
    5d0a:	91 e0       	ldi	r25, 0x01	; 1
    5d0c:	6c 96       	adiw	r28, 0x1c	; 28
    5d0e:	9f af       	std	Y+63, r25	; 0x3f
    5d10:	6c 97       	sbiw	r28, 0x1c	; 28
    5d12:	60 96       	adiw	r28, 0x10	; 16
    5d14:	8f ad       	ldd	r24, Y+63	; 0x3f
    5d16:	60 97       	sbiw	r28, 0x10	; 16
    5d18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5d1a:	89 17       	cp	r24, r25
    5d1c:	18 f0       	brcs	.+6      	; 0x5d24 <Lcd_VidDisplayNumber+0x4bc>
    5d1e:	6c 96       	adiw	r28, 0x1c	; 28
    5d20:	1f ae       	std	Y+63, r1	; 0x3f
    5d22:	6c 97       	sbiw	r28, 0x1c	; 28
    5d24:	69 96       	adiw	r28, 0x19	; 25
    5d26:	8f ad       	ldd	r24, Y+63	; 0x3f
    5d28:	69 97       	sbiw	r28, 0x19	; 25
    5d2a:	60 96       	adiw	r28, 0x10	; 16
    5d2c:	9f ad       	ldd	r25, Y+63	; 0x3f
    5d2e:	60 97       	sbiw	r28, 0x10	; 16
    5d30:	89 0f       	add	r24, r25
    5d32:	6d 96       	adiw	r28, 0x1d	; 29
    5d34:	8f af       	std	Y+63, r24	; 0x3f
    5d36:	6d 97       	sbiw	r28, 0x1d	; 29
    5d38:	81 e0       	ldi	r24, 0x01	; 1
    5d3a:	6e 96       	adiw	r28, 0x1e	; 30
    5d3c:	8f af       	std	Y+63, r24	; 0x3f
    5d3e:	6e 97       	sbiw	r28, 0x1e	; 30
    5d40:	6d 96       	adiw	r28, 0x1d	; 29
    5d42:	9f ad       	ldd	r25, Y+63	; 0x3f
    5d44:	6d 97       	sbiw	r28, 0x1d	; 29
    5d46:	60 96       	adiw	r28, 0x10	; 16
    5d48:	8f ad       	ldd	r24, Y+63	; 0x3f
    5d4a:	60 97       	sbiw	r28, 0x10	; 16
    5d4c:	98 17       	cp	r25, r24
    5d4e:	18 f0       	brcs	.+6      	; 0x5d56 <Lcd_VidDisplayNumber+0x4ee>
    5d50:	6e 96       	adiw	r28, 0x1e	; 30
    5d52:	1f ae       	std	Y+63, r1	; 0x3f
    5d54:	6e 97       	sbiw	r28, 0x1e	; 30
    5d56:	6c 96       	adiw	r28, 0x1c	; 28
    5d58:	9f ad       	ldd	r25, Y+63	; 0x3f
    5d5a:	6c 97       	sbiw	r28, 0x1c	; 28
    5d5c:	6e 96       	adiw	r28, 0x1e	; 30
    5d5e:	8f ad       	ldd	r24, Y+63	; 0x3f
    5d60:	6e 97       	sbiw	r28, 0x1e	; 30
    5d62:	98 2b       	or	r25, r24
    5d64:	6c 96       	adiw	r28, 0x1c	; 28
    5d66:	9f af       	std	Y+63, r25	; 0x3f
    5d68:	6c 97       	sbiw	r28, 0x1c	; 28
    5d6a:	6d 96       	adiw	r28, 0x1d	; 29
    5d6c:	9f ad       	ldd	r25, Y+63	; 0x3f
    5d6e:	6d 97       	sbiw	r28, 0x1d	; 29
    5d70:	60 96       	adiw	r28, 0x10	; 16
    5d72:	9f af       	std	Y+63, r25	; 0x3f
    5d74:	60 97       	sbiw	r28, 0x10	; 16
    5d76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5d78:	9d 89       	ldd	r25, Y+21	; 0x15
    5d7a:	89 0f       	add	r24, r25
    5d7c:	61 96       	adiw	r28, 0x11	; 17
    5d7e:	8f af       	std	Y+63, r24	; 0x3f
    5d80:	61 97       	sbiw	r28, 0x11	; 17
    5d82:	81 e0       	ldi	r24, 0x01	; 1
    5d84:	6f 96       	adiw	r28, 0x1f	; 31
    5d86:	8f af       	std	Y+63, r24	; 0x3f
    5d88:	6f 97       	sbiw	r28, 0x1f	; 31
    5d8a:	61 96       	adiw	r28, 0x11	; 17
    5d8c:	9f ad       	ldd	r25, Y+63	; 0x3f
    5d8e:	61 97       	sbiw	r28, 0x11	; 17
    5d90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5d92:	98 17       	cp	r25, r24
    5d94:	18 f0       	brcs	.+6      	; 0x5d9c <Lcd_VidDisplayNumber+0x534>
    5d96:	6f 96       	adiw	r28, 0x1f	; 31
    5d98:	1f ae       	std	Y+63, r1	; 0x3f
    5d9a:	6f 97       	sbiw	r28, 0x1f	; 31
    5d9c:	6c 96       	adiw	r28, 0x1c	; 28
    5d9e:	9f ad       	ldd	r25, Y+63	; 0x3f
    5da0:	6c 97       	sbiw	r28, 0x1c	; 28
    5da2:	61 96       	adiw	r28, 0x11	; 17
    5da4:	8f ad       	ldd	r24, Y+63	; 0x3f
    5da6:	61 97       	sbiw	r28, 0x11	; 17
    5da8:	98 0f       	add	r25, r24
    5daa:	a0 96       	adiw	r28, 0x20	; 32
    5dac:	9f af       	std	Y+63, r25	; 0x3f
    5dae:	a0 97       	sbiw	r28, 0x20	; 32
    5db0:	91 e0       	ldi	r25, 0x01	; 1
    5db2:	a1 96       	adiw	r28, 0x21	; 33
    5db4:	9f af       	std	Y+63, r25	; 0x3f
    5db6:	a1 97       	sbiw	r28, 0x21	; 33
    5db8:	a0 96       	adiw	r28, 0x20	; 32
    5dba:	8f ad       	ldd	r24, Y+63	; 0x3f
    5dbc:	a0 97       	sbiw	r28, 0x20	; 32
    5dbe:	61 96       	adiw	r28, 0x11	; 17
    5dc0:	9f ad       	ldd	r25, Y+63	; 0x3f
    5dc2:	61 97       	sbiw	r28, 0x11	; 17
    5dc4:	89 17       	cp	r24, r25
    5dc6:	18 f0       	brcs	.+6      	; 0x5dce <Lcd_VidDisplayNumber+0x566>
    5dc8:	a1 96       	adiw	r28, 0x21	; 33
    5dca:	1f ae       	std	Y+63, r1	; 0x3f
    5dcc:	a1 97       	sbiw	r28, 0x21	; 33
    5dce:	6f 96       	adiw	r28, 0x1f	; 31
    5dd0:	8f ad       	ldd	r24, Y+63	; 0x3f
    5dd2:	6f 97       	sbiw	r28, 0x1f	; 31
    5dd4:	a1 96       	adiw	r28, 0x21	; 33
    5dd6:	9f ad       	ldd	r25, Y+63	; 0x3f
    5dd8:	a1 97       	sbiw	r28, 0x21	; 33
    5dda:	89 2b       	or	r24, r25
    5ddc:	6f 96       	adiw	r28, 0x1f	; 31
    5dde:	8f af       	std	Y+63, r24	; 0x3f
    5de0:	6f 97       	sbiw	r28, 0x1f	; 31
    5de2:	a0 96       	adiw	r28, 0x20	; 32
    5de4:	8f ad       	ldd	r24, Y+63	; 0x3f
    5de6:	a0 97       	sbiw	r28, 0x20	; 32
    5de8:	61 96       	adiw	r28, 0x11	; 17
    5dea:	8f af       	std	Y+63, r24	; 0x3f
    5dec:	61 97       	sbiw	r28, 0x11	; 17
    5dee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5df0:	8e 89       	ldd	r24, Y+22	; 0x16
    5df2:	98 0f       	add	r25, r24
    5df4:	62 96       	adiw	r28, 0x12	; 18
    5df6:	9f af       	std	Y+63, r25	; 0x3f
    5df8:	62 97       	sbiw	r28, 0x12	; 18
    5dfa:	91 e0       	ldi	r25, 0x01	; 1
    5dfc:	a2 96       	adiw	r28, 0x22	; 34
    5dfe:	9f af       	std	Y+63, r25	; 0x3f
    5e00:	a2 97       	sbiw	r28, 0x22	; 34
    5e02:	62 96       	adiw	r28, 0x12	; 18
    5e04:	8f ad       	ldd	r24, Y+63	; 0x3f
    5e06:	62 97       	sbiw	r28, 0x12	; 18
    5e08:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5e0a:	89 17       	cp	r24, r25
    5e0c:	18 f0       	brcs	.+6      	; 0x5e14 <Lcd_VidDisplayNumber+0x5ac>
    5e0e:	a2 96       	adiw	r28, 0x22	; 34
    5e10:	1f ae       	std	Y+63, r1	; 0x3f
    5e12:	a2 97       	sbiw	r28, 0x22	; 34
    5e14:	6f 96       	adiw	r28, 0x1f	; 31
    5e16:	8f ad       	ldd	r24, Y+63	; 0x3f
    5e18:	6f 97       	sbiw	r28, 0x1f	; 31
    5e1a:	62 96       	adiw	r28, 0x12	; 18
    5e1c:	9f ad       	ldd	r25, Y+63	; 0x3f
    5e1e:	62 97       	sbiw	r28, 0x12	; 18
    5e20:	89 0f       	add	r24, r25
    5e22:	a3 96       	adiw	r28, 0x23	; 35
    5e24:	8f af       	std	Y+63, r24	; 0x3f
    5e26:	a3 97       	sbiw	r28, 0x23	; 35
    5e28:	81 e0       	ldi	r24, 0x01	; 1
    5e2a:	a4 96       	adiw	r28, 0x24	; 36
    5e2c:	8f af       	std	Y+63, r24	; 0x3f
    5e2e:	a4 97       	sbiw	r28, 0x24	; 36
    5e30:	a3 96       	adiw	r28, 0x23	; 35
    5e32:	9f ad       	ldd	r25, Y+63	; 0x3f
    5e34:	a3 97       	sbiw	r28, 0x23	; 35
    5e36:	62 96       	adiw	r28, 0x12	; 18
    5e38:	8f ad       	ldd	r24, Y+63	; 0x3f
    5e3a:	62 97       	sbiw	r28, 0x12	; 18
    5e3c:	98 17       	cp	r25, r24
    5e3e:	18 f0       	brcs	.+6      	; 0x5e46 <Lcd_VidDisplayNumber+0x5de>
    5e40:	a4 96       	adiw	r28, 0x24	; 36
    5e42:	1f ae       	std	Y+63, r1	; 0x3f
    5e44:	a4 97       	sbiw	r28, 0x24	; 36
    5e46:	a2 96       	adiw	r28, 0x22	; 34
    5e48:	9f ad       	ldd	r25, Y+63	; 0x3f
    5e4a:	a2 97       	sbiw	r28, 0x22	; 34
    5e4c:	a4 96       	adiw	r28, 0x24	; 36
    5e4e:	8f ad       	ldd	r24, Y+63	; 0x3f
    5e50:	a4 97       	sbiw	r28, 0x24	; 36
    5e52:	98 2b       	or	r25, r24
    5e54:	a2 96       	adiw	r28, 0x22	; 34
    5e56:	9f af       	std	Y+63, r25	; 0x3f
    5e58:	a2 97       	sbiw	r28, 0x22	; 34
    5e5a:	a3 96       	adiw	r28, 0x23	; 35
    5e5c:	9f ad       	ldd	r25, Y+63	; 0x3f
    5e5e:	a3 97       	sbiw	r28, 0x23	; 35
    5e60:	62 96       	adiw	r28, 0x12	; 18
    5e62:	9f af       	std	Y+63, r25	; 0x3f
    5e64:	62 97       	sbiw	r28, 0x12	; 18
    5e66:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5e68:	9f 89       	ldd	r25, Y+23	; 0x17
    5e6a:	89 0f       	add	r24, r25
    5e6c:	63 96       	adiw	r28, 0x13	; 19
    5e6e:	8f af       	std	Y+63, r24	; 0x3f
    5e70:	63 97       	sbiw	r28, 0x13	; 19
    5e72:	81 e0       	ldi	r24, 0x01	; 1
    5e74:	a5 96       	adiw	r28, 0x25	; 37
    5e76:	8f af       	std	Y+63, r24	; 0x3f
    5e78:	a5 97       	sbiw	r28, 0x25	; 37
    5e7a:	63 96       	adiw	r28, 0x13	; 19
    5e7c:	9f ad       	ldd	r25, Y+63	; 0x3f
    5e7e:	63 97       	sbiw	r28, 0x13	; 19
    5e80:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5e82:	98 17       	cp	r25, r24
    5e84:	18 f0       	brcs	.+6      	; 0x5e8c <Lcd_VidDisplayNumber+0x624>
    5e86:	a5 96       	adiw	r28, 0x25	; 37
    5e88:	1f ae       	std	Y+63, r1	; 0x3f
    5e8a:	a5 97       	sbiw	r28, 0x25	; 37
    5e8c:	a2 96       	adiw	r28, 0x22	; 34
    5e8e:	9f ad       	ldd	r25, Y+63	; 0x3f
    5e90:	a2 97       	sbiw	r28, 0x22	; 34
    5e92:	63 96       	adiw	r28, 0x13	; 19
    5e94:	8f ad       	ldd	r24, Y+63	; 0x3f
    5e96:	63 97       	sbiw	r28, 0x13	; 19
    5e98:	98 0f       	add	r25, r24
    5e9a:	a6 96       	adiw	r28, 0x26	; 38
    5e9c:	9f af       	std	Y+63, r25	; 0x3f
    5e9e:	a6 97       	sbiw	r28, 0x26	; 38
    5ea0:	91 e0       	ldi	r25, 0x01	; 1
    5ea2:	a7 96       	adiw	r28, 0x27	; 39
    5ea4:	9f af       	std	Y+63, r25	; 0x3f
    5ea6:	a7 97       	sbiw	r28, 0x27	; 39
    5ea8:	a6 96       	adiw	r28, 0x26	; 38
    5eaa:	8f ad       	ldd	r24, Y+63	; 0x3f
    5eac:	a6 97       	sbiw	r28, 0x26	; 38
    5eae:	63 96       	adiw	r28, 0x13	; 19
    5eb0:	9f ad       	ldd	r25, Y+63	; 0x3f
    5eb2:	63 97       	sbiw	r28, 0x13	; 19
    5eb4:	89 17       	cp	r24, r25
    5eb6:	18 f0       	brcs	.+6      	; 0x5ebe <Lcd_VidDisplayNumber+0x656>
    5eb8:	a7 96       	adiw	r28, 0x27	; 39
    5eba:	1f ae       	std	Y+63, r1	; 0x3f
    5ebc:	a7 97       	sbiw	r28, 0x27	; 39
    5ebe:	a5 96       	adiw	r28, 0x25	; 37
    5ec0:	8f ad       	ldd	r24, Y+63	; 0x3f
    5ec2:	a5 97       	sbiw	r28, 0x25	; 37
    5ec4:	a7 96       	adiw	r28, 0x27	; 39
    5ec6:	9f ad       	ldd	r25, Y+63	; 0x3f
    5ec8:	a7 97       	sbiw	r28, 0x27	; 39
    5eca:	89 2b       	or	r24, r25
    5ecc:	a5 96       	adiw	r28, 0x25	; 37
    5ece:	8f af       	std	Y+63, r24	; 0x3f
    5ed0:	a5 97       	sbiw	r28, 0x25	; 37
    5ed2:	a6 96       	adiw	r28, 0x26	; 38
    5ed4:	8f ad       	ldd	r24, Y+63	; 0x3f
    5ed6:	a6 97       	sbiw	r28, 0x26	; 38
    5ed8:	63 96       	adiw	r28, 0x13	; 19
    5eda:	8f af       	std	Y+63, r24	; 0x3f
    5edc:	63 97       	sbiw	r28, 0x13	; 19
    5ede:	98 a1       	ldd	r25, Y+32	; 0x20
    5ee0:	88 8d       	ldd	r24, Y+24	; 0x18
    5ee2:	98 0f       	add	r25, r24
    5ee4:	64 96       	adiw	r28, 0x14	; 20
    5ee6:	9f af       	std	Y+63, r25	; 0x3f
    5ee8:	64 97       	sbiw	r28, 0x14	; 20
    5eea:	a5 96       	adiw	r28, 0x25	; 37
    5eec:	8f ad       	ldd	r24, Y+63	; 0x3f
    5eee:	a5 97       	sbiw	r28, 0x25	; 37
    5ef0:	64 96       	adiw	r28, 0x14	; 20
    5ef2:	9f ad       	ldd	r25, Y+63	; 0x3f
    5ef4:	64 97       	sbiw	r28, 0x14	; 20
    5ef6:	89 0f       	add	r24, r25
    5ef8:	64 96       	adiw	r28, 0x14	; 20
    5efa:	8f af       	std	Y+63, r24	; 0x3f
    5efc:	64 97       	sbiw	r28, 0x14	; 20
    5efe:	2d 96       	adiw	r28, 0x0d	; 13
    5f00:	8f ad       	ldd	r24, Y+63	; 0x3f
    5f02:	2d 97       	sbiw	r28, 0x0d	; 13
    5f04:	89 83       	std	Y+1, r24	; 0x01
    5f06:	2e 96       	adiw	r28, 0x0e	; 14
    5f08:	9f ad       	ldd	r25, Y+63	; 0x3f
    5f0a:	2e 97       	sbiw	r28, 0x0e	; 14
    5f0c:	9a 83       	std	Y+2, r25	; 0x02
    5f0e:	2f 96       	adiw	r28, 0x0f	; 15
    5f10:	8f ad       	ldd	r24, Y+63	; 0x3f
    5f12:	2f 97       	sbiw	r28, 0x0f	; 15
    5f14:	8b 83       	std	Y+3, r24	; 0x03
    5f16:	60 96       	adiw	r28, 0x10	; 16
    5f18:	9f ad       	ldd	r25, Y+63	; 0x3f
    5f1a:	60 97       	sbiw	r28, 0x10	; 16
    5f1c:	9c 83       	std	Y+4, r25	; 0x04
    5f1e:	61 96       	adiw	r28, 0x11	; 17
    5f20:	8f ad       	ldd	r24, Y+63	; 0x3f
    5f22:	61 97       	sbiw	r28, 0x11	; 17
    5f24:	8d 83       	std	Y+5, r24	; 0x05
    5f26:	62 96       	adiw	r28, 0x12	; 18
    5f28:	9f ad       	ldd	r25, Y+63	; 0x3f
    5f2a:	62 97       	sbiw	r28, 0x12	; 18
    5f2c:	9e 83       	std	Y+6, r25	; 0x06
    5f2e:	63 96       	adiw	r28, 0x13	; 19
    5f30:	8f ad       	ldd	r24, Y+63	; 0x3f
    5f32:	63 97       	sbiw	r28, 0x13	; 19
    5f34:	8f 83       	std	Y+7, r24	; 0x07
    5f36:	64 96       	adiw	r28, 0x14	; 20
    5f38:	9f ad       	ldd	r25, Y+63	; 0x3f
    5f3a:	64 97       	sbiw	r28, 0x14	; 20
    5f3c:	98 87       	std	Y+8, r25	; 0x08
		Copy_u64Num /=10;
    5f3e:	a9 84       	ldd	r10, Y+9	; 0x09
    5f40:	ba 84       	ldd	r11, Y+10	; 0x0a
    5f42:	cb 84       	ldd	r12, Y+11	; 0x0b
    5f44:	dc 84       	ldd	r13, Y+12	; 0x0c
    5f46:	ed 84       	ldd	r14, Y+13	; 0x0d
    5f48:	fe 84       	ldd	r15, Y+14	; 0x0e
    5f4a:	0f 85       	ldd	r16, Y+15	; 0x0f
    5f4c:	18 89       	ldd	r17, Y+16	; 0x10
    5f4e:	2a 2d       	mov	r18, r10
    5f50:	3b 2d       	mov	r19, r11
    5f52:	4c 2d       	mov	r20, r12
    5f54:	5d 2d       	mov	r21, r13
    5f56:	6e 2d       	mov	r22, r14
    5f58:	7f 2d       	mov	r23, r15
    5f5a:	80 2f       	mov	r24, r16
    5f5c:	91 2f       	mov	r25, r17
    5f5e:	0f 2e       	mov	r0, r31
    5f60:	fa e0       	ldi	r31, 0x0A	; 10
    5f62:	af 2e       	mov	r10, r31
    5f64:	f0 2d       	mov	r31, r0
    5f66:	bb 24       	eor	r11, r11
    5f68:	cc 24       	eor	r12, r12
    5f6a:	dd 24       	eor	r13, r13
    5f6c:	ee 24       	eor	r14, r14
    5f6e:	ff 24       	eor	r15, r15
    5f70:	00 e0       	ldi	r16, 0x00	; 0
    5f72:	10 e0       	ldi	r17, 0x00	; 0
    5f74:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__udivdi3>
    5f78:	a2 2e       	mov	r10, r18
    5f7a:	b3 2e       	mov	r11, r19
    5f7c:	c4 2e       	mov	r12, r20
    5f7e:	d5 2e       	mov	r13, r21
    5f80:	e6 2e       	mov	r14, r22
    5f82:	f7 2e       	mov	r15, r23
    5f84:	08 2f       	mov	r16, r24
    5f86:	19 2f       	mov	r17, r25
    5f88:	a9 86       	std	Y+9, r10	; 0x09
    5f8a:	ba 86       	std	Y+10, r11	; 0x0a
    5f8c:	cb 86       	std	Y+11, r12	; 0x0b
    5f8e:	dc 86       	std	Y+12, r13	; 0x0c
    5f90:	ed 86       	std	Y+13, r14	; 0x0d
    5f92:	fe 86       	std	Y+14, r15	; 0x0e
    5f94:	0f 87       	std	Y+15, r16	; 0x0f
    5f96:	18 8b       	std	Y+16, r17	; 0x10
	uint64 LOC_u8Inverse=1;
	if(Copy_u64Num==0)
	{
		Lcd_VidDisplayChracter('0');
	}
	while(Copy_u64Num != 0)
    5f98:	89 85       	ldd	r24, Y+9	; 0x09
    5f9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f9c:	89 2b       	or	r24, r25
    5f9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    5fa0:	89 2b       	or	r24, r25
    5fa2:	9c 85       	ldd	r25, Y+12	; 0x0c
    5fa4:	89 2b       	or	r24, r25
    5fa6:	9d 85       	ldd	r25, Y+13	; 0x0d
    5fa8:	89 2b       	or	r24, r25
    5faa:	9e 85       	ldd	r25, Y+14	; 0x0e
    5fac:	89 2b       	or	r24, r25
    5fae:	9f 85       	ldd	r25, Y+15	; 0x0f
    5fb0:	89 2b       	or	r24, r25
    5fb2:	98 89       	ldd	r25, Y+16	; 0x10
    5fb4:	89 2b       	or	r24, r25
    5fb6:	88 23       	and	r24, r24
    5fb8:	09 f0       	breq	.+2      	; 0x5fbc <Lcd_VidDisplayNumber+0x754>
    5fba:	90 cc       	rjmp	.-1760   	; 0x58dc <Lcd_VidDisplayNumber+0x74>
    5fbc:	5e c0       	rjmp	.+188    	; 0x607a <Lcd_VidDisplayNumber+0x812>
		LOC_u8Inverse=(LOC_u8Inverse*10)+(Copy_u64Num%10);
		Copy_u64Num /=10;
	}
	while(LOC_u8Inverse != 1)
	{
		Lcd_VidDisplayChracter(((LOC_u8Inverse%10)+'0'));
    5fbe:	a9 80       	ldd	r10, Y+1	; 0x01
    5fc0:	ba 80       	ldd	r11, Y+2	; 0x02
    5fc2:	cb 80       	ldd	r12, Y+3	; 0x03
    5fc4:	dc 80       	ldd	r13, Y+4	; 0x04
    5fc6:	ed 80       	ldd	r14, Y+5	; 0x05
    5fc8:	fe 80       	ldd	r15, Y+6	; 0x06
    5fca:	0f 81       	ldd	r16, Y+7	; 0x07
    5fcc:	18 85       	ldd	r17, Y+8	; 0x08
    5fce:	2a 2d       	mov	r18, r10
    5fd0:	3b 2d       	mov	r19, r11
    5fd2:	4c 2d       	mov	r20, r12
    5fd4:	5d 2d       	mov	r21, r13
    5fd6:	6e 2d       	mov	r22, r14
    5fd8:	7f 2d       	mov	r23, r15
    5fda:	80 2f       	mov	r24, r16
    5fdc:	91 2f       	mov	r25, r17
    5fde:	0f 2e       	mov	r0, r31
    5fe0:	fa e0       	ldi	r31, 0x0A	; 10
    5fe2:	af 2e       	mov	r10, r31
    5fe4:	f0 2d       	mov	r31, r0
    5fe6:	bb 24       	eor	r11, r11
    5fe8:	cc 24       	eor	r12, r12
    5fea:	dd 24       	eor	r13, r13
    5fec:	ee 24       	eor	r14, r14
    5fee:	ff 24       	eor	r15, r15
    5ff0:	00 e0       	ldi	r16, 0x00	; 0
    5ff2:	10 e0       	ldi	r17, 0x00	; 0
    5ff4:	0e 94 69 07 	call	0xed2	; 0xed2 <__umoddi3>
    5ff8:	a2 2e       	mov	r10, r18
    5ffa:	b3 2e       	mov	r11, r19
    5ffc:	c4 2e       	mov	r12, r20
    5ffe:	d5 2e       	mov	r13, r21
    6000:	e6 2e       	mov	r14, r22
    6002:	f7 2e       	mov	r15, r23
    6004:	08 2f       	mov	r16, r24
    6006:	19 2f       	mov	r17, r25
    6008:	2a 2d       	mov	r18, r10
    600a:	3b 2d       	mov	r19, r11
    600c:	4c 2d       	mov	r20, r12
    600e:	5d 2d       	mov	r21, r13
    6010:	6e 2d       	mov	r22, r14
    6012:	7f 2d       	mov	r23, r15
    6014:	80 2f       	mov	r24, r16
    6016:	91 2f       	mov	r25, r17
    6018:	82 2f       	mov	r24, r18
    601a:	80 5d       	subi	r24, 0xD0	; 208
    601c:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <Lcd_VidDisplayChracter>
		LOC_u8Inverse /=10;
    6020:	a9 80       	ldd	r10, Y+1	; 0x01
    6022:	ba 80       	ldd	r11, Y+2	; 0x02
    6024:	cb 80       	ldd	r12, Y+3	; 0x03
    6026:	dc 80       	ldd	r13, Y+4	; 0x04
    6028:	ed 80       	ldd	r14, Y+5	; 0x05
    602a:	fe 80       	ldd	r15, Y+6	; 0x06
    602c:	0f 81       	ldd	r16, Y+7	; 0x07
    602e:	18 85       	ldd	r17, Y+8	; 0x08
    6030:	2a 2d       	mov	r18, r10
    6032:	3b 2d       	mov	r19, r11
    6034:	4c 2d       	mov	r20, r12
    6036:	5d 2d       	mov	r21, r13
    6038:	6e 2d       	mov	r22, r14
    603a:	7f 2d       	mov	r23, r15
    603c:	80 2f       	mov	r24, r16
    603e:	91 2f       	mov	r25, r17
    6040:	0f 2e       	mov	r0, r31
    6042:	fa e0       	ldi	r31, 0x0A	; 10
    6044:	af 2e       	mov	r10, r31
    6046:	f0 2d       	mov	r31, r0
    6048:	bb 24       	eor	r11, r11
    604a:	cc 24       	eor	r12, r12
    604c:	dd 24       	eor	r13, r13
    604e:	ee 24       	eor	r14, r14
    6050:	ff 24       	eor	r15, r15
    6052:	00 e0       	ldi	r16, 0x00	; 0
    6054:	10 e0       	ldi	r17, 0x00	; 0
    6056:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__udivdi3>
    605a:	a2 2e       	mov	r10, r18
    605c:	b3 2e       	mov	r11, r19
    605e:	c4 2e       	mov	r12, r20
    6060:	d5 2e       	mov	r13, r21
    6062:	e6 2e       	mov	r14, r22
    6064:	f7 2e       	mov	r15, r23
    6066:	08 2f       	mov	r16, r24
    6068:	19 2f       	mov	r17, r25
    606a:	a9 82       	std	Y+1, r10	; 0x01
    606c:	ba 82       	std	Y+2, r11	; 0x02
    606e:	cb 82       	std	Y+3, r12	; 0x03
    6070:	dc 82       	std	Y+4, r13	; 0x04
    6072:	ed 82       	std	Y+5, r14	; 0x05
    6074:	fe 82       	std	Y+6, r15	; 0x06
    6076:	0f 83       	std	Y+7, r16	; 0x07
    6078:	18 87       	std	Y+8, r17	; 0x08
	while(Copy_u64Num != 0)
	{
		LOC_u8Inverse=(LOC_u8Inverse*10)+(Copy_u64Num%10);
		Copy_u64Num /=10;
	}
	while(LOC_u8Inverse != 1)
    607a:	89 81       	ldd	r24, Y+1	; 0x01
    607c:	81 30       	cpi	r24, 0x01	; 1
    607e:	09 f0       	breq	.+2      	; 0x6082 <Lcd_VidDisplayNumber+0x81a>
    6080:	9e cf       	rjmp	.-196    	; 0x5fbe <Lcd_VidDisplayNumber+0x756>
    6082:	8a 81       	ldd	r24, Y+2	; 0x02
    6084:	88 23       	and	r24, r24
    6086:	09 f0       	breq	.+2      	; 0x608a <Lcd_VidDisplayNumber+0x822>
    6088:	9a cf       	rjmp	.-204    	; 0x5fbe <Lcd_VidDisplayNumber+0x756>
    608a:	8b 81       	ldd	r24, Y+3	; 0x03
    608c:	88 23       	and	r24, r24
    608e:	09 f0       	breq	.+2      	; 0x6092 <Lcd_VidDisplayNumber+0x82a>
    6090:	96 cf       	rjmp	.-212    	; 0x5fbe <Lcd_VidDisplayNumber+0x756>
    6092:	8c 81       	ldd	r24, Y+4	; 0x04
    6094:	88 23       	and	r24, r24
    6096:	09 f0       	breq	.+2      	; 0x609a <Lcd_VidDisplayNumber+0x832>
    6098:	92 cf       	rjmp	.-220    	; 0x5fbe <Lcd_VidDisplayNumber+0x756>
    609a:	8d 81       	ldd	r24, Y+5	; 0x05
    609c:	88 23       	and	r24, r24
    609e:	09 f0       	breq	.+2      	; 0x60a2 <Lcd_VidDisplayNumber+0x83a>
    60a0:	8e cf       	rjmp	.-228    	; 0x5fbe <Lcd_VidDisplayNumber+0x756>
    60a2:	8e 81       	ldd	r24, Y+6	; 0x06
    60a4:	88 23       	and	r24, r24
    60a6:	09 f0       	breq	.+2      	; 0x60aa <Lcd_VidDisplayNumber+0x842>
    60a8:	8a cf       	rjmp	.-236    	; 0x5fbe <Lcd_VidDisplayNumber+0x756>
    60aa:	8f 81       	ldd	r24, Y+7	; 0x07
    60ac:	88 23       	and	r24, r24
    60ae:	09 f0       	breq	.+2      	; 0x60b2 <Lcd_VidDisplayNumber+0x84a>
    60b0:	86 cf       	rjmp	.-244    	; 0x5fbe <Lcd_VidDisplayNumber+0x756>
    60b2:	88 85       	ldd	r24, Y+8	; 0x08
    60b4:	88 23       	and	r24, r24
    60b6:	09 f0       	breq	.+2      	; 0x60ba <Lcd_VidDisplayNumber+0x852>
    60b8:	82 cf       	rjmp	.-252    	; 0x5fbe <Lcd_VidDisplayNumber+0x756>
	{
		Lcd_VidDisplayChracter(((LOC_u8Inverse%10)+'0'));
		LOC_u8Inverse /=10;
	}
}
    60ba:	ca 59       	subi	r28, 0x9A	; 154
    60bc:	df 4f       	sbci	r29, 0xFF	; 255
    60be:	0f b6       	in	r0, 0x3f	; 63
    60c0:	f8 94       	cli
    60c2:	de bf       	out	0x3e, r29	; 62
    60c4:	0f be       	out	0x3f, r0	; 63
    60c6:	cd bf       	out	0x3d, r28	; 61
    60c8:	cf 91       	pop	r28
    60ca:	df 91       	pop	r29
    60cc:	1f 91       	pop	r17
    60ce:	0f 91       	pop	r16
    60d0:	ff 90       	pop	r15
    60d2:	ef 90       	pop	r14
    60d4:	df 90       	pop	r13
    60d6:	cf 90       	pop	r12
    60d8:	bf 90       	pop	r11
    60da:	af 90       	pop	r10
    60dc:	08 95       	ret

000060de <LCD_vidClrDisplay>:

void LCD_vidClrDisplay(void)
{
    60de:	df 93       	push	r29
    60e0:	cf 93       	push	r28
    60e2:	cd b7       	in	r28, 0x3d	; 61
    60e4:	de b7       	in	r29, 0x3e	; 62
    60e6:	6c 97       	sbiw	r28, 0x1c	; 28
    60e8:	0f b6       	in	r0, 0x3f	; 63
    60ea:	f8 94       	cli
    60ec:	de bf       	out	0x3e, r29	; 62
    60ee:	0f be       	out	0x3f, r0	; 63
    60f0:	cd bf       	out	0x3d, r28	; 61
	Lcd_VidSendCommand(LCD_CLEAR_DISPLAY);
    60f2:	81 e0       	ldi	r24, 0x01	; 1
    60f4:	0e 94 04 23 	call	0x4608	; 0x4608 <Lcd_VidSendCommand>
    60f8:	80 e0       	ldi	r24, 0x00	; 0
    60fa:	90 e0       	ldi	r25, 0x00	; 0
    60fc:	a0 e8       	ldi	r26, 0x80	; 128
    60fe:	b0 e4       	ldi	r27, 0x40	; 64
    6100:	89 8f       	std	Y+25, r24	; 0x19
    6102:	9a 8f       	std	Y+26, r25	; 0x1a
    6104:	ab 8f       	std	Y+27, r26	; 0x1b
    6106:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6108:	69 8d       	ldd	r22, Y+25	; 0x19
    610a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    610c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    610e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6110:	20 e0       	ldi	r18, 0x00	; 0
    6112:	30 e0       	ldi	r19, 0x00	; 0
    6114:	4a ef       	ldi	r20, 0xFA	; 250
    6116:	54 e4       	ldi	r21, 0x44	; 68
    6118:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    611c:	dc 01       	movw	r26, r24
    611e:	cb 01       	movw	r24, r22
    6120:	8d 8b       	std	Y+21, r24	; 0x15
    6122:	9e 8b       	std	Y+22, r25	; 0x16
    6124:	af 8b       	std	Y+23, r26	; 0x17
    6126:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6128:	6d 89       	ldd	r22, Y+21	; 0x15
    612a:	7e 89       	ldd	r23, Y+22	; 0x16
    612c:	8f 89       	ldd	r24, Y+23	; 0x17
    612e:	98 8d       	ldd	r25, Y+24	; 0x18
    6130:	20 e0       	ldi	r18, 0x00	; 0
    6132:	30 e0       	ldi	r19, 0x00	; 0
    6134:	40 e8       	ldi	r20, 0x80	; 128
    6136:	5f e3       	ldi	r21, 0x3F	; 63
    6138:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    613c:	88 23       	and	r24, r24
    613e:	2c f4       	brge	.+10     	; 0x614a <LCD_vidClrDisplay+0x6c>
		__ticks = 1;
    6140:	81 e0       	ldi	r24, 0x01	; 1
    6142:	90 e0       	ldi	r25, 0x00	; 0
    6144:	9c 8b       	std	Y+20, r25	; 0x14
    6146:	8b 8b       	std	Y+19, r24	; 0x13
    6148:	3f c0       	rjmp	.+126    	; 0x61c8 <LCD_vidClrDisplay+0xea>
	else if (__tmp > 65535)
    614a:	6d 89       	ldd	r22, Y+21	; 0x15
    614c:	7e 89       	ldd	r23, Y+22	; 0x16
    614e:	8f 89       	ldd	r24, Y+23	; 0x17
    6150:	98 8d       	ldd	r25, Y+24	; 0x18
    6152:	20 e0       	ldi	r18, 0x00	; 0
    6154:	3f ef       	ldi	r19, 0xFF	; 255
    6156:	4f e7       	ldi	r20, 0x7F	; 127
    6158:	57 e4       	ldi	r21, 0x47	; 71
    615a:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    615e:	18 16       	cp	r1, r24
    6160:	4c f5       	brge	.+82     	; 0x61b4 <LCD_vidClrDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6162:	69 8d       	ldd	r22, Y+25	; 0x19
    6164:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6166:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6168:	9c 8d       	ldd	r25, Y+28	; 0x1c
    616a:	20 e0       	ldi	r18, 0x00	; 0
    616c:	30 e0       	ldi	r19, 0x00	; 0
    616e:	40 e2       	ldi	r20, 0x20	; 32
    6170:	51 e4       	ldi	r21, 0x41	; 65
    6172:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6176:	dc 01       	movw	r26, r24
    6178:	cb 01       	movw	r24, r22
    617a:	bc 01       	movw	r22, r24
    617c:	cd 01       	movw	r24, r26
    617e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6182:	dc 01       	movw	r26, r24
    6184:	cb 01       	movw	r24, r22
    6186:	9c 8b       	std	Y+20, r25	; 0x14
    6188:	8b 8b       	std	Y+19, r24	; 0x13
    618a:	0f c0       	rjmp	.+30     	; 0x61aa <LCD_vidClrDisplay+0xcc>
    618c:	88 ec       	ldi	r24, 0xC8	; 200
    618e:	90 e0       	ldi	r25, 0x00	; 0
    6190:	9a 8b       	std	Y+18, r25	; 0x12
    6192:	89 8b       	std	Y+17, r24	; 0x11
    6194:	89 89       	ldd	r24, Y+17	; 0x11
    6196:	9a 89       	ldd	r25, Y+18	; 0x12
    6198:	01 97       	sbiw	r24, 0x01	; 1
    619a:	f1 f7       	brne	.-4      	; 0x6198 <LCD_vidClrDisplay+0xba>
    619c:	9a 8b       	std	Y+18, r25	; 0x12
    619e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    61a0:	8b 89       	ldd	r24, Y+19	; 0x13
    61a2:	9c 89       	ldd	r25, Y+20	; 0x14
    61a4:	01 97       	sbiw	r24, 0x01	; 1
    61a6:	9c 8b       	std	Y+20, r25	; 0x14
    61a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    61aa:	8b 89       	ldd	r24, Y+19	; 0x13
    61ac:	9c 89       	ldd	r25, Y+20	; 0x14
    61ae:	00 97       	sbiw	r24, 0x00	; 0
    61b0:	69 f7       	brne	.-38     	; 0x618c <LCD_vidClrDisplay+0xae>
    61b2:	14 c0       	rjmp	.+40     	; 0x61dc <LCD_vidClrDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    61b4:	6d 89       	ldd	r22, Y+21	; 0x15
    61b6:	7e 89       	ldd	r23, Y+22	; 0x16
    61b8:	8f 89       	ldd	r24, Y+23	; 0x17
    61ba:	98 8d       	ldd	r25, Y+24	; 0x18
    61bc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    61c0:	dc 01       	movw	r26, r24
    61c2:	cb 01       	movw	r24, r22
    61c4:	9c 8b       	std	Y+20, r25	; 0x14
    61c6:	8b 8b       	std	Y+19, r24	; 0x13
    61c8:	8b 89       	ldd	r24, Y+19	; 0x13
    61ca:	9c 89       	ldd	r25, Y+20	; 0x14
    61cc:	98 8b       	std	Y+16, r25	; 0x10
    61ce:	8f 87       	std	Y+15, r24	; 0x0f
    61d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    61d2:	98 89       	ldd	r25, Y+16	; 0x10
    61d4:	01 97       	sbiw	r24, 0x01	; 1
    61d6:	f1 f7       	brne	.-4      	; 0x61d4 <LCD_vidClrDisplay+0xf6>
    61d8:	98 8b       	std	Y+16, r25	; 0x10
    61da:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(4);
	Lcd_VidSendCommand(LCD_CURSOR_HOME);
    61dc:	82 e0       	ldi	r24, 0x02	; 2
    61de:	0e 94 04 23 	call	0x4608	; 0x4608 <Lcd_VidSendCommand>
    61e2:	80 e0       	ldi	r24, 0x00	; 0
    61e4:	90 e0       	ldi	r25, 0x00	; 0
    61e6:	a0 e8       	ldi	r26, 0x80	; 128
    61e8:	b0 e4       	ldi	r27, 0x40	; 64
    61ea:	8b 87       	std	Y+11, r24	; 0x0b
    61ec:	9c 87       	std	Y+12, r25	; 0x0c
    61ee:	ad 87       	std	Y+13, r26	; 0x0d
    61f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    61f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    61f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    61f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    61f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    61fa:	20 e0       	ldi	r18, 0x00	; 0
    61fc:	30 e0       	ldi	r19, 0x00	; 0
    61fe:	4a ef       	ldi	r20, 0xFA	; 250
    6200:	54 e4       	ldi	r21, 0x44	; 68
    6202:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6206:	dc 01       	movw	r26, r24
    6208:	cb 01       	movw	r24, r22
    620a:	8f 83       	std	Y+7, r24	; 0x07
    620c:	98 87       	std	Y+8, r25	; 0x08
    620e:	a9 87       	std	Y+9, r26	; 0x09
    6210:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6212:	6f 81       	ldd	r22, Y+7	; 0x07
    6214:	78 85       	ldd	r23, Y+8	; 0x08
    6216:	89 85       	ldd	r24, Y+9	; 0x09
    6218:	9a 85       	ldd	r25, Y+10	; 0x0a
    621a:	20 e0       	ldi	r18, 0x00	; 0
    621c:	30 e0       	ldi	r19, 0x00	; 0
    621e:	40 e8       	ldi	r20, 0x80	; 128
    6220:	5f e3       	ldi	r21, 0x3F	; 63
    6222:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    6226:	88 23       	and	r24, r24
    6228:	2c f4       	brge	.+10     	; 0x6234 <LCD_vidClrDisplay+0x156>
		__ticks = 1;
    622a:	81 e0       	ldi	r24, 0x01	; 1
    622c:	90 e0       	ldi	r25, 0x00	; 0
    622e:	9e 83       	std	Y+6, r25	; 0x06
    6230:	8d 83       	std	Y+5, r24	; 0x05
    6232:	3f c0       	rjmp	.+126    	; 0x62b2 <LCD_vidClrDisplay+0x1d4>
	else if (__tmp > 65535)
    6234:	6f 81       	ldd	r22, Y+7	; 0x07
    6236:	78 85       	ldd	r23, Y+8	; 0x08
    6238:	89 85       	ldd	r24, Y+9	; 0x09
    623a:	9a 85       	ldd	r25, Y+10	; 0x0a
    623c:	20 e0       	ldi	r18, 0x00	; 0
    623e:	3f ef       	ldi	r19, 0xFF	; 255
    6240:	4f e7       	ldi	r20, 0x7F	; 127
    6242:	57 e4       	ldi	r21, 0x47	; 71
    6244:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    6248:	18 16       	cp	r1, r24
    624a:	4c f5       	brge	.+82     	; 0x629e <LCD_vidClrDisplay+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    624c:	6b 85       	ldd	r22, Y+11	; 0x0b
    624e:	7c 85       	ldd	r23, Y+12	; 0x0c
    6250:	8d 85       	ldd	r24, Y+13	; 0x0d
    6252:	9e 85       	ldd	r25, Y+14	; 0x0e
    6254:	20 e0       	ldi	r18, 0x00	; 0
    6256:	30 e0       	ldi	r19, 0x00	; 0
    6258:	40 e2       	ldi	r20, 0x20	; 32
    625a:	51 e4       	ldi	r21, 0x41	; 65
    625c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6260:	dc 01       	movw	r26, r24
    6262:	cb 01       	movw	r24, r22
    6264:	bc 01       	movw	r22, r24
    6266:	cd 01       	movw	r24, r26
    6268:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    626c:	dc 01       	movw	r26, r24
    626e:	cb 01       	movw	r24, r22
    6270:	9e 83       	std	Y+6, r25	; 0x06
    6272:	8d 83       	std	Y+5, r24	; 0x05
    6274:	0f c0       	rjmp	.+30     	; 0x6294 <LCD_vidClrDisplay+0x1b6>
    6276:	88 ec       	ldi	r24, 0xC8	; 200
    6278:	90 e0       	ldi	r25, 0x00	; 0
    627a:	9c 83       	std	Y+4, r25	; 0x04
    627c:	8b 83       	std	Y+3, r24	; 0x03
    627e:	8b 81       	ldd	r24, Y+3	; 0x03
    6280:	9c 81       	ldd	r25, Y+4	; 0x04
    6282:	01 97       	sbiw	r24, 0x01	; 1
    6284:	f1 f7       	brne	.-4      	; 0x6282 <LCD_vidClrDisplay+0x1a4>
    6286:	9c 83       	std	Y+4, r25	; 0x04
    6288:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    628a:	8d 81       	ldd	r24, Y+5	; 0x05
    628c:	9e 81       	ldd	r25, Y+6	; 0x06
    628e:	01 97       	sbiw	r24, 0x01	; 1
    6290:	9e 83       	std	Y+6, r25	; 0x06
    6292:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6294:	8d 81       	ldd	r24, Y+5	; 0x05
    6296:	9e 81       	ldd	r25, Y+6	; 0x06
    6298:	00 97       	sbiw	r24, 0x00	; 0
    629a:	69 f7       	brne	.-38     	; 0x6276 <LCD_vidClrDisplay+0x198>
    629c:	14 c0       	rjmp	.+40     	; 0x62c6 <LCD_vidClrDisplay+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    629e:	6f 81       	ldd	r22, Y+7	; 0x07
    62a0:	78 85       	ldd	r23, Y+8	; 0x08
    62a2:	89 85       	ldd	r24, Y+9	; 0x09
    62a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    62a6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    62aa:	dc 01       	movw	r26, r24
    62ac:	cb 01       	movw	r24, r22
    62ae:	9e 83       	std	Y+6, r25	; 0x06
    62b0:	8d 83       	std	Y+5, r24	; 0x05
    62b2:	8d 81       	ldd	r24, Y+5	; 0x05
    62b4:	9e 81       	ldd	r25, Y+6	; 0x06
    62b6:	9a 83       	std	Y+2, r25	; 0x02
    62b8:	89 83       	std	Y+1, r24	; 0x01
    62ba:	89 81       	ldd	r24, Y+1	; 0x01
    62bc:	9a 81       	ldd	r25, Y+2	; 0x02
    62be:	01 97       	sbiw	r24, 0x01	; 1
    62c0:	f1 f7       	brne	.-4      	; 0x62be <LCD_vidClrDisplay+0x1e0>
    62c2:	9a 83       	std	Y+2, r25	; 0x02
    62c4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(4);

}
    62c6:	6c 96       	adiw	r28, 0x1c	; 28
    62c8:	0f b6       	in	r0, 0x3f	; 63
    62ca:	f8 94       	cli
    62cc:	de bf       	out	0x3e, r29	; 62
    62ce:	0f be       	out	0x3f, r0	; 63
    62d0:	cd bf       	out	0x3d, r28	; 61
    62d2:	cf 91       	pop	r28
    62d4:	df 91       	pop	r29
    62d6:	08 95       	ret

000062d8 <LCD_DisplayStringXY>:

void LCD_DisplayStringXY(uint8 Copy_u8Row,uint8 Copy_u8Column,const char* Add_pu8String)
{
    62d8:	df 93       	push	r29
    62da:	cf 93       	push	r28
    62dc:	00 d0       	rcall	.+0      	; 0x62de <LCD_DisplayStringXY+0x6>
    62de:	00 d0       	rcall	.+0      	; 0x62e0 <LCD_DisplayStringXY+0x8>
    62e0:	0f 92       	push	r0
    62e2:	cd b7       	in	r28, 0x3d	; 61
    62e4:	de b7       	in	r29, 0x3e	; 62
    62e6:	8a 83       	std	Y+2, r24	; 0x02
    62e8:	6b 83       	std	Y+3, r22	; 0x03
    62ea:	5d 83       	std	Y+5, r21	; 0x05
    62ec:	4c 83       	std	Y+4, r20	; 0x04
	Lcd_VidGoToXY(Copy_u8Row,Copy_u8Column);
    62ee:	8a 81       	ldd	r24, Y+2	; 0x02
    62f0:	6b 81       	ldd	r22, Y+3	; 0x03
    62f2:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <Lcd_VidGoToXY>
	uint8 LOC_u8Iterator=0;
    62f6:	19 82       	std	Y+1, r1	; 0x01
    62f8:	0e c0       	rjmp	.+28     	; 0x6316 <LCD_DisplayStringXY+0x3e>
	while(Add_pu8String[LOC_u8Iterator] != '\0')
	{
		Lcd_VidDisplayChracter(Add_pu8String[LOC_u8Iterator]);
    62fa:	89 81       	ldd	r24, Y+1	; 0x01
    62fc:	28 2f       	mov	r18, r24
    62fe:	30 e0       	ldi	r19, 0x00	; 0
    6300:	8c 81       	ldd	r24, Y+4	; 0x04
    6302:	9d 81       	ldd	r25, Y+5	; 0x05
    6304:	fc 01       	movw	r30, r24
    6306:	e2 0f       	add	r30, r18
    6308:	f3 1f       	adc	r31, r19
    630a:	80 81       	ld	r24, Z
    630c:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <Lcd_VidDisplayChracter>
		LOC_u8Iterator++;
    6310:	89 81       	ldd	r24, Y+1	; 0x01
    6312:	8f 5f       	subi	r24, 0xFF	; 255
    6314:	89 83       	std	Y+1, r24	; 0x01

void LCD_DisplayStringXY(uint8 Copy_u8Row,uint8 Copy_u8Column,const char* Add_pu8String)
{
	Lcd_VidGoToXY(Copy_u8Row,Copy_u8Column);
	uint8 LOC_u8Iterator=0;
	while(Add_pu8String[LOC_u8Iterator] != '\0')
    6316:	89 81       	ldd	r24, Y+1	; 0x01
    6318:	28 2f       	mov	r18, r24
    631a:	30 e0       	ldi	r19, 0x00	; 0
    631c:	8c 81       	ldd	r24, Y+4	; 0x04
    631e:	9d 81       	ldd	r25, Y+5	; 0x05
    6320:	fc 01       	movw	r30, r24
    6322:	e2 0f       	add	r30, r18
    6324:	f3 1f       	adc	r31, r19
    6326:	80 81       	ld	r24, Z
    6328:	88 23       	and	r24, r24
    632a:	39 f7       	brne	.-50     	; 0x62fa <LCD_DisplayStringXY+0x22>
	{
		Lcd_VidDisplayChracter(Add_pu8String[LOC_u8Iterator]);
		LOC_u8Iterator++;
	}
}
    632c:	0f 90       	pop	r0
    632e:	0f 90       	pop	r0
    6330:	0f 90       	pop	r0
    6332:	0f 90       	pop	r0
    6334:	0f 90       	pop	r0
    6336:	cf 91       	pop	r28
    6338:	df 91       	pop	r29
    633a:	08 95       	ret

0000633c <Lcd_VidDisplayNumberXY>:


void Lcd_VidDisplayNumberXY(uint8 Copy_u8Row,uint8 Copy_u8Column,uint64 Copy_u64Num )
{
    633c:	af 92       	push	r10
    633e:	bf 92       	push	r11
    6340:	cf 92       	push	r12
    6342:	df 92       	push	r13
    6344:	ef 92       	push	r14
    6346:	ff 92       	push	r15
    6348:	0f 93       	push	r16
    634a:	1f 93       	push	r17
    634c:	df 93       	push	r29
    634e:	cf 93       	push	r28
    6350:	cd b7       	in	r28, 0x3d	; 61
    6352:	de b7       	in	r29, 0x3e	; 62
    6354:	c8 56       	subi	r28, 0x68	; 104
    6356:	d0 40       	sbci	r29, 0x00	; 0
    6358:	0f b6       	in	r0, 0x3f	; 63
    635a:	f8 94       	cli
    635c:	de bf       	out	0x3e, r29	; 62
    635e:	0f be       	out	0x3f, r0	; 63
    6360:	cd bf       	out	0x3d, r28	; 61
    6362:	89 87       	std	Y+9, r24	; 0x09
    6364:	6a 87       	std	Y+10, r22	; 0x0a
    6366:	eb 86       	std	Y+11, r14	; 0x0b
    6368:	fc 86       	std	Y+12, r15	; 0x0c
    636a:	0d 87       	std	Y+13, r16	; 0x0d
    636c:	1e 87       	std	Y+14, r17	; 0x0e
    636e:	2f 87       	std	Y+15, r18	; 0x0f
    6370:	38 8b       	std	Y+16, r19	; 0x10
    6372:	49 8b       	std	Y+17, r20	; 0x11
    6374:	5a 8b       	std	Y+18, r21	; 0x12
	Lcd_VidGoToXY(Copy_u8Row,Copy_u8Column);
    6376:	89 85       	ldd	r24, Y+9	; 0x09
    6378:	6a 85       	ldd	r22, Y+10	; 0x0a
    637a:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <Lcd_VidGoToXY>
	uint64 LOC_u8Inverse=1;
    637e:	81 e0       	ldi	r24, 0x01	; 1
    6380:	89 83       	std	Y+1, r24	; 0x01
    6382:	1a 82       	std	Y+2, r1	; 0x02
    6384:	1b 82       	std	Y+3, r1	; 0x03
    6386:	1c 82       	std	Y+4, r1	; 0x04
    6388:	1d 82       	std	Y+5, r1	; 0x05
    638a:	1e 82       	std	Y+6, r1	; 0x06
    638c:	1f 82       	std	Y+7, r1	; 0x07
    638e:	18 86       	std	Y+8, r1	; 0x08
	if(Copy_u64Num==0)
    6390:	8b 85       	ldd	r24, Y+11	; 0x0b
    6392:	9c 85       	ldd	r25, Y+12	; 0x0c
    6394:	89 2b       	or	r24, r25
    6396:	9d 85       	ldd	r25, Y+13	; 0x0d
    6398:	89 2b       	or	r24, r25
    639a:	9e 85       	ldd	r25, Y+14	; 0x0e
    639c:	89 2b       	or	r24, r25
    639e:	9f 85       	ldd	r25, Y+15	; 0x0f
    63a0:	89 2b       	or	r24, r25
    63a2:	98 89       	ldd	r25, Y+16	; 0x10
    63a4:	89 2b       	or	r24, r25
    63a6:	99 89       	ldd	r25, Y+17	; 0x11
    63a8:	89 2b       	or	r24, r25
    63aa:	9a 89       	ldd	r25, Y+18	; 0x12
    63ac:	89 2b       	or	r24, r25
    63ae:	88 23       	and	r24, r24
    63b0:	09 f0       	breq	.+2      	; 0x63b4 <Lcd_VidDisplayNumberXY+0x78>
    63b2:	6e c3       	rjmp	.+1756   	; 0x6a90 <Lcd_VidDisplayNumberXY+0x754>
	{
		Lcd_VidDisplayChracter('0');
    63b4:	80 e3       	ldi	r24, 0x30	; 48
    63b6:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <Lcd_VidDisplayChracter>
    63ba:	6a c3       	rjmp	.+1748   	; 0x6a90 <Lcd_VidDisplayNumberXY+0x754>
	}
	while(Copy_u64Num != 0)
	{
		LOC_u8Inverse=(LOC_u8Inverse*10)+(Copy_u64Num%10);
    63bc:	29 81       	ldd	r18, Y+1	; 0x01
    63be:	3a 81       	ldd	r19, Y+2	; 0x02
    63c0:	4b 81       	ldd	r20, Y+3	; 0x03
    63c2:	5c 81       	ldd	r21, Y+4	; 0x04
    63c4:	6d 81       	ldd	r22, Y+5	; 0x05
    63c6:	7e 81       	ldd	r23, Y+6	; 0x06
    63c8:	8f 81       	ldd	r24, Y+7	; 0x07
    63ca:	98 85       	ldd	r25, Y+8	; 0x08
    63cc:	a2 2e       	mov	r10, r18
    63ce:	b3 2e       	mov	r11, r19
    63d0:	c4 2e       	mov	r12, r20
    63d2:	d5 2e       	mov	r13, r21
    63d4:	e6 2e       	mov	r14, r22
    63d6:	f7 2e       	mov	r15, r23
    63d8:	08 2f       	mov	r16, r24
    63da:	19 2f       	mov	r17, r25
    63dc:	2a 2d       	mov	r18, r10
    63de:	3b 2d       	mov	r19, r11
    63e0:	4c 2d       	mov	r20, r12
    63e2:	5d 2d       	mov	r21, r13
    63e4:	6e 2d       	mov	r22, r14
    63e6:	7f 2d       	mov	r23, r15
    63e8:	80 2f       	mov	r24, r16
    63ea:	91 2f       	mov	r25, r17
    63ec:	01 e0       	ldi	r16, 0x01	; 1
    63ee:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    63f2:	2b a3       	std	Y+35, r18	; 0x23
    63f4:	3c a3       	std	Y+36, r19	; 0x24
    63f6:	4d a3       	std	Y+37, r20	; 0x25
    63f8:	5e a3       	std	Y+38, r21	; 0x26
    63fa:	6f a3       	std	Y+39, r22	; 0x27
    63fc:	78 a7       	std	Y+40, r23	; 0x28
    63fe:	89 a7       	std	Y+41, r24	; 0x29
    6400:	9a a7       	std	Y+42, r25	; 0x2a
    6402:	2b a1       	ldd	r18, Y+35	; 0x23
    6404:	3c a1       	ldd	r19, Y+36	; 0x24
    6406:	4d a1       	ldd	r20, Y+37	; 0x25
    6408:	5e a1       	ldd	r21, Y+38	; 0x26
    640a:	6f a1       	ldd	r22, Y+39	; 0x27
    640c:	78 a5       	ldd	r23, Y+40	; 0x28
    640e:	89 a5       	ldd	r24, Y+41	; 0x29
    6410:	9a a5       	ldd	r25, Y+42	; 0x2a
    6412:	02 e0       	ldi	r16, 0x02	; 2
    6414:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    6418:	2b a7       	std	Y+43, r18	; 0x2b
    641a:	3c a7       	std	Y+44, r19	; 0x2c
    641c:	4d a7       	std	Y+45, r20	; 0x2d
    641e:	5e a7       	std	Y+46, r21	; 0x2e
    6420:	6f a7       	std	Y+47, r22	; 0x2f
    6422:	78 ab       	std	Y+48, r23	; 0x30
    6424:	89 ab       	std	Y+49, r24	; 0x31
    6426:	9a ab       	std	Y+50, r25	; 0x32
    6428:	8b a1       	ldd	r24, Y+35	; 0x23
    642a:	9b a5       	ldd	r25, Y+43	; 0x2b
    642c:	89 0f       	add	r24, r25
    642e:	8b ab       	std	Y+51, r24	; 0x33
    6430:	81 e0       	ldi	r24, 0x01	; 1
    6432:	8b af       	std	Y+59, r24	; 0x3b
    6434:	9b a9       	ldd	r25, Y+51	; 0x33
    6436:	8b a1       	ldd	r24, Y+35	; 0x23
    6438:	98 17       	cp	r25, r24
    643a:	08 f0       	brcs	.+2      	; 0x643e <Lcd_VidDisplayNumberXY+0x102>
    643c:	1b ae       	std	Y+59, r1	; 0x3b
    643e:	9c a1       	ldd	r25, Y+36	; 0x24
    6440:	8c a5       	ldd	r24, Y+44	; 0x2c
    6442:	98 0f       	add	r25, r24
    6444:	9c ab       	std	Y+52, r25	; 0x34
    6446:	91 e0       	ldi	r25, 0x01	; 1
    6448:	9c af       	std	Y+60, r25	; 0x3c
    644a:	8c a9       	ldd	r24, Y+52	; 0x34
    644c:	9c a1       	ldd	r25, Y+36	; 0x24
    644e:	89 17       	cp	r24, r25
    6450:	08 f0       	brcs	.+2      	; 0x6454 <Lcd_VidDisplayNumberXY+0x118>
    6452:	1c ae       	std	Y+60, r1	; 0x3c
    6454:	8b ad       	ldd	r24, Y+59	; 0x3b
    6456:	9c a9       	ldd	r25, Y+52	; 0x34
    6458:	89 0f       	add	r24, r25
    645a:	8d af       	std	Y+61, r24	; 0x3d
    645c:	81 e0       	ldi	r24, 0x01	; 1
    645e:	8e af       	std	Y+62, r24	; 0x3e
    6460:	9d ad       	ldd	r25, Y+61	; 0x3d
    6462:	8c a9       	ldd	r24, Y+52	; 0x34
    6464:	98 17       	cp	r25, r24
    6466:	08 f0       	brcs	.+2      	; 0x646a <Lcd_VidDisplayNumberXY+0x12e>
    6468:	1e ae       	std	Y+62, r1	; 0x3e
    646a:	9c ad       	ldd	r25, Y+60	; 0x3c
    646c:	8e ad       	ldd	r24, Y+62	; 0x3e
    646e:	98 2b       	or	r25, r24
    6470:	9c af       	std	Y+60, r25	; 0x3c
    6472:	9d ad       	ldd	r25, Y+61	; 0x3d
    6474:	9c ab       	std	Y+52, r25	; 0x34
    6476:	8d a1       	ldd	r24, Y+37	; 0x25
    6478:	9d a5       	ldd	r25, Y+45	; 0x2d
    647a:	89 0f       	add	r24, r25
    647c:	8d ab       	std	Y+53, r24	; 0x35
    647e:	81 e0       	ldi	r24, 0x01	; 1
    6480:	8f af       	std	Y+63, r24	; 0x3f
    6482:	9d a9       	ldd	r25, Y+53	; 0x35
    6484:	8d a1       	ldd	r24, Y+37	; 0x25
    6486:	98 17       	cp	r25, r24
    6488:	08 f0       	brcs	.+2      	; 0x648c <Lcd_VidDisplayNumberXY+0x150>
    648a:	1f ae       	std	Y+63, r1	; 0x3f
    648c:	9c ad       	ldd	r25, Y+60	; 0x3c
    648e:	8d a9       	ldd	r24, Y+53	; 0x35
    6490:	98 0f       	add	r25, r24
    6492:	21 96       	adiw	r28, 0x01	; 1
    6494:	9f af       	std	Y+63, r25	; 0x3f
    6496:	21 97       	sbiw	r28, 0x01	; 1
    6498:	91 e0       	ldi	r25, 0x01	; 1
    649a:	22 96       	adiw	r28, 0x02	; 2
    649c:	9f af       	std	Y+63, r25	; 0x3f
    649e:	22 97       	sbiw	r28, 0x02	; 2
    64a0:	21 96       	adiw	r28, 0x01	; 1
    64a2:	8f ad       	ldd	r24, Y+63	; 0x3f
    64a4:	21 97       	sbiw	r28, 0x01	; 1
    64a6:	9d a9       	ldd	r25, Y+53	; 0x35
    64a8:	89 17       	cp	r24, r25
    64aa:	18 f0       	brcs	.+6      	; 0x64b2 <Lcd_VidDisplayNumberXY+0x176>
    64ac:	22 96       	adiw	r28, 0x02	; 2
    64ae:	1f ae       	std	Y+63, r1	; 0x3f
    64b0:	22 97       	sbiw	r28, 0x02	; 2
    64b2:	8f ad       	ldd	r24, Y+63	; 0x3f
    64b4:	22 96       	adiw	r28, 0x02	; 2
    64b6:	9f ad       	ldd	r25, Y+63	; 0x3f
    64b8:	22 97       	sbiw	r28, 0x02	; 2
    64ba:	89 2b       	or	r24, r25
    64bc:	8f af       	std	Y+63, r24	; 0x3f
    64be:	21 96       	adiw	r28, 0x01	; 1
    64c0:	8f ad       	ldd	r24, Y+63	; 0x3f
    64c2:	21 97       	sbiw	r28, 0x01	; 1
    64c4:	8d ab       	std	Y+53, r24	; 0x35
    64c6:	9e a1       	ldd	r25, Y+38	; 0x26
    64c8:	8e a5       	ldd	r24, Y+46	; 0x2e
    64ca:	98 0f       	add	r25, r24
    64cc:	9e ab       	std	Y+54, r25	; 0x36
    64ce:	91 e0       	ldi	r25, 0x01	; 1
    64d0:	23 96       	adiw	r28, 0x03	; 3
    64d2:	9f af       	std	Y+63, r25	; 0x3f
    64d4:	23 97       	sbiw	r28, 0x03	; 3
    64d6:	8e a9       	ldd	r24, Y+54	; 0x36
    64d8:	9e a1       	ldd	r25, Y+38	; 0x26
    64da:	89 17       	cp	r24, r25
    64dc:	18 f0       	brcs	.+6      	; 0x64e4 <Lcd_VidDisplayNumberXY+0x1a8>
    64de:	23 96       	adiw	r28, 0x03	; 3
    64e0:	1f ae       	std	Y+63, r1	; 0x3f
    64e2:	23 97       	sbiw	r28, 0x03	; 3
    64e4:	8f ad       	ldd	r24, Y+63	; 0x3f
    64e6:	9e a9       	ldd	r25, Y+54	; 0x36
    64e8:	89 0f       	add	r24, r25
    64ea:	24 96       	adiw	r28, 0x04	; 4
    64ec:	8f af       	std	Y+63, r24	; 0x3f
    64ee:	24 97       	sbiw	r28, 0x04	; 4
    64f0:	81 e0       	ldi	r24, 0x01	; 1
    64f2:	25 96       	adiw	r28, 0x05	; 5
    64f4:	8f af       	std	Y+63, r24	; 0x3f
    64f6:	25 97       	sbiw	r28, 0x05	; 5
    64f8:	24 96       	adiw	r28, 0x04	; 4
    64fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    64fc:	24 97       	sbiw	r28, 0x04	; 4
    64fe:	8e a9       	ldd	r24, Y+54	; 0x36
    6500:	98 17       	cp	r25, r24
    6502:	18 f0       	brcs	.+6      	; 0x650a <Lcd_VidDisplayNumberXY+0x1ce>
    6504:	25 96       	adiw	r28, 0x05	; 5
    6506:	1f ae       	std	Y+63, r1	; 0x3f
    6508:	25 97       	sbiw	r28, 0x05	; 5
    650a:	23 96       	adiw	r28, 0x03	; 3
    650c:	9f ad       	ldd	r25, Y+63	; 0x3f
    650e:	23 97       	sbiw	r28, 0x03	; 3
    6510:	25 96       	adiw	r28, 0x05	; 5
    6512:	8f ad       	ldd	r24, Y+63	; 0x3f
    6514:	25 97       	sbiw	r28, 0x05	; 5
    6516:	98 2b       	or	r25, r24
    6518:	23 96       	adiw	r28, 0x03	; 3
    651a:	9f af       	std	Y+63, r25	; 0x3f
    651c:	23 97       	sbiw	r28, 0x03	; 3
    651e:	24 96       	adiw	r28, 0x04	; 4
    6520:	9f ad       	ldd	r25, Y+63	; 0x3f
    6522:	24 97       	sbiw	r28, 0x04	; 4
    6524:	9e ab       	std	Y+54, r25	; 0x36
    6526:	8f a1       	ldd	r24, Y+39	; 0x27
    6528:	9f a5       	ldd	r25, Y+47	; 0x2f
    652a:	89 0f       	add	r24, r25
    652c:	8f ab       	std	Y+55, r24	; 0x37
    652e:	81 e0       	ldi	r24, 0x01	; 1
    6530:	26 96       	adiw	r28, 0x06	; 6
    6532:	8f af       	std	Y+63, r24	; 0x3f
    6534:	26 97       	sbiw	r28, 0x06	; 6
    6536:	9f a9       	ldd	r25, Y+55	; 0x37
    6538:	8f a1       	ldd	r24, Y+39	; 0x27
    653a:	98 17       	cp	r25, r24
    653c:	18 f0       	brcs	.+6      	; 0x6544 <Lcd_VidDisplayNumberXY+0x208>
    653e:	26 96       	adiw	r28, 0x06	; 6
    6540:	1f ae       	std	Y+63, r1	; 0x3f
    6542:	26 97       	sbiw	r28, 0x06	; 6
    6544:	23 96       	adiw	r28, 0x03	; 3
    6546:	9f ad       	ldd	r25, Y+63	; 0x3f
    6548:	23 97       	sbiw	r28, 0x03	; 3
    654a:	8f a9       	ldd	r24, Y+55	; 0x37
    654c:	98 0f       	add	r25, r24
    654e:	27 96       	adiw	r28, 0x07	; 7
    6550:	9f af       	std	Y+63, r25	; 0x3f
    6552:	27 97       	sbiw	r28, 0x07	; 7
    6554:	91 e0       	ldi	r25, 0x01	; 1
    6556:	28 96       	adiw	r28, 0x08	; 8
    6558:	9f af       	std	Y+63, r25	; 0x3f
    655a:	28 97       	sbiw	r28, 0x08	; 8
    655c:	27 96       	adiw	r28, 0x07	; 7
    655e:	8f ad       	ldd	r24, Y+63	; 0x3f
    6560:	27 97       	sbiw	r28, 0x07	; 7
    6562:	9f a9       	ldd	r25, Y+55	; 0x37
    6564:	89 17       	cp	r24, r25
    6566:	18 f0       	brcs	.+6      	; 0x656e <Lcd_VidDisplayNumberXY+0x232>
    6568:	28 96       	adiw	r28, 0x08	; 8
    656a:	1f ae       	std	Y+63, r1	; 0x3f
    656c:	28 97       	sbiw	r28, 0x08	; 8
    656e:	26 96       	adiw	r28, 0x06	; 6
    6570:	8f ad       	ldd	r24, Y+63	; 0x3f
    6572:	26 97       	sbiw	r28, 0x06	; 6
    6574:	28 96       	adiw	r28, 0x08	; 8
    6576:	9f ad       	ldd	r25, Y+63	; 0x3f
    6578:	28 97       	sbiw	r28, 0x08	; 8
    657a:	89 2b       	or	r24, r25
    657c:	26 96       	adiw	r28, 0x06	; 6
    657e:	8f af       	std	Y+63, r24	; 0x3f
    6580:	26 97       	sbiw	r28, 0x06	; 6
    6582:	27 96       	adiw	r28, 0x07	; 7
    6584:	8f ad       	ldd	r24, Y+63	; 0x3f
    6586:	27 97       	sbiw	r28, 0x07	; 7
    6588:	8f ab       	std	Y+55, r24	; 0x37
    658a:	98 a5       	ldd	r25, Y+40	; 0x28
    658c:	88 a9       	ldd	r24, Y+48	; 0x30
    658e:	98 0f       	add	r25, r24
    6590:	98 af       	std	Y+56, r25	; 0x38
    6592:	91 e0       	ldi	r25, 0x01	; 1
    6594:	29 96       	adiw	r28, 0x09	; 9
    6596:	9f af       	std	Y+63, r25	; 0x3f
    6598:	29 97       	sbiw	r28, 0x09	; 9
    659a:	88 ad       	ldd	r24, Y+56	; 0x38
    659c:	98 a5       	ldd	r25, Y+40	; 0x28
    659e:	89 17       	cp	r24, r25
    65a0:	18 f0       	brcs	.+6      	; 0x65a8 <Lcd_VidDisplayNumberXY+0x26c>
    65a2:	29 96       	adiw	r28, 0x09	; 9
    65a4:	1f ae       	std	Y+63, r1	; 0x3f
    65a6:	29 97       	sbiw	r28, 0x09	; 9
    65a8:	26 96       	adiw	r28, 0x06	; 6
    65aa:	8f ad       	ldd	r24, Y+63	; 0x3f
    65ac:	26 97       	sbiw	r28, 0x06	; 6
    65ae:	98 ad       	ldd	r25, Y+56	; 0x38
    65b0:	89 0f       	add	r24, r25
    65b2:	2a 96       	adiw	r28, 0x0a	; 10
    65b4:	8f af       	std	Y+63, r24	; 0x3f
    65b6:	2a 97       	sbiw	r28, 0x0a	; 10
    65b8:	81 e0       	ldi	r24, 0x01	; 1
    65ba:	2b 96       	adiw	r28, 0x0b	; 11
    65bc:	8f af       	std	Y+63, r24	; 0x3f
    65be:	2b 97       	sbiw	r28, 0x0b	; 11
    65c0:	2a 96       	adiw	r28, 0x0a	; 10
    65c2:	9f ad       	ldd	r25, Y+63	; 0x3f
    65c4:	2a 97       	sbiw	r28, 0x0a	; 10
    65c6:	88 ad       	ldd	r24, Y+56	; 0x38
    65c8:	98 17       	cp	r25, r24
    65ca:	18 f0       	brcs	.+6      	; 0x65d2 <Lcd_VidDisplayNumberXY+0x296>
    65cc:	2b 96       	adiw	r28, 0x0b	; 11
    65ce:	1f ae       	std	Y+63, r1	; 0x3f
    65d0:	2b 97       	sbiw	r28, 0x0b	; 11
    65d2:	29 96       	adiw	r28, 0x09	; 9
    65d4:	9f ad       	ldd	r25, Y+63	; 0x3f
    65d6:	29 97       	sbiw	r28, 0x09	; 9
    65d8:	2b 96       	adiw	r28, 0x0b	; 11
    65da:	8f ad       	ldd	r24, Y+63	; 0x3f
    65dc:	2b 97       	sbiw	r28, 0x0b	; 11
    65de:	98 2b       	or	r25, r24
    65e0:	29 96       	adiw	r28, 0x09	; 9
    65e2:	9f af       	std	Y+63, r25	; 0x3f
    65e4:	29 97       	sbiw	r28, 0x09	; 9
    65e6:	2a 96       	adiw	r28, 0x0a	; 10
    65e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    65ea:	2a 97       	sbiw	r28, 0x0a	; 10
    65ec:	98 af       	std	Y+56, r25	; 0x38
    65ee:	89 a5       	ldd	r24, Y+41	; 0x29
    65f0:	99 a9       	ldd	r25, Y+49	; 0x31
    65f2:	89 0f       	add	r24, r25
    65f4:	89 af       	std	Y+57, r24	; 0x39
    65f6:	81 e0       	ldi	r24, 0x01	; 1
    65f8:	2c 96       	adiw	r28, 0x0c	; 12
    65fa:	8f af       	std	Y+63, r24	; 0x3f
    65fc:	2c 97       	sbiw	r28, 0x0c	; 12
    65fe:	99 ad       	ldd	r25, Y+57	; 0x39
    6600:	89 a5       	ldd	r24, Y+41	; 0x29
    6602:	98 17       	cp	r25, r24
    6604:	18 f0       	brcs	.+6      	; 0x660c <Lcd_VidDisplayNumberXY+0x2d0>
    6606:	2c 96       	adiw	r28, 0x0c	; 12
    6608:	1f ae       	std	Y+63, r1	; 0x3f
    660a:	2c 97       	sbiw	r28, 0x0c	; 12
    660c:	29 96       	adiw	r28, 0x09	; 9
    660e:	9f ad       	ldd	r25, Y+63	; 0x3f
    6610:	29 97       	sbiw	r28, 0x09	; 9
    6612:	89 ad       	ldd	r24, Y+57	; 0x39
    6614:	98 0f       	add	r25, r24
    6616:	2d 96       	adiw	r28, 0x0d	; 13
    6618:	9f af       	std	Y+63, r25	; 0x3f
    661a:	2d 97       	sbiw	r28, 0x0d	; 13
    661c:	91 e0       	ldi	r25, 0x01	; 1
    661e:	2e 96       	adiw	r28, 0x0e	; 14
    6620:	9f af       	std	Y+63, r25	; 0x3f
    6622:	2e 97       	sbiw	r28, 0x0e	; 14
    6624:	2d 96       	adiw	r28, 0x0d	; 13
    6626:	8f ad       	ldd	r24, Y+63	; 0x3f
    6628:	2d 97       	sbiw	r28, 0x0d	; 13
    662a:	99 ad       	ldd	r25, Y+57	; 0x39
    662c:	89 17       	cp	r24, r25
    662e:	18 f0       	brcs	.+6      	; 0x6636 <Lcd_VidDisplayNumberXY+0x2fa>
    6630:	2e 96       	adiw	r28, 0x0e	; 14
    6632:	1f ae       	std	Y+63, r1	; 0x3f
    6634:	2e 97       	sbiw	r28, 0x0e	; 14
    6636:	2c 96       	adiw	r28, 0x0c	; 12
    6638:	8f ad       	ldd	r24, Y+63	; 0x3f
    663a:	2c 97       	sbiw	r28, 0x0c	; 12
    663c:	2e 96       	adiw	r28, 0x0e	; 14
    663e:	9f ad       	ldd	r25, Y+63	; 0x3f
    6640:	2e 97       	sbiw	r28, 0x0e	; 14
    6642:	89 2b       	or	r24, r25
    6644:	2c 96       	adiw	r28, 0x0c	; 12
    6646:	8f af       	std	Y+63, r24	; 0x3f
    6648:	2c 97       	sbiw	r28, 0x0c	; 12
    664a:	2d 96       	adiw	r28, 0x0d	; 13
    664c:	8f ad       	ldd	r24, Y+63	; 0x3f
    664e:	2d 97       	sbiw	r28, 0x0d	; 13
    6650:	89 af       	std	Y+57, r24	; 0x39
    6652:	9a a5       	ldd	r25, Y+42	; 0x2a
    6654:	8a a9       	ldd	r24, Y+50	; 0x32
    6656:	98 0f       	add	r25, r24
    6658:	9a af       	std	Y+58, r25	; 0x3a
    665a:	2c 96       	adiw	r28, 0x0c	; 12
    665c:	8f ad       	ldd	r24, Y+63	; 0x3f
    665e:	2c 97       	sbiw	r28, 0x0c	; 12
    6660:	9a ad       	ldd	r25, Y+58	; 0x3a
    6662:	89 0f       	add	r24, r25
    6664:	8a af       	std	Y+58, r24	; 0x3a
    6666:	8b a9       	ldd	r24, Y+51	; 0x33
    6668:	8b 8f       	std	Y+27, r24	; 0x1b
    666a:	9c a9       	ldd	r25, Y+52	; 0x34
    666c:	9c 8f       	std	Y+28, r25	; 0x1c
    666e:	8d a9       	ldd	r24, Y+53	; 0x35
    6670:	8d 8f       	std	Y+29, r24	; 0x1d
    6672:	9e a9       	ldd	r25, Y+54	; 0x36
    6674:	9e 8f       	std	Y+30, r25	; 0x1e
    6676:	8f a9       	ldd	r24, Y+55	; 0x37
    6678:	8f 8f       	std	Y+31, r24	; 0x1f
    667a:	98 ad       	ldd	r25, Y+56	; 0x38
    667c:	98 a3       	std	Y+32, r25	; 0x20
    667e:	89 ad       	ldd	r24, Y+57	; 0x39
    6680:	89 a3       	std	Y+33, r24	; 0x21
    6682:	9a ad       	ldd	r25, Y+58	; 0x3a
    6684:	9a a3       	std	Y+34, r25	; 0x22
    6686:	ab 84       	ldd	r10, Y+11	; 0x0b
    6688:	bc 84       	ldd	r11, Y+12	; 0x0c
    668a:	cd 84       	ldd	r12, Y+13	; 0x0d
    668c:	de 84       	ldd	r13, Y+14	; 0x0e
    668e:	ef 84       	ldd	r14, Y+15	; 0x0f
    6690:	f8 88       	ldd	r15, Y+16	; 0x10
    6692:	09 89       	ldd	r16, Y+17	; 0x11
    6694:	1a 89       	ldd	r17, Y+18	; 0x12
    6696:	2a 2d       	mov	r18, r10
    6698:	3b 2d       	mov	r19, r11
    669a:	4c 2d       	mov	r20, r12
    669c:	5d 2d       	mov	r21, r13
    669e:	6e 2d       	mov	r22, r14
    66a0:	7f 2d       	mov	r23, r15
    66a2:	80 2f       	mov	r24, r16
    66a4:	91 2f       	mov	r25, r17
    66a6:	0f 2e       	mov	r0, r31
    66a8:	fa e0       	ldi	r31, 0x0A	; 10
    66aa:	af 2e       	mov	r10, r31
    66ac:	f0 2d       	mov	r31, r0
    66ae:	bb 24       	eor	r11, r11
    66b0:	cc 24       	eor	r12, r12
    66b2:	dd 24       	eor	r13, r13
    66b4:	ee 24       	eor	r14, r14
    66b6:	ff 24       	eor	r15, r15
    66b8:	00 e0       	ldi	r16, 0x00	; 0
    66ba:	10 e0       	ldi	r17, 0x00	; 0
    66bc:	0e 94 69 07 	call	0xed2	; 0xed2 <__umoddi3>
    66c0:	a2 2e       	mov	r10, r18
    66c2:	b3 2e       	mov	r11, r19
    66c4:	c4 2e       	mov	r12, r20
    66c6:	d5 2e       	mov	r13, r21
    66c8:	e6 2e       	mov	r14, r22
    66ca:	f7 2e       	mov	r15, r23
    66cc:	08 2f       	mov	r16, r24
    66ce:	19 2f       	mov	r17, r25
    66d0:	ab 8a       	std	Y+19, r10	; 0x13
    66d2:	bc 8a       	std	Y+20, r11	; 0x14
    66d4:	cd 8a       	std	Y+21, r12	; 0x15
    66d6:	de 8a       	std	Y+22, r13	; 0x16
    66d8:	ef 8a       	std	Y+23, r14	; 0x17
    66da:	f8 8e       	std	Y+24, r15	; 0x18
    66dc:	09 8f       	std	Y+25, r16	; 0x19
    66de:	1a 8f       	std	Y+26, r17	; 0x1a
    66e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    66e2:	9b 89       	ldd	r25, Y+19	; 0x13
    66e4:	89 0f       	add	r24, r25
    66e6:	2f 96       	adiw	r28, 0x0f	; 15
    66e8:	8f af       	std	Y+63, r24	; 0x3f
    66ea:	2f 97       	sbiw	r28, 0x0f	; 15
    66ec:	81 e0       	ldi	r24, 0x01	; 1
    66ee:	67 96       	adiw	r28, 0x17	; 23
    66f0:	8f af       	std	Y+63, r24	; 0x3f
    66f2:	67 97       	sbiw	r28, 0x17	; 23
    66f4:	2f 96       	adiw	r28, 0x0f	; 15
    66f6:	9f ad       	ldd	r25, Y+63	; 0x3f
    66f8:	2f 97       	sbiw	r28, 0x0f	; 15
    66fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    66fc:	98 17       	cp	r25, r24
    66fe:	18 f0       	brcs	.+6      	; 0x6706 <Lcd_VidDisplayNumberXY+0x3ca>
    6700:	67 96       	adiw	r28, 0x17	; 23
    6702:	1f ae       	std	Y+63, r1	; 0x3f
    6704:	67 97       	sbiw	r28, 0x17	; 23
    6706:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6708:	8c 89       	ldd	r24, Y+20	; 0x14
    670a:	98 0f       	add	r25, r24
    670c:	60 96       	adiw	r28, 0x10	; 16
    670e:	9f af       	std	Y+63, r25	; 0x3f
    6710:	60 97       	sbiw	r28, 0x10	; 16
    6712:	91 e0       	ldi	r25, 0x01	; 1
    6714:	68 96       	adiw	r28, 0x18	; 24
    6716:	9f af       	std	Y+63, r25	; 0x3f
    6718:	68 97       	sbiw	r28, 0x18	; 24
    671a:	60 96       	adiw	r28, 0x10	; 16
    671c:	8f ad       	ldd	r24, Y+63	; 0x3f
    671e:	60 97       	sbiw	r28, 0x10	; 16
    6720:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6722:	89 17       	cp	r24, r25
    6724:	18 f0       	brcs	.+6      	; 0x672c <Lcd_VidDisplayNumberXY+0x3f0>
    6726:	68 96       	adiw	r28, 0x18	; 24
    6728:	1f ae       	std	Y+63, r1	; 0x3f
    672a:	68 97       	sbiw	r28, 0x18	; 24
    672c:	67 96       	adiw	r28, 0x17	; 23
    672e:	8f ad       	ldd	r24, Y+63	; 0x3f
    6730:	67 97       	sbiw	r28, 0x17	; 23
    6732:	60 96       	adiw	r28, 0x10	; 16
    6734:	9f ad       	ldd	r25, Y+63	; 0x3f
    6736:	60 97       	sbiw	r28, 0x10	; 16
    6738:	89 0f       	add	r24, r25
    673a:	69 96       	adiw	r28, 0x19	; 25
    673c:	8f af       	std	Y+63, r24	; 0x3f
    673e:	69 97       	sbiw	r28, 0x19	; 25
    6740:	81 e0       	ldi	r24, 0x01	; 1
    6742:	6a 96       	adiw	r28, 0x1a	; 26
    6744:	8f af       	std	Y+63, r24	; 0x3f
    6746:	6a 97       	sbiw	r28, 0x1a	; 26
    6748:	69 96       	adiw	r28, 0x19	; 25
    674a:	9f ad       	ldd	r25, Y+63	; 0x3f
    674c:	69 97       	sbiw	r28, 0x19	; 25
    674e:	60 96       	adiw	r28, 0x10	; 16
    6750:	8f ad       	ldd	r24, Y+63	; 0x3f
    6752:	60 97       	sbiw	r28, 0x10	; 16
    6754:	98 17       	cp	r25, r24
    6756:	18 f0       	brcs	.+6      	; 0x675e <Lcd_VidDisplayNumberXY+0x422>
    6758:	6a 96       	adiw	r28, 0x1a	; 26
    675a:	1f ae       	std	Y+63, r1	; 0x3f
    675c:	6a 97       	sbiw	r28, 0x1a	; 26
    675e:	68 96       	adiw	r28, 0x18	; 24
    6760:	9f ad       	ldd	r25, Y+63	; 0x3f
    6762:	68 97       	sbiw	r28, 0x18	; 24
    6764:	6a 96       	adiw	r28, 0x1a	; 26
    6766:	8f ad       	ldd	r24, Y+63	; 0x3f
    6768:	6a 97       	sbiw	r28, 0x1a	; 26
    676a:	98 2b       	or	r25, r24
    676c:	68 96       	adiw	r28, 0x18	; 24
    676e:	9f af       	std	Y+63, r25	; 0x3f
    6770:	68 97       	sbiw	r28, 0x18	; 24
    6772:	69 96       	adiw	r28, 0x19	; 25
    6774:	9f ad       	ldd	r25, Y+63	; 0x3f
    6776:	69 97       	sbiw	r28, 0x19	; 25
    6778:	60 96       	adiw	r28, 0x10	; 16
    677a:	9f af       	std	Y+63, r25	; 0x3f
    677c:	60 97       	sbiw	r28, 0x10	; 16
    677e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6780:	9d 89       	ldd	r25, Y+21	; 0x15
    6782:	89 0f       	add	r24, r25
    6784:	61 96       	adiw	r28, 0x11	; 17
    6786:	8f af       	std	Y+63, r24	; 0x3f
    6788:	61 97       	sbiw	r28, 0x11	; 17
    678a:	81 e0       	ldi	r24, 0x01	; 1
    678c:	6b 96       	adiw	r28, 0x1b	; 27
    678e:	8f af       	std	Y+63, r24	; 0x3f
    6790:	6b 97       	sbiw	r28, 0x1b	; 27
    6792:	61 96       	adiw	r28, 0x11	; 17
    6794:	9f ad       	ldd	r25, Y+63	; 0x3f
    6796:	61 97       	sbiw	r28, 0x11	; 17
    6798:	8d 8d       	ldd	r24, Y+29	; 0x1d
    679a:	98 17       	cp	r25, r24
    679c:	18 f0       	brcs	.+6      	; 0x67a4 <Lcd_VidDisplayNumberXY+0x468>
    679e:	6b 96       	adiw	r28, 0x1b	; 27
    67a0:	1f ae       	std	Y+63, r1	; 0x3f
    67a2:	6b 97       	sbiw	r28, 0x1b	; 27
    67a4:	68 96       	adiw	r28, 0x18	; 24
    67a6:	9f ad       	ldd	r25, Y+63	; 0x3f
    67a8:	68 97       	sbiw	r28, 0x18	; 24
    67aa:	61 96       	adiw	r28, 0x11	; 17
    67ac:	8f ad       	ldd	r24, Y+63	; 0x3f
    67ae:	61 97       	sbiw	r28, 0x11	; 17
    67b0:	98 0f       	add	r25, r24
    67b2:	6c 96       	adiw	r28, 0x1c	; 28
    67b4:	9f af       	std	Y+63, r25	; 0x3f
    67b6:	6c 97       	sbiw	r28, 0x1c	; 28
    67b8:	91 e0       	ldi	r25, 0x01	; 1
    67ba:	6d 96       	adiw	r28, 0x1d	; 29
    67bc:	9f af       	std	Y+63, r25	; 0x3f
    67be:	6d 97       	sbiw	r28, 0x1d	; 29
    67c0:	6c 96       	adiw	r28, 0x1c	; 28
    67c2:	8f ad       	ldd	r24, Y+63	; 0x3f
    67c4:	6c 97       	sbiw	r28, 0x1c	; 28
    67c6:	61 96       	adiw	r28, 0x11	; 17
    67c8:	9f ad       	ldd	r25, Y+63	; 0x3f
    67ca:	61 97       	sbiw	r28, 0x11	; 17
    67cc:	89 17       	cp	r24, r25
    67ce:	18 f0       	brcs	.+6      	; 0x67d6 <Lcd_VidDisplayNumberXY+0x49a>
    67d0:	6d 96       	adiw	r28, 0x1d	; 29
    67d2:	1f ae       	std	Y+63, r1	; 0x3f
    67d4:	6d 97       	sbiw	r28, 0x1d	; 29
    67d6:	6b 96       	adiw	r28, 0x1b	; 27
    67d8:	8f ad       	ldd	r24, Y+63	; 0x3f
    67da:	6b 97       	sbiw	r28, 0x1b	; 27
    67dc:	6d 96       	adiw	r28, 0x1d	; 29
    67de:	9f ad       	ldd	r25, Y+63	; 0x3f
    67e0:	6d 97       	sbiw	r28, 0x1d	; 29
    67e2:	89 2b       	or	r24, r25
    67e4:	6b 96       	adiw	r28, 0x1b	; 27
    67e6:	8f af       	std	Y+63, r24	; 0x3f
    67e8:	6b 97       	sbiw	r28, 0x1b	; 27
    67ea:	6c 96       	adiw	r28, 0x1c	; 28
    67ec:	8f ad       	ldd	r24, Y+63	; 0x3f
    67ee:	6c 97       	sbiw	r28, 0x1c	; 28
    67f0:	61 96       	adiw	r28, 0x11	; 17
    67f2:	8f af       	std	Y+63, r24	; 0x3f
    67f4:	61 97       	sbiw	r28, 0x11	; 17
    67f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    67f8:	8e 89       	ldd	r24, Y+22	; 0x16
    67fa:	98 0f       	add	r25, r24
    67fc:	62 96       	adiw	r28, 0x12	; 18
    67fe:	9f af       	std	Y+63, r25	; 0x3f
    6800:	62 97       	sbiw	r28, 0x12	; 18
    6802:	91 e0       	ldi	r25, 0x01	; 1
    6804:	6e 96       	adiw	r28, 0x1e	; 30
    6806:	9f af       	std	Y+63, r25	; 0x3f
    6808:	6e 97       	sbiw	r28, 0x1e	; 30
    680a:	62 96       	adiw	r28, 0x12	; 18
    680c:	8f ad       	ldd	r24, Y+63	; 0x3f
    680e:	62 97       	sbiw	r28, 0x12	; 18
    6810:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6812:	89 17       	cp	r24, r25
    6814:	18 f0       	brcs	.+6      	; 0x681c <Lcd_VidDisplayNumberXY+0x4e0>
    6816:	6e 96       	adiw	r28, 0x1e	; 30
    6818:	1f ae       	std	Y+63, r1	; 0x3f
    681a:	6e 97       	sbiw	r28, 0x1e	; 30
    681c:	6b 96       	adiw	r28, 0x1b	; 27
    681e:	8f ad       	ldd	r24, Y+63	; 0x3f
    6820:	6b 97       	sbiw	r28, 0x1b	; 27
    6822:	62 96       	adiw	r28, 0x12	; 18
    6824:	9f ad       	ldd	r25, Y+63	; 0x3f
    6826:	62 97       	sbiw	r28, 0x12	; 18
    6828:	89 0f       	add	r24, r25
    682a:	6f 96       	adiw	r28, 0x1f	; 31
    682c:	8f af       	std	Y+63, r24	; 0x3f
    682e:	6f 97       	sbiw	r28, 0x1f	; 31
    6830:	81 e0       	ldi	r24, 0x01	; 1
    6832:	a0 96       	adiw	r28, 0x20	; 32
    6834:	8f af       	std	Y+63, r24	; 0x3f
    6836:	a0 97       	sbiw	r28, 0x20	; 32
    6838:	6f 96       	adiw	r28, 0x1f	; 31
    683a:	9f ad       	ldd	r25, Y+63	; 0x3f
    683c:	6f 97       	sbiw	r28, 0x1f	; 31
    683e:	62 96       	adiw	r28, 0x12	; 18
    6840:	8f ad       	ldd	r24, Y+63	; 0x3f
    6842:	62 97       	sbiw	r28, 0x12	; 18
    6844:	98 17       	cp	r25, r24
    6846:	18 f0       	brcs	.+6      	; 0x684e <Lcd_VidDisplayNumberXY+0x512>
    6848:	a0 96       	adiw	r28, 0x20	; 32
    684a:	1f ae       	std	Y+63, r1	; 0x3f
    684c:	a0 97       	sbiw	r28, 0x20	; 32
    684e:	6e 96       	adiw	r28, 0x1e	; 30
    6850:	9f ad       	ldd	r25, Y+63	; 0x3f
    6852:	6e 97       	sbiw	r28, 0x1e	; 30
    6854:	a0 96       	adiw	r28, 0x20	; 32
    6856:	8f ad       	ldd	r24, Y+63	; 0x3f
    6858:	a0 97       	sbiw	r28, 0x20	; 32
    685a:	98 2b       	or	r25, r24
    685c:	6e 96       	adiw	r28, 0x1e	; 30
    685e:	9f af       	std	Y+63, r25	; 0x3f
    6860:	6e 97       	sbiw	r28, 0x1e	; 30
    6862:	6f 96       	adiw	r28, 0x1f	; 31
    6864:	9f ad       	ldd	r25, Y+63	; 0x3f
    6866:	6f 97       	sbiw	r28, 0x1f	; 31
    6868:	62 96       	adiw	r28, 0x12	; 18
    686a:	9f af       	std	Y+63, r25	; 0x3f
    686c:	62 97       	sbiw	r28, 0x12	; 18
    686e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6870:	9f 89       	ldd	r25, Y+23	; 0x17
    6872:	89 0f       	add	r24, r25
    6874:	63 96       	adiw	r28, 0x13	; 19
    6876:	8f af       	std	Y+63, r24	; 0x3f
    6878:	63 97       	sbiw	r28, 0x13	; 19
    687a:	81 e0       	ldi	r24, 0x01	; 1
    687c:	a1 96       	adiw	r28, 0x21	; 33
    687e:	8f af       	std	Y+63, r24	; 0x3f
    6880:	a1 97       	sbiw	r28, 0x21	; 33
    6882:	63 96       	adiw	r28, 0x13	; 19
    6884:	9f ad       	ldd	r25, Y+63	; 0x3f
    6886:	63 97       	sbiw	r28, 0x13	; 19
    6888:	8f 8d       	ldd	r24, Y+31	; 0x1f
    688a:	98 17       	cp	r25, r24
    688c:	18 f0       	brcs	.+6      	; 0x6894 <Lcd_VidDisplayNumberXY+0x558>
    688e:	a1 96       	adiw	r28, 0x21	; 33
    6890:	1f ae       	std	Y+63, r1	; 0x3f
    6892:	a1 97       	sbiw	r28, 0x21	; 33
    6894:	6e 96       	adiw	r28, 0x1e	; 30
    6896:	9f ad       	ldd	r25, Y+63	; 0x3f
    6898:	6e 97       	sbiw	r28, 0x1e	; 30
    689a:	63 96       	adiw	r28, 0x13	; 19
    689c:	8f ad       	ldd	r24, Y+63	; 0x3f
    689e:	63 97       	sbiw	r28, 0x13	; 19
    68a0:	98 0f       	add	r25, r24
    68a2:	a2 96       	adiw	r28, 0x22	; 34
    68a4:	9f af       	std	Y+63, r25	; 0x3f
    68a6:	a2 97       	sbiw	r28, 0x22	; 34
    68a8:	91 e0       	ldi	r25, 0x01	; 1
    68aa:	a3 96       	adiw	r28, 0x23	; 35
    68ac:	9f af       	std	Y+63, r25	; 0x3f
    68ae:	a3 97       	sbiw	r28, 0x23	; 35
    68b0:	a2 96       	adiw	r28, 0x22	; 34
    68b2:	8f ad       	ldd	r24, Y+63	; 0x3f
    68b4:	a2 97       	sbiw	r28, 0x22	; 34
    68b6:	63 96       	adiw	r28, 0x13	; 19
    68b8:	9f ad       	ldd	r25, Y+63	; 0x3f
    68ba:	63 97       	sbiw	r28, 0x13	; 19
    68bc:	89 17       	cp	r24, r25
    68be:	18 f0       	brcs	.+6      	; 0x68c6 <Lcd_VidDisplayNumberXY+0x58a>
    68c0:	a3 96       	adiw	r28, 0x23	; 35
    68c2:	1f ae       	std	Y+63, r1	; 0x3f
    68c4:	a3 97       	sbiw	r28, 0x23	; 35
    68c6:	a1 96       	adiw	r28, 0x21	; 33
    68c8:	8f ad       	ldd	r24, Y+63	; 0x3f
    68ca:	a1 97       	sbiw	r28, 0x21	; 33
    68cc:	a3 96       	adiw	r28, 0x23	; 35
    68ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    68d0:	a3 97       	sbiw	r28, 0x23	; 35
    68d2:	89 2b       	or	r24, r25
    68d4:	a1 96       	adiw	r28, 0x21	; 33
    68d6:	8f af       	std	Y+63, r24	; 0x3f
    68d8:	a1 97       	sbiw	r28, 0x21	; 33
    68da:	a2 96       	adiw	r28, 0x22	; 34
    68dc:	8f ad       	ldd	r24, Y+63	; 0x3f
    68de:	a2 97       	sbiw	r28, 0x22	; 34
    68e0:	63 96       	adiw	r28, 0x13	; 19
    68e2:	8f af       	std	Y+63, r24	; 0x3f
    68e4:	63 97       	sbiw	r28, 0x13	; 19
    68e6:	98 a1       	ldd	r25, Y+32	; 0x20
    68e8:	88 8d       	ldd	r24, Y+24	; 0x18
    68ea:	98 0f       	add	r25, r24
    68ec:	64 96       	adiw	r28, 0x14	; 20
    68ee:	9f af       	std	Y+63, r25	; 0x3f
    68f0:	64 97       	sbiw	r28, 0x14	; 20
    68f2:	91 e0       	ldi	r25, 0x01	; 1
    68f4:	a4 96       	adiw	r28, 0x24	; 36
    68f6:	9f af       	std	Y+63, r25	; 0x3f
    68f8:	a4 97       	sbiw	r28, 0x24	; 36
    68fa:	64 96       	adiw	r28, 0x14	; 20
    68fc:	8f ad       	ldd	r24, Y+63	; 0x3f
    68fe:	64 97       	sbiw	r28, 0x14	; 20
    6900:	98 a1       	ldd	r25, Y+32	; 0x20
    6902:	89 17       	cp	r24, r25
    6904:	18 f0       	brcs	.+6      	; 0x690c <Lcd_VidDisplayNumberXY+0x5d0>
    6906:	a4 96       	adiw	r28, 0x24	; 36
    6908:	1f ae       	std	Y+63, r1	; 0x3f
    690a:	a4 97       	sbiw	r28, 0x24	; 36
    690c:	a1 96       	adiw	r28, 0x21	; 33
    690e:	8f ad       	ldd	r24, Y+63	; 0x3f
    6910:	a1 97       	sbiw	r28, 0x21	; 33
    6912:	64 96       	adiw	r28, 0x14	; 20
    6914:	9f ad       	ldd	r25, Y+63	; 0x3f
    6916:	64 97       	sbiw	r28, 0x14	; 20
    6918:	89 0f       	add	r24, r25
    691a:	a5 96       	adiw	r28, 0x25	; 37
    691c:	8f af       	std	Y+63, r24	; 0x3f
    691e:	a5 97       	sbiw	r28, 0x25	; 37
    6920:	81 e0       	ldi	r24, 0x01	; 1
    6922:	a6 96       	adiw	r28, 0x26	; 38
    6924:	8f af       	std	Y+63, r24	; 0x3f
    6926:	a6 97       	sbiw	r28, 0x26	; 38
    6928:	a5 96       	adiw	r28, 0x25	; 37
    692a:	9f ad       	ldd	r25, Y+63	; 0x3f
    692c:	a5 97       	sbiw	r28, 0x25	; 37
    692e:	64 96       	adiw	r28, 0x14	; 20
    6930:	8f ad       	ldd	r24, Y+63	; 0x3f
    6932:	64 97       	sbiw	r28, 0x14	; 20
    6934:	98 17       	cp	r25, r24
    6936:	18 f0       	brcs	.+6      	; 0x693e <Lcd_VidDisplayNumberXY+0x602>
    6938:	a6 96       	adiw	r28, 0x26	; 38
    693a:	1f ae       	std	Y+63, r1	; 0x3f
    693c:	a6 97       	sbiw	r28, 0x26	; 38
    693e:	a4 96       	adiw	r28, 0x24	; 36
    6940:	9f ad       	ldd	r25, Y+63	; 0x3f
    6942:	a4 97       	sbiw	r28, 0x24	; 36
    6944:	a6 96       	adiw	r28, 0x26	; 38
    6946:	8f ad       	ldd	r24, Y+63	; 0x3f
    6948:	a6 97       	sbiw	r28, 0x26	; 38
    694a:	98 2b       	or	r25, r24
    694c:	a4 96       	adiw	r28, 0x24	; 36
    694e:	9f af       	std	Y+63, r25	; 0x3f
    6950:	a4 97       	sbiw	r28, 0x24	; 36
    6952:	a5 96       	adiw	r28, 0x25	; 37
    6954:	9f ad       	ldd	r25, Y+63	; 0x3f
    6956:	a5 97       	sbiw	r28, 0x25	; 37
    6958:	64 96       	adiw	r28, 0x14	; 20
    695a:	9f af       	std	Y+63, r25	; 0x3f
    695c:	64 97       	sbiw	r28, 0x14	; 20
    695e:	89 a1       	ldd	r24, Y+33	; 0x21
    6960:	99 8d       	ldd	r25, Y+25	; 0x19
    6962:	89 0f       	add	r24, r25
    6964:	65 96       	adiw	r28, 0x15	; 21
    6966:	8f af       	std	Y+63, r24	; 0x3f
    6968:	65 97       	sbiw	r28, 0x15	; 21
    696a:	81 e0       	ldi	r24, 0x01	; 1
    696c:	a7 96       	adiw	r28, 0x27	; 39
    696e:	8f af       	std	Y+63, r24	; 0x3f
    6970:	a7 97       	sbiw	r28, 0x27	; 39
    6972:	65 96       	adiw	r28, 0x15	; 21
    6974:	9f ad       	ldd	r25, Y+63	; 0x3f
    6976:	65 97       	sbiw	r28, 0x15	; 21
    6978:	89 a1       	ldd	r24, Y+33	; 0x21
    697a:	98 17       	cp	r25, r24
    697c:	18 f0       	brcs	.+6      	; 0x6984 <Lcd_VidDisplayNumberXY+0x648>
    697e:	a7 96       	adiw	r28, 0x27	; 39
    6980:	1f ae       	std	Y+63, r1	; 0x3f
    6982:	a7 97       	sbiw	r28, 0x27	; 39
    6984:	a4 96       	adiw	r28, 0x24	; 36
    6986:	9f ad       	ldd	r25, Y+63	; 0x3f
    6988:	a4 97       	sbiw	r28, 0x24	; 36
    698a:	65 96       	adiw	r28, 0x15	; 21
    698c:	8f ad       	ldd	r24, Y+63	; 0x3f
    698e:	65 97       	sbiw	r28, 0x15	; 21
    6990:	98 0f       	add	r25, r24
    6992:	a8 96       	adiw	r28, 0x28	; 40
    6994:	9f af       	std	Y+63, r25	; 0x3f
    6996:	a8 97       	sbiw	r28, 0x28	; 40
    6998:	91 e0       	ldi	r25, 0x01	; 1
    699a:	a9 96       	adiw	r28, 0x29	; 41
    699c:	9f af       	std	Y+63, r25	; 0x3f
    699e:	a9 97       	sbiw	r28, 0x29	; 41
    69a0:	a8 96       	adiw	r28, 0x28	; 40
    69a2:	8f ad       	ldd	r24, Y+63	; 0x3f
    69a4:	a8 97       	sbiw	r28, 0x28	; 40
    69a6:	65 96       	adiw	r28, 0x15	; 21
    69a8:	9f ad       	ldd	r25, Y+63	; 0x3f
    69aa:	65 97       	sbiw	r28, 0x15	; 21
    69ac:	89 17       	cp	r24, r25
    69ae:	18 f0       	brcs	.+6      	; 0x69b6 <Lcd_VidDisplayNumberXY+0x67a>
    69b0:	a9 96       	adiw	r28, 0x29	; 41
    69b2:	1f ae       	std	Y+63, r1	; 0x3f
    69b4:	a9 97       	sbiw	r28, 0x29	; 41
    69b6:	a7 96       	adiw	r28, 0x27	; 39
    69b8:	8f ad       	ldd	r24, Y+63	; 0x3f
    69ba:	a7 97       	sbiw	r28, 0x27	; 39
    69bc:	a9 96       	adiw	r28, 0x29	; 41
    69be:	9f ad       	ldd	r25, Y+63	; 0x3f
    69c0:	a9 97       	sbiw	r28, 0x29	; 41
    69c2:	89 2b       	or	r24, r25
    69c4:	a7 96       	adiw	r28, 0x27	; 39
    69c6:	8f af       	std	Y+63, r24	; 0x3f
    69c8:	a7 97       	sbiw	r28, 0x27	; 39
    69ca:	a8 96       	adiw	r28, 0x28	; 40
    69cc:	8f ad       	ldd	r24, Y+63	; 0x3f
    69ce:	a8 97       	sbiw	r28, 0x28	; 40
    69d0:	65 96       	adiw	r28, 0x15	; 21
    69d2:	8f af       	std	Y+63, r24	; 0x3f
    69d4:	65 97       	sbiw	r28, 0x15	; 21
    69d6:	9a a1       	ldd	r25, Y+34	; 0x22
    69d8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    69da:	98 0f       	add	r25, r24
    69dc:	66 96       	adiw	r28, 0x16	; 22
    69de:	9f af       	std	Y+63, r25	; 0x3f
    69e0:	66 97       	sbiw	r28, 0x16	; 22
    69e2:	a7 96       	adiw	r28, 0x27	; 39
    69e4:	8f ad       	ldd	r24, Y+63	; 0x3f
    69e6:	a7 97       	sbiw	r28, 0x27	; 39
    69e8:	66 96       	adiw	r28, 0x16	; 22
    69ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    69ec:	66 97       	sbiw	r28, 0x16	; 22
    69ee:	89 0f       	add	r24, r25
    69f0:	66 96       	adiw	r28, 0x16	; 22
    69f2:	8f af       	std	Y+63, r24	; 0x3f
    69f4:	66 97       	sbiw	r28, 0x16	; 22
    69f6:	2f 96       	adiw	r28, 0x0f	; 15
    69f8:	8f ad       	ldd	r24, Y+63	; 0x3f
    69fa:	2f 97       	sbiw	r28, 0x0f	; 15
    69fc:	89 83       	std	Y+1, r24	; 0x01
    69fe:	60 96       	adiw	r28, 0x10	; 16
    6a00:	9f ad       	ldd	r25, Y+63	; 0x3f
    6a02:	60 97       	sbiw	r28, 0x10	; 16
    6a04:	9a 83       	std	Y+2, r25	; 0x02
    6a06:	61 96       	adiw	r28, 0x11	; 17
    6a08:	8f ad       	ldd	r24, Y+63	; 0x3f
    6a0a:	61 97       	sbiw	r28, 0x11	; 17
    6a0c:	8b 83       	std	Y+3, r24	; 0x03
    6a0e:	62 96       	adiw	r28, 0x12	; 18
    6a10:	9f ad       	ldd	r25, Y+63	; 0x3f
    6a12:	62 97       	sbiw	r28, 0x12	; 18
    6a14:	9c 83       	std	Y+4, r25	; 0x04
    6a16:	63 96       	adiw	r28, 0x13	; 19
    6a18:	8f ad       	ldd	r24, Y+63	; 0x3f
    6a1a:	63 97       	sbiw	r28, 0x13	; 19
    6a1c:	8d 83       	std	Y+5, r24	; 0x05
    6a1e:	64 96       	adiw	r28, 0x14	; 20
    6a20:	9f ad       	ldd	r25, Y+63	; 0x3f
    6a22:	64 97       	sbiw	r28, 0x14	; 20
    6a24:	9e 83       	std	Y+6, r25	; 0x06
    6a26:	65 96       	adiw	r28, 0x15	; 21
    6a28:	8f ad       	ldd	r24, Y+63	; 0x3f
    6a2a:	65 97       	sbiw	r28, 0x15	; 21
    6a2c:	8f 83       	std	Y+7, r24	; 0x07
    6a2e:	66 96       	adiw	r28, 0x16	; 22
    6a30:	9f ad       	ldd	r25, Y+63	; 0x3f
    6a32:	66 97       	sbiw	r28, 0x16	; 22
    6a34:	98 87       	std	Y+8, r25	; 0x08
		Copy_u64Num /=10;
    6a36:	ab 84       	ldd	r10, Y+11	; 0x0b
    6a38:	bc 84       	ldd	r11, Y+12	; 0x0c
    6a3a:	cd 84       	ldd	r12, Y+13	; 0x0d
    6a3c:	de 84       	ldd	r13, Y+14	; 0x0e
    6a3e:	ef 84       	ldd	r14, Y+15	; 0x0f
    6a40:	f8 88       	ldd	r15, Y+16	; 0x10
    6a42:	09 89       	ldd	r16, Y+17	; 0x11
    6a44:	1a 89       	ldd	r17, Y+18	; 0x12
    6a46:	2a 2d       	mov	r18, r10
    6a48:	3b 2d       	mov	r19, r11
    6a4a:	4c 2d       	mov	r20, r12
    6a4c:	5d 2d       	mov	r21, r13
    6a4e:	6e 2d       	mov	r22, r14
    6a50:	7f 2d       	mov	r23, r15
    6a52:	80 2f       	mov	r24, r16
    6a54:	91 2f       	mov	r25, r17
    6a56:	0f 2e       	mov	r0, r31
    6a58:	fa e0       	ldi	r31, 0x0A	; 10
    6a5a:	af 2e       	mov	r10, r31
    6a5c:	f0 2d       	mov	r31, r0
    6a5e:	bb 24       	eor	r11, r11
    6a60:	cc 24       	eor	r12, r12
    6a62:	dd 24       	eor	r13, r13
    6a64:	ee 24       	eor	r14, r14
    6a66:	ff 24       	eor	r15, r15
    6a68:	00 e0       	ldi	r16, 0x00	; 0
    6a6a:	10 e0       	ldi	r17, 0x00	; 0
    6a6c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__udivdi3>
    6a70:	a2 2e       	mov	r10, r18
    6a72:	b3 2e       	mov	r11, r19
    6a74:	c4 2e       	mov	r12, r20
    6a76:	d5 2e       	mov	r13, r21
    6a78:	e6 2e       	mov	r14, r22
    6a7a:	f7 2e       	mov	r15, r23
    6a7c:	08 2f       	mov	r16, r24
    6a7e:	19 2f       	mov	r17, r25
    6a80:	ab 86       	std	Y+11, r10	; 0x0b
    6a82:	bc 86       	std	Y+12, r11	; 0x0c
    6a84:	cd 86       	std	Y+13, r12	; 0x0d
    6a86:	de 86       	std	Y+14, r13	; 0x0e
    6a88:	ef 86       	std	Y+15, r14	; 0x0f
    6a8a:	f8 8a       	std	Y+16, r15	; 0x10
    6a8c:	09 8b       	std	Y+17, r16	; 0x11
    6a8e:	1a 8b       	std	Y+18, r17	; 0x12
	uint64 LOC_u8Inverse=1;
	if(Copy_u64Num==0)
	{
		Lcd_VidDisplayChracter('0');
	}
	while(Copy_u64Num != 0)
    6a90:	8b 85       	ldd	r24, Y+11	; 0x0b
    6a92:	9c 85       	ldd	r25, Y+12	; 0x0c
    6a94:	89 2b       	or	r24, r25
    6a96:	9d 85       	ldd	r25, Y+13	; 0x0d
    6a98:	89 2b       	or	r24, r25
    6a9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    6a9c:	89 2b       	or	r24, r25
    6a9e:	9f 85       	ldd	r25, Y+15	; 0x0f
    6aa0:	89 2b       	or	r24, r25
    6aa2:	98 89       	ldd	r25, Y+16	; 0x10
    6aa4:	89 2b       	or	r24, r25
    6aa6:	99 89       	ldd	r25, Y+17	; 0x11
    6aa8:	89 2b       	or	r24, r25
    6aaa:	9a 89       	ldd	r25, Y+18	; 0x12
    6aac:	89 2b       	or	r24, r25
    6aae:	88 23       	and	r24, r24
    6ab0:	09 f0       	breq	.+2      	; 0x6ab4 <Lcd_VidDisplayNumberXY+0x778>
    6ab2:	84 cc       	rjmp	.-1784   	; 0x63bc <Lcd_VidDisplayNumberXY+0x80>
    6ab4:	5e c0       	rjmp	.+188    	; 0x6b72 <Lcd_VidDisplayNumberXY+0x836>
		LOC_u8Inverse=(LOC_u8Inverse*10)+(Copy_u64Num%10);
		Copy_u64Num /=10;
	}
	while(LOC_u8Inverse != 1)
	{
		Lcd_VidDisplayChracter(((LOC_u8Inverse%10)+'0'));
    6ab6:	a9 80       	ldd	r10, Y+1	; 0x01
    6ab8:	ba 80       	ldd	r11, Y+2	; 0x02
    6aba:	cb 80       	ldd	r12, Y+3	; 0x03
    6abc:	dc 80       	ldd	r13, Y+4	; 0x04
    6abe:	ed 80       	ldd	r14, Y+5	; 0x05
    6ac0:	fe 80       	ldd	r15, Y+6	; 0x06
    6ac2:	0f 81       	ldd	r16, Y+7	; 0x07
    6ac4:	18 85       	ldd	r17, Y+8	; 0x08
    6ac6:	2a 2d       	mov	r18, r10
    6ac8:	3b 2d       	mov	r19, r11
    6aca:	4c 2d       	mov	r20, r12
    6acc:	5d 2d       	mov	r21, r13
    6ace:	6e 2d       	mov	r22, r14
    6ad0:	7f 2d       	mov	r23, r15
    6ad2:	80 2f       	mov	r24, r16
    6ad4:	91 2f       	mov	r25, r17
    6ad6:	0f 2e       	mov	r0, r31
    6ad8:	fa e0       	ldi	r31, 0x0A	; 10
    6ada:	af 2e       	mov	r10, r31
    6adc:	f0 2d       	mov	r31, r0
    6ade:	bb 24       	eor	r11, r11
    6ae0:	cc 24       	eor	r12, r12
    6ae2:	dd 24       	eor	r13, r13
    6ae4:	ee 24       	eor	r14, r14
    6ae6:	ff 24       	eor	r15, r15
    6ae8:	00 e0       	ldi	r16, 0x00	; 0
    6aea:	10 e0       	ldi	r17, 0x00	; 0
    6aec:	0e 94 69 07 	call	0xed2	; 0xed2 <__umoddi3>
    6af0:	a2 2e       	mov	r10, r18
    6af2:	b3 2e       	mov	r11, r19
    6af4:	c4 2e       	mov	r12, r20
    6af6:	d5 2e       	mov	r13, r21
    6af8:	e6 2e       	mov	r14, r22
    6afa:	f7 2e       	mov	r15, r23
    6afc:	08 2f       	mov	r16, r24
    6afe:	19 2f       	mov	r17, r25
    6b00:	2a 2d       	mov	r18, r10
    6b02:	3b 2d       	mov	r19, r11
    6b04:	4c 2d       	mov	r20, r12
    6b06:	5d 2d       	mov	r21, r13
    6b08:	6e 2d       	mov	r22, r14
    6b0a:	7f 2d       	mov	r23, r15
    6b0c:	80 2f       	mov	r24, r16
    6b0e:	91 2f       	mov	r25, r17
    6b10:	82 2f       	mov	r24, r18
    6b12:	80 5d       	subi	r24, 0xD0	; 208
    6b14:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <Lcd_VidDisplayChracter>
		LOC_u8Inverse /=10;
    6b18:	a9 80       	ldd	r10, Y+1	; 0x01
    6b1a:	ba 80       	ldd	r11, Y+2	; 0x02
    6b1c:	cb 80       	ldd	r12, Y+3	; 0x03
    6b1e:	dc 80       	ldd	r13, Y+4	; 0x04
    6b20:	ed 80       	ldd	r14, Y+5	; 0x05
    6b22:	fe 80       	ldd	r15, Y+6	; 0x06
    6b24:	0f 81       	ldd	r16, Y+7	; 0x07
    6b26:	18 85       	ldd	r17, Y+8	; 0x08
    6b28:	2a 2d       	mov	r18, r10
    6b2a:	3b 2d       	mov	r19, r11
    6b2c:	4c 2d       	mov	r20, r12
    6b2e:	5d 2d       	mov	r21, r13
    6b30:	6e 2d       	mov	r22, r14
    6b32:	7f 2d       	mov	r23, r15
    6b34:	80 2f       	mov	r24, r16
    6b36:	91 2f       	mov	r25, r17
    6b38:	0f 2e       	mov	r0, r31
    6b3a:	fa e0       	ldi	r31, 0x0A	; 10
    6b3c:	af 2e       	mov	r10, r31
    6b3e:	f0 2d       	mov	r31, r0
    6b40:	bb 24       	eor	r11, r11
    6b42:	cc 24       	eor	r12, r12
    6b44:	dd 24       	eor	r13, r13
    6b46:	ee 24       	eor	r14, r14
    6b48:	ff 24       	eor	r15, r15
    6b4a:	00 e0       	ldi	r16, 0x00	; 0
    6b4c:	10 e0       	ldi	r17, 0x00	; 0
    6b4e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__udivdi3>
    6b52:	a2 2e       	mov	r10, r18
    6b54:	b3 2e       	mov	r11, r19
    6b56:	c4 2e       	mov	r12, r20
    6b58:	d5 2e       	mov	r13, r21
    6b5a:	e6 2e       	mov	r14, r22
    6b5c:	f7 2e       	mov	r15, r23
    6b5e:	08 2f       	mov	r16, r24
    6b60:	19 2f       	mov	r17, r25
    6b62:	a9 82       	std	Y+1, r10	; 0x01
    6b64:	ba 82       	std	Y+2, r11	; 0x02
    6b66:	cb 82       	std	Y+3, r12	; 0x03
    6b68:	dc 82       	std	Y+4, r13	; 0x04
    6b6a:	ed 82       	std	Y+5, r14	; 0x05
    6b6c:	fe 82       	std	Y+6, r15	; 0x06
    6b6e:	0f 83       	std	Y+7, r16	; 0x07
    6b70:	18 87       	std	Y+8, r17	; 0x08
	while(Copy_u64Num != 0)
	{
		LOC_u8Inverse=(LOC_u8Inverse*10)+(Copy_u64Num%10);
		Copy_u64Num /=10;
	}
	while(LOC_u8Inverse != 1)
    6b72:	89 81       	ldd	r24, Y+1	; 0x01
    6b74:	81 30       	cpi	r24, 0x01	; 1
    6b76:	09 f0       	breq	.+2      	; 0x6b7a <Lcd_VidDisplayNumberXY+0x83e>
    6b78:	9e cf       	rjmp	.-196    	; 0x6ab6 <Lcd_VidDisplayNumberXY+0x77a>
    6b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    6b7c:	88 23       	and	r24, r24
    6b7e:	09 f0       	breq	.+2      	; 0x6b82 <Lcd_VidDisplayNumberXY+0x846>
    6b80:	9a cf       	rjmp	.-204    	; 0x6ab6 <Lcd_VidDisplayNumberXY+0x77a>
    6b82:	8b 81       	ldd	r24, Y+3	; 0x03
    6b84:	88 23       	and	r24, r24
    6b86:	09 f0       	breq	.+2      	; 0x6b8a <Lcd_VidDisplayNumberXY+0x84e>
    6b88:	96 cf       	rjmp	.-212    	; 0x6ab6 <Lcd_VidDisplayNumberXY+0x77a>
    6b8a:	8c 81       	ldd	r24, Y+4	; 0x04
    6b8c:	88 23       	and	r24, r24
    6b8e:	09 f0       	breq	.+2      	; 0x6b92 <Lcd_VidDisplayNumberXY+0x856>
    6b90:	92 cf       	rjmp	.-220    	; 0x6ab6 <Lcd_VidDisplayNumberXY+0x77a>
    6b92:	8d 81       	ldd	r24, Y+5	; 0x05
    6b94:	88 23       	and	r24, r24
    6b96:	09 f0       	breq	.+2      	; 0x6b9a <Lcd_VidDisplayNumberXY+0x85e>
    6b98:	8e cf       	rjmp	.-228    	; 0x6ab6 <Lcd_VidDisplayNumberXY+0x77a>
    6b9a:	8e 81       	ldd	r24, Y+6	; 0x06
    6b9c:	88 23       	and	r24, r24
    6b9e:	09 f0       	breq	.+2      	; 0x6ba2 <Lcd_VidDisplayNumberXY+0x866>
    6ba0:	8a cf       	rjmp	.-236    	; 0x6ab6 <Lcd_VidDisplayNumberXY+0x77a>
    6ba2:	8f 81       	ldd	r24, Y+7	; 0x07
    6ba4:	88 23       	and	r24, r24
    6ba6:	09 f0       	breq	.+2      	; 0x6baa <Lcd_VidDisplayNumberXY+0x86e>
    6ba8:	86 cf       	rjmp	.-244    	; 0x6ab6 <Lcd_VidDisplayNumberXY+0x77a>
    6baa:	88 85       	ldd	r24, Y+8	; 0x08
    6bac:	88 23       	and	r24, r24
    6bae:	09 f0       	breq	.+2      	; 0x6bb2 <Lcd_VidDisplayNumberXY+0x876>
    6bb0:	82 cf       	rjmp	.-252    	; 0x6ab6 <Lcd_VidDisplayNumberXY+0x77a>
	{
		Lcd_VidDisplayChracter(((LOC_u8Inverse%10)+'0'));
		LOC_u8Inverse /=10;
	}

}
    6bb2:	c8 59       	subi	r28, 0x98	; 152
    6bb4:	df 4f       	sbci	r29, 0xFF	; 255
    6bb6:	0f b6       	in	r0, 0x3f	; 63
    6bb8:	f8 94       	cli
    6bba:	de bf       	out	0x3e, r29	; 62
    6bbc:	0f be       	out	0x3f, r0	; 63
    6bbe:	cd bf       	out	0x3d, r28	; 61
    6bc0:	cf 91       	pop	r28
    6bc2:	df 91       	pop	r29
    6bc4:	1f 91       	pop	r17
    6bc6:	0f 91       	pop	r16
    6bc8:	ff 90       	pop	r15
    6bca:	ef 90       	pop	r14
    6bcc:	df 90       	pop	r13
    6bce:	cf 90       	pop	r12
    6bd0:	bf 90       	pop	r11
    6bd2:	af 90       	pop	r10
    6bd4:	08 95       	ret

00006bd6 <Keypad_VidWritePins>:
#include "../Includes/Keypad_Cfg.h"
#include "../Includes/Keypad_Prv.h"


 void Keypad_VidWritePins(uint8 LOC_u8Pattern)
{
    6bd6:	df 93       	push	r29
    6bd8:	cf 93       	push	r28
    6bda:	0f 92       	push	r0
    6bdc:	cd b7       	in	r28, 0x3d	; 61
    6bde:	de b7       	in	r29, 0x3e	; 62
    6be0:	89 83       	std	Y+1, r24	; 0x01
	Dio_enuWriteChannel(KEYPAD_ROW1,GET_BIT(LOC_u8Pattern,0));
    6be2:	89 81       	ldd	r24, Y+1	; 0x01
    6be4:	98 2f       	mov	r25, r24
    6be6:	91 70       	andi	r25, 0x01	; 1
    6be8:	88 e0       	ldi	r24, 0x08	; 8
    6bea:	69 2f       	mov	r22, r25
    6bec:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <Dio_enuWriteChannel>
	Dio_enuWriteChannel(KEYPAD_ROW2,GET_BIT(LOC_u8Pattern,1));
    6bf0:	89 81       	ldd	r24, Y+1	; 0x01
    6bf2:	88 2f       	mov	r24, r24
    6bf4:	90 e0       	ldi	r25, 0x00	; 0
    6bf6:	82 70       	andi	r24, 0x02	; 2
    6bf8:	90 70       	andi	r25, 0x00	; 0
    6bfa:	95 95       	asr	r25
    6bfc:	87 95       	ror	r24
    6bfe:	98 2f       	mov	r25, r24
    6c00:	89 e0       	ldi	r24, 0x09	; 9
    6c02:	69 2f       	mov	r22, r25
    6c04:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <Dio_enuWriteChannel>
	Dio_enuWriteChannel(KEYPAD_ROW3,GET_BIT(LOC_u8Pattern,2));
    6c08:	89 81       	ldd	r24, Y+1	; 0x01
    6c0a:	88 2f       	mov	r24, r24
    6c0c:	90 e0       	ldi	r25, 0x00	; 0
    6c0e:	84 70       	andi	r24, 0x04	; 4
    6c10:	90 70       	andi	r25, 0x00	; 0
    6c12:	95 95       	asr	r25
    6c14:	87 95       	ror	r24
    6c16:	95 95       	asr	r25
    6c18:	87 95       	ror	r24
    6c1a:	98 2f       	mov	r25, r24
    6c1c:	8a e0       	ldi	r24, 0x0A	; 10
    6c1e:	69 2f       	mov	r22, r25
    6c20:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <Dio_enuWriteChannel>
	Dio_enuWriteChannel(KEYPAD_ROW4,GET_BIT(LOC_u8Pattern,3));
    6c24:	89 81       	ldd	r24, Y+1	; 0x01
    6c26:	88 2f       	mov	r24, r24
    6c28:	90 e0       	ldi	r25, 0x00	; 0
    6c2a:	88 70       	andi	r24, 0x08	; 8
    6c2c:	90 70       	andi	r25, 0x00	; 0
    6c2e:	95 95       	asr	r25
    6c30:	87 95       	ror	r24
    6c32:	95 95       	asr	r25
    6c34:	87 95       	ror	r24
    6c36:	95 95       	asr	r25
    6c38:	87 95       	ror	r24
    6c3a:	98 2f       	mov	r25, r24
    6c3c:	8b e0       	ldi	r24, 0x0B	; 11
    6c3e:	69 2f       	mov	r22, r25
    6c40:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <Dio_enuWriteChannel>
}
    6c44:	0f 90       	pop	r0
    6c46:	cf 91       	pop	r28
    6c48:	df 91       	pop	r29
    6c4a:	08 95       	ret

00006c4c <Keypad_VidReadPins>:

 void Keypad_VidReadPins(pu8 Add_LOC_u8PinsReading)
{
    6c4c:	df 93       	push	r29
    6c4e:	cf 93       	push	r28
    6c50:	00 d0       	rcall	.+0      	; 0x6c52 <Keypad_VidReadPins+0x6>
    6c52:	00 d0       	rcall	.+0      	; 0x6c54 <Keypad_VidReadPins+0x8>
    6c54:	cd b7       	in	r28, 0x3d	; 61
    6c56:	de b7       	in	r29, 0x3e	; 62
    6c58:	9c 83       	std	Y+4, r25	; 0x04
    6c5a:	8b 83       	std	Y+3, r24	; 0x03
	uint8 LOC_u8Temp=0x00;
    6c5c:	1a 82       	std	Y+2, r1	; 0x02
	*Add_LOC_u8PinsReading=0x00;
    6c5e:	eb 81       	ldd	r30, Y+3	; 0x03
    6c60:	fc 81       	ldd	r31, Y+4	; 0x04
    6c62:	10 82       	st	Z, r1
	uint8 LOC_u8ErrorStatus=Keypad_enuOK;
    6c64:	19 82       	std	Y+1, r1	; 0x01
	if(Add_LOC_u8PinsReading==Null_ptr)
    6c66:	8b 81       	ldd	r24, Y+3	; 0x03
    6c68:	9c 81       	ldd	r25, Y+4	; 0x04
    6c6a:	00 97       	sbiw	r24, 0x00	; 0
    6c6c:	11 f4       	brne	.+4      	; 0x6c72 <Keypad_VidReadPins+0x26>
	{
		LOC_u8ErrorStatus=Keypad_enuPointerError;
    6c6e:	83 e0       	ldi	r24, 0x03	; 3
    6c70:	89 83       	std	Y+1, r24	; 0x01

	}
#if(KEYPAD_TYPE==KEYPAD_4x4)
	Dio_enuReadChannel(KEYPAD_COL1,&LOC_u8Temp);
    6c72:	9e 01       	movw	r18, r28
    6c74:	2e 5f       	subi	r18, 0xFE	; 254
    6c76:	3f 4f       	sbci	r19, 0xFF	; 255
    6c78:	8c e0       	ldi	r24, 0x0C	; 12
    6c7a:	b9 01       	movw	r22, r18
    6c7c:	0e 94 49 20 	call	0x4092	; 0x4092 <Dio_enuReadChannel>
	*Add_LOC_u8PinsReading |=LOC_u8Temp<<0;
    6c80:	eb 81       	ldd	r30, Y+3	; 0x03
    6c82:	fc 81       	ldd	r31, Y+4	; 0x04
    6c84:	90 81       	ld	r25, Z
    6c86:	8a 81       	ldd	r24, Y+2	; 0x02
    6c88:	89 2b       	or	r24, r25
    6c8a:	eb 81       	ldd	r30, Y+3	; 0x03
    6c8c:	fc 81       	ldd	r31, Y+4	; 0x04
    6c8e:	80 83       	st	Z, r24
	Dio_enuReadChannel(KEYPAD_COL2,&LOC_u8Temp);
    6c90:	9e 01       	movw	r18, r28
    6c92:	2e 5f       	subi	r18, 0xFE	; 254
    6c94:	3f 4f       	sbci	r19, 0xFF	; 255
    6c96:	8d e0       	ldi	r24, 0x0D	; 13
    6c98:	b9 01       	movw	r22, r18
    6c9a:	0e 94 49 20 	call	0x4092	; 0x4092 <Dio_enuReadChannel>
	*Add_LOC_u8PinsReading |=LOC_u8Temp<<1;
    6c9e:	eb 81       	ldd	r30, Y+3	; 0x03
    6ca0:	fc 81       	ldd	r31, Y+4	; 0x04
    6ca2:	80 81       	ld	r24, Z
    6ca4:	28 2f       	mov	r18, r24
    6ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    6ca8:	88 2f       	mov	r24, r24
    6caa:	90 e0       	ldi	r25, 0x00	; 0
    6cac:	88 0f       	add	r24, r24
    6cae:	99 1f       	adc	r25, r25
    6cb0:	82 2b       	or	r24, r18
    6cb2:	eb 81       	ldd	r30, Y+3	; 0x03
    6cb4:	fc 81       	ldd	r31, Y+4	; 0x04
    6cb6:	80 83       	st	Z, r24
	Dio_enuReadChannel(KEYPAD_COL3,&LOC_u8Temp);
    6cb8:	9e 01       	movw	r18, r28
    6cba:	2e 5f       	subi	r18, 0xFE	; 254
    6cbc:	3f 4f       	sbci	r19, 0xFF	; 255
    6cbe:	8e e0       	ldi	r24, 0x0E	; 14
    6cc0:	b9 01       	movw	r22, r18
    6cc2:	0e 94 49 20 	call	0x4092	; 0x4092 <Dio_enuReadChannel>
	*Add_LOC_u8PinsReading |=LOC_u8Temp<<2;
    6cc6:	eb 81       	ldd	r30, Y+3	; 0x03
    6cc8:	fc 81       	ldd	r31, Y+4	; 0x04
    6cca:	80 81       	ld	r24, Z
    6ccc:	28 2f       	mov	r18, r24
    6cce:	8a 81       	ldd	r24, Y+2	; 0x02
    6cd0:	88 2f       	mov	r24, r24
    6cd2:	90 e0       	ldi	r25, 0x00	; 0
    6cd4:	88 0f       	add	r24, r24
    6cd6:	99 1f       	adc	r25, r25
    6cd8:	88 0f       	add	r24, r24
    6cda:	99 1f       	adc	r25, r25
    6cdc:	82 2b       	or	r24, r18
    6cde:	eb 81       	ldd	r30, Y+3	; 0x03
    6ce0:	fc 81       	ldd	r31, Y+4	; 0x04
    6ce2:	80 83       	st	Z, r24
	Dio_enuReadChannel(KEYPAD_COL4,&LOC_u8Temp);
    6ce4:	9e 01       	movw	r18, r28
    6ce6:	2e 5f       	subi	r18, 0xFE	; 254
    6ce8:	3f 4f       	sbci	r19, 0xFF	; 255
    6cea:	8f e0       	ldi	r24, 0x0F	; 15
    6cec:	b9 01       	movw	r22, r18
    6cee:	0e 94 49 20 	call	0x4092	; 0x4092 <Dio_enuReadChannel>
	*Add_LOC_u8PinsReading |=LOC_u8Temp<<3;
    6cf2:	eb 81       	ldd	r30, Y+3	; 0x03
    6cf4:	fc 81       	ldd	r31, Y+4	; 0x04
    6cf6:	80 81       	ld	r24, Z
    6cf8:	28 2f       	mov	r18, r24
    6cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    6cfc:	88 2f       	mov	r24, r24
    6cfe:	90 e0       	ldi	r25, 0x00	; 0
    6d00:	88 0f       	add	r24, r24
    6d02:	99 1f       	adc	r25, r25
    6d04:	88 0f       	add	r24, r24
    6d06:	99 1f       	adc	r25, r25
    6d08:	88 0f       	add	r24, r24
    6d0a:	99 1f       	adc	r25, r25
    6d0c:	82 2b       	or	r24, r18
    6d0e:	eb 81       	ldd	r30, Y+3	; 0x03
    6d10:	fc 81       	ldd	r31, Y+4	; 0x04
    6d12:	80 83       	st	Z, r24
	Dio_enuReadChannel(KEYPAD_COL2,&LOC_u8Temp);
	*Add_LOC_u8PinsReading |=LOC_u8Temp<<1;
	Dio_enuReadChannel(KEYPAD_COL3,&LOC_u8Temp);
	*Add_LOC_u8PinsReading |=LOC_u8Temp<<2;
#endif
}
    6d14:	0f 90       	pop	r0
    6d16:	0f 90       	pop	r0
    6d18:	0f 90       	pop	r0
    6d1a:	0f 90       	pop	r0
    6d1c:	cf 91       	pop	r28
    6d1e:	df 91       	pop	r29
    6d20:	08 95       	ret

00006d22 <Keypad_enuKeypadGetPressed>:



Keypad_tenuErrorStatus Keypad_enuKeypadGetPressed(pu8 Add_pu8Key)
{
    6d22:	df 93       	push	r29
    6d24:	cf 93       	push	r28
    6d26:	cd b7       	in	r28, 0x3d	; 61
    6d28:	de b7       	in	r29, 0x3e	; 62
    6d2a:	65 97       	sbiw	r28, 0x15	; 21
    6d2c:	0f b6       	in	r0, 0x3f	; 63
    6d2e:	f8 94       	cli
    6d30:	de bf       	out	0x3e, r29	; 62
    6d32:	0f be       	out	0x3f, r0	; 63
    6d34:	cd bf       	out	0x3d, r28	; 61
    6d36:	9b 8b       	std	Y+19, r25	; 0x13
    6d38:	8a 8b       	std	Y+18, r24	; 0x12
	uint8 LOC_u8ErrorStatus=Keypad_enuOK;
    6d3a:	18 8a       	std	Y+16, r1	; 0x10
	uint8 LOC_u8Iterator=0;
    6d3c:	1f 86       	std	Y+15, r1	; 0x0f
	uint8 LOC_u8ColPattern=0;
    6d3e:	19 8a       	std	Y+17, r1	; 0x11
	*Add_pu8Key=0;
    6d40:	ea 89       	ldd	r30, Y+18	; 0x12
    6d42:	fb 89       	ldd	r31, Y+19	; 0x13
    6d44:	10 82       	st	Z, r1
	if(Add_pu8Key==Null_ptr)
    6d46:	8a 89       	ldd	r24, Y+18	; 0x12
    6d48:	9b 89       	ldd	r25, Y+19	; 0x13
    6d4a:	00 97       	sbiw	r24, 0x00	; 0
    6d4c:	11 f4       	brne	.+4      	; 0x6d52 <Keypad_enuKeypadGetPressed+0x30>
	{
		LOC_u8ErrorStatus=Keypad_enuPointerError;
    6d4e:	83 e0       	ldi	r24, 0x03	; 3
    6d50:	88 8b       	std	Y+16, r24	; 0x10

	}

	for(LOC_u8Iterator=0;LOC_u8Iterator<KEYPAD_NUMBER_OF_ROWS;LOC_u8Iterator++)
    6d52:	1f 86       	std	Y+15, r1	; 0x0f
    6d54:	79 c0       	rjmp	.+242    	; 0x6e48 <Keypad_enuKeypadGetPressed+0x126>
	{
		Keypad_VidWritePins(TGLWithOUTASSIGN(KEYPAD_ROWS_PATTERN,LOC_u8Iterator));
    6d56:	8f 85       	ldd	r24, Y+15	; 0x0f
    6d58:	28 2f       	mov	r18, r24
    6d5a:	30 e0       	ldi	r19, 0x00	; 0
    6d5c:	81 e0       	ldi	r24, 0x01	; 1
    6d5e:	90 e0       	ldi	r25, 0x00	; 0
    6d60:	02 c0       	rjmp	.+4      	; 0x6d66 <Keypad_enuKeypadGetPressed+0x44>
    6d62:	88 0f       	add	r24, r24
    6d64:	99 1f       	adc	r25, r25
    6d66:	2a 95       	dec	r18
    6d68:	e2 f7       	brpl	.-8      	; 0x6d62 <Keypad_enuKeypadGetPressed+0x40>
    6d6a:	98 2f       	mov	r25, r24
    6d6c:	8f e0       	ldi	r24, 0x0F	; 15
    6d6e:	89 27       	eor	r24, r25
    6d70:	0e 94 eb 35 	call	0x6bd6	; 0x6bd6 <Keypad_VidWritePins>
		Keypad_VidReadPins(&LOC_u8ColPattern);
    6d74:	ce 01       	movw	r24, r28
    6d76:	41 96       	adiw	r24, 0x11	; 17
    6d78:	0e 94 26 36 	call	0x6c4c	; 0x6c4c <Keypad_VidReadPins>
		switch(LOC_u8ColPattern)
    6d7c:	89 89       	ldd	r24, Y+17	; 0x11
    6d7e:	28 2f       	mov	r18, r24
    6d80:	30 e0       	ldi	r19, 0x00	; 0
    6d82:	3d 8b       	std	Y+21, r19	; 0x15
    6d84:	2c 8b       	std	Y+20, r18	; 0x14
    6d86:	8c 89       	ldd	r24, Y+20	; 0x14
    6d88:	9d 89       	ldd	r25, Y+21	; 0x15
    6d8a:	8b 30       	cpi	r24, 0x0B	; 11
    6d8c:	91 05       	cpc	r25, r1
    6d8e:	a9 f1       	breq	.+106    	; 0x6dfa <Keypad_enuKeypadGetPressed+0xd8>
    6d90:	2c 89       	ldd	r18, Y+20	; 0x14
    6d92:	3d 89       	ldd	r19, Y+21	; 0x15
    6d94:	2c 30       	cpi	r18, 0x0C	; 12
    6d96:	31 05       	cpc	r19, r1
    6d98:	34 f4       	brge	.+12     	; 0x6da6 <Keypad_enuKeypadGetPressed+0x84>
    6d9a:	8c 89       	ldd	r24, Y+20	; 0x14
    6d9c:	9d 89       	ldd	r25, Y+21	; 0x15
    6d9e:	87 30       	cpi	r24, 0x07	; 7
    6da0:	91 05       	cpc	r25, r1
    6da2:	d9 f1       	breq	.+118    	; 0x6e1a <Keypad_enuKeypadGetPressed+0xf8>
    6da4:	49 c0       	rjmp	.+146    	; 0x6e38 <Keypad_enuKeypadGetPressed+0x116>
    6da6:	2c 89       	ldd	r18, Y+20	; 0x14
    6da8:	3d 89       	ldd	r19, Y+21	; 0x15
    6daa:	2d 30       	cpi	r18, 0x0D	; 13
    6dac:	31 05       	cpc	r19, r1
    6dae:	a9 f0       	breq	.+42     	; 0x6dda <Keypad_enuKeypadGetPressed+0xb8>
    6db0:	8c 89       	ldd	r24, Y+20	; 0x14
    6db2:	9d 89       	ldd	r25, Y+21	; 0x15
    6db4:	8e 30       	cpi	r24, 0x0E	; 14
    6db6:	91 05       	cpc	r25, r1
    6db8:	09 f0       	breq	.+2      	; 0x6dbc <Keypad_enuKeypadGetPressed+0x9a>
    6dba:	3e c0       	rjmp	.+124    	; 0x6e38 <Keypad_enuKeypadGetPressed+0x116>
		{
		case KEYPAD_PATTERN1:
			*Add_pu8Key=Symbols[(LOC_u8Iterator*KEYPAD_NUMBER_OF_ROWS)+0];
    6dbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    6dbe:	88 2f       	mov	r24, r24
    6dc0:	90 e0       	ldi	r25, 0x00	; 0
    6dc2:	88 0f       	add	r24, r24
    6dc4:	99 1f       	adc	r25, r25
    6dc6:	88 0f       	add	r24, r24
    6dc8:	99 1f       	adc	r25, r25
    6dca:	fc 01       	movw	r30, r24
    6dcc:	e3 52       	subi	r30, 0x23	; 35
    6dce:	fe 4f       	sbci	r31, 0xFE	; 254
    6dd0:	80 81       	ld	r24, Z
    6dd2:	ea 89       	ldd	r30, Y+18	; 0x12
    6dd4:	fb 89       	ldd	r31, Y+19	; 0x13
    6dd6:	80 83       	st	Z, r24
    6dd8:	2f c0       	rjmp	.+94     	; 0x6e38 <Keypad_enuKeypadGetPressed+0x116>
			break;
		case KEYPAD_PATTERN2:
			*Add_pu8Key=Symbols[(LOC_u8Iterator*KEYPAD_NUMBER_OF_ROWS)+1];
    6dda:	8f 85       	ldd	r24, Y+15	; 0x0f
    6ddc:	88 2f       	mov	r24, r24
    6dde:	90 e0       	ldi	r25, 0x00	; 0
    6de0:	88 0f       	add	r24, r24
    6de2:	99 1f       	adc	r25, r25
    6de4:	88 0f       	add	r24, r24
    6de6:	99 1f       	adc	r25, r25
    6de8:	01 96       	adiw	r24, 0x01	; 1
    6dea:	fc 01       	movw	r30, r24
    6dec:	e3 52       	subi	r30, 0x23	; 35
    6dee:	fe 4f       	sbci	r31, 0xFE	; 254
    6df0:	80 81       	ld	r24, Z
    6df2:	ea 89       	ldd	r30, Y+18	; 0x12
    6df4:	fb 89       	ldd	r31, Y+19	; 0x13
    6df6:	80 83       	st	Z, r24
    6df8:	1f c0       	rjmp	.+62     	; 0x6e38 <Keypad_enuKeypadGetPressed+0x116>

					break;
		case KEYPAD_PATTERN3:
			*Add_pu8Key=Symbols[(LOC_u8Iterator*KEYPAD_NUMBER_OF_ROWS)+2];
    6dfa:	8f 85       	ldd	r24, Y+15	; 0x0f
    6dfc:	88 2f       	mov	r24, r24
    6dfe:	90 e0       	ldi	r25, 0x00	; 0
    6e00:	88 0f       	add	r24, r24
    6e02:	99 1f       	adc	r25, r25
    6e04:	01 96       	adiw	r24, 0x01	; 1
    6e06:	88 0f       	add	r24, r24
    6e08:	99 1f       	adc	r25, r25
    6e0a:	fc 01       	movw	r30, r24
    6e0c:	e3 52       	subi	r30, 0x23	; 35
    6e0e:	fe 4f       	sbci	r31, 0xFE	; 254
    6e10:	80 81       	ld	r24, Z
    6e12:	ea 89       	ldd	r30, Y+18	; 0x12
    6e14:	fb 89       	ldd	r31, Y+19	; 0x13
    6e16:	80 83       	st	Z, r24
    6e18:	0f c0       	rjmp	.+30     	; 0x6e38 <Keypad_enuKeypadGetPressed+0x116>

			break;
		case KEYPAD_PATTERN4:
			*Add_pu8Key=Symbols[(LOC_u8Iterator*KEYPAD_NUMBER_OF_ROWS)+3];
    6e1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    6e1c:	88 2f       	mov	r24, r24
    6e1e:	90 e0       	ldi	r25, 0x00	; 0
    6e20:	88 0f       	add	r24, r24
    6e22:	99 1f       	adc	r25, r25
    6e24:	88 0f       	add	r24, r24
    6e26:	99 1f       	adc	r25, r25
    6e28:	03 96       	adiw	r24, 0x03	; 3
    6e2a:	fc 01       	movw	r30, r24
    6e2c:	e3 52       	subi	r30, 0x23	; 35
    6e2e:	fe 4f       	sbci	r31, 0xFE	; 254
    6e30:	80 81       	ld	r24, Z
    6e32:	ea 89       	ldd	r30, Y+18	; 0x12
    6e34:	fb 89       	ldd	r31, Y+19	; 0x13
    6e36:	80 83       	st	Z, r24

			break;

		}
		if(*Add_pu8Key !=0)
    6e38:	ea 89       	ldd	r30, Y+18	; 0x12
    6e3a:	fb 89       	ldd	r31, Y+19	; 0x13
    6e3c:	80 81       	ld	r24, Z
    6e3e:	88 23       	and	r24, r24
    6e40:	39 f4       	brne	.+14     	; 0x6e50 <Keypad_enuKeypadGetPressed+0x12e>
	{
		LOC_u8ErrorStatus=Keypad_enuPointerError;

	}

	for(LOC_u8Iterator=0;LOC_u8Iterator<KEYPAD_NUMBER_OF_ROWS;LOC_u8Iterator++)
    6e42:	8f 85       	ldd	r24, Y+15	; 0x0f
    6e44:	8f 5f       	subi	r24, 0xFF	; 255
    6e46:	8f 87       	std	Y+15, r24	; 0x0f
    6e48:	8f 85       	ldd	r24, Y+15	; 0x0f
    6e4a:	84 30       	cpi	r24, 0x04	; 4
    6e4c:	08 f4       	brcc	.+2      	; 0x6e50 <Keypad_enuKeypadGetPressed+0x12e>
    6e4e:	83 cf       	rjmp	.-250    	; 0x6d56 <Keypad_enuKeypadGetPressed+0x34>
    6e50:	80 e0       	ldi	r24, 0x00	; 0
    6e52:	90 e0       	ldi	r25, 0x00	; 0
    6e54:	a8 e4       	ldi	r26, 0x48	; 72
    6e56:	b3 e4       	ldi	r27, 0x43	; 67
    6e58:	8b 87       	std	Y+11, r24	; 0x0b
    6e5a:	9c 87       	std	Y+12, r25	; 0x0c
    6e5c:	ad 87       	std	Y+13, r26	; 0x0d
    6e5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6e60:	6b 85       	ldd	r22, Y+11	; 0x0b
    6e62:	7c 85       	ldd	r23, Y+12	; 0x0c
    6e64:	8d 85       	ldd	r24, Y+13	; 0x0d
    6e66:	9e 85       	ldd	r25, Y+14	; 0x0e
    6e68:	20 e0       	ldi	r18, 0x00	; 0
    6e6a:	30 e0       	ldi	r19, 0x00	; 0
    6e6c:	4a ef       	ldi	r20, 0xFA	; 250
    6e6e:	54 e4       	ldi	r21, 0x44	; 68
    6e70:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6e74:	dc 01       	movw	r26, r24
    6e76:	cb 01       	movw	r24, r22
    6e78:	8f 83       	std	Y+7, r24	; 0x07
    6e7a:	98 87       	std	Y+8, r25	; 0x08
    6e7c:	a9 87       	std	Y+9, r26	; 0x09
    6e7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6e80:	6f 81       	ldd	r22, Y+7	; 0x07
    6e82:	78 85       	ldd	r23, Y+8	; 0x08
    6e84:	89 85       	ldd	r24, Y+9	; 0x09
    6e86:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e88:	20 e0       	ldi	r18, 0x00	; 0
    6e8a:	30 e0       	ldi	r19, 0x00	; 0
    6e8c:	40 e8       	ldi	r20, 0x80	; 128
    6e8e:	5f e3       	ldi	r21, 0x3F	; 63
    6e90:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    6e94:	88 23       	and	r24, r24
    6e96:	2c f4       	brge	.+10     	; 0x6ea2 <Keypad_enuKeypadGetPressed+0x180>
		__ticks = 1;
    6e98:	81 e0       	ldi	r24, 0x01	; 1
    6e9a:	90 e0       	ldi	r25, 0x00	; 0
    6e9c:	9e 83       	std	Y+6, r25	; 0x06
    6e9e:	8d 83       	std	Y+5, r24	; 0x05
    6ea0:	3f c0       	rjmp	.+126    	; 0x6f20 <Keypad_enuKeypadGetPressed+0x1fe>
	else if (__tmp > 65535)
    6ea2:	6f 81       	ldd	r22, Y+7	; 0x07
    6ea4:	78 85       	ldd	r23, Y+8	; 0x08
    6ea6:	89 85       	ldd	r24, Y+9	; 0x09
    6ea8:	9a 85       	ldd	r25, Y+10	; 0x0a
    6eaa:	20 e0       	ldi	r18, 0x00	; 0
    6eac:	3f ef       	ldi	r19, 0xFF	; 255
    6eae:	4f e7       	ldi	r20, 0x7F	; 127
    6eb0:	57 e4       	ldi	r21, 0x47	; 71
    6eb2:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    6eb6:	18 16       	cp	r1, r24
    6eb8:	4c f5       	brge	.+82     	; 0x6f0c <Keypad_enuKeypadGetPressed+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6eba:	6b 85       	ldd	r22, Y+11	; 0x0b
    6ebc:	7c 85       	ldd	r23, Y+12	; 0x0c
    6ebe:	8d 85       	ldd	r24, Y+13	; 0x0d
    6ec0:	9e 85       	ldd	r25, Y+14	; 0x0e
    6ec2:	20 e0       	ldi	r18, 0x00	; 0
    6ec4:	30 e0       	ldi	r19, 0x00	; 0
    6ec6:	40 e2       	ldi	r20, 0x20	; 32
    6ec8:	51 e4       	ldi	r21, 0x41	; 65
    6eca:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6ece:	dc 01       	movw	r26, r24
    6ed0:	cb 01       	movw	r24, r22
    6ed2:	bc 01       	movw	r22, r24
    6ed4:	cd 01       	movw	r24, r26
    6ed6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6eda:	dc 01       	movw	r26, r24
    6edc:	cb 01       	movw	r24, r22
    6ede:	9e 83       	std	Y+6, r25	; 0x06
    6ee0:	8d 83       	std	Y+5, r24	; 0x05
    6ee2:	0f c0       	rjmp	.+30     	; 0x6f02 <Keypad_enuKeypadGetPressed+0x1e0>
    6ee4:	88 ec       	ldi	r24, 0xC8	; 200
    6ee6:	90 e0       	ldi	r25, 0x00	; 0
    6ee8:	9c 83       	std	Y+4, r25	; 0x04
    6eea:	8b 83       	std	Y+3, r24	; 0x03
    6eec:	8b 81       	ldd	r24, Y+3	; 0x03
    6eee:	9c 81       	ldd	r25, Y+4	; 0x04
    6ef0:	01 97       	sbiw	r24, 0x01	; 1
    6ef2:	f1 f7       	brne	.-4      	; 0x6ef0 <Keypad_enuKeypadGetPressed+0x1ce>
    6ef4:	9c 83       	std	Y+4, r25	; 0x04
    6ef6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6ef8:	8d 81       	ldd	r24, Y+5	; 0x05
    6efa:	9e 81       	ldd	r25, Y+6	; 0x06
    6efc:	01 97       	sbiw	r24, 0x01	; 1
    6efe:	9e 83       	std	Y+6, r25	; 0x06
    6f00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6f02:	8d 81       	ldd	r24, Y+5	; 0x05
    6f04:	9e 81       	ldd	r25, Y+6	; 0x06
    6f06:	00 97       	sbiw	r24, 0x00	; 0
    6f08:	69 f7       	brne	.-38     	; 0x6ee4 <Keypad_enuKeypadGetPressed+0x1c2>
    6f0a:	14 c0       	rjmp	.+40     	; 0x6f34 <Keypad_enuKeypadGetPressed+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6f0c:	6f 81       	ldd	r22, Y+7	; 0x07
    6f0e:	78 85       	ldd	r23, Y+8	; 0x08
    6f10:	89 85       	ldd	r24, Y+9	; 0x09
    6f12:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f14:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6f18:	dc 01       	movw	r26, r24
    6f1a:	cb 01       	movw	r24, r22
    6f1c:	9e 83       	std	Y+6, r25	; 0x06
    6f1e:	8d 83       	std	Y+5, r24	; 0x05
    6f20:	8d 81       	ldd	r24, Y+5	; 0x05
    6f22:	9e 81       	ldd	r25, Y+6	; 0x06
    6f24:	9a 83       	std	Y+2, r25	; 0x02
    6f26:	89 83       	std	Y+1, r24	; 0x01
    6f28:	89 81       	ldd	r24, Y+1	; 0x01
    6f2a:	9a 81       	ldd	r25, Y+2	; 0x02
    6f2c:	01 97       	sbiw	r24, 0x01	; 1
    6f2e:	f1 f7       	brne	.-4      	; 0x6f2c <Keypad_enuKeypadGetPressed+0x20a>
    6f30:	9a 83       	std	Y+2, r25	; 0x02
    6f32:	89 83       	std	Y+1, r24	; 0x01
		}
		if(*Add_pu8Key !=0)
			break;
	}
_delay_ms(200);
	return LOC_u8ErrorStatus;
    6f34:	88 89       	ldd	r24, Y+16	; 0x10
}
    6f36:	65 96       	adiw	r28, 0x15	; 21
    6f38:	0f b6       	in	r0, 0x3f	; 63
    6f3a:	f8 94       	cli
    6f3c:	de bf       	out	0x3e, r29	; 62
    6f3e:	0f be       	out	0x3f, r0	; 63
    6f40:	cd bf       	out	0x3d, r28	; 61
    6f42:	cf 91       	pop	r28
    6f44:	df 91       	pop	r29
    6f46:	08 95       	ret

00006f48 <Buzzer_ON>:
#include "../Includes/Buzzer.h"
#include "../Includes/Buzzer_Cfg.h"
#include "../Includes/Buzzer_Prv.h"
#include "../../../MCAL/Dio/Includes/Dio.h"
void Buzzer_ON(void)
{
    6f48:	df 93       	push	r29
    6f4a:	cf 93       	push	r28
    6f4c:	cd b7       	in	r28, 0x3d	; 61
    6f4e:	de b7       	in	r29, 0x3e	; 62
	Dio_enuWriteChannel(Buzzer_PIN,DIO_LOGIC_HIGH);
    6f50:	8a e1       	ldi	r24, 0x1A	; 26
    6f52:	61 e0       	ldi	r22, 0x01	; 1
    6f54:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <Dio_enuWriteChannel>
}
    6f58:	cf 91       	pop	r28
    6f5a:	df 91       	pop	r29
    6f5c:	08 95       	ret

00006f5e <Buzzer_Off>:
void Buzzer_Off(void)
{
    6f5e:	df 93       	push	r29
    6f60:	cf 93       	push	r28
    6f62:	cd b7       	in	r28, 0x3d	; 61
    6f64:	de b7       	in	r29, 0x3e	; 62
	Dio_enuWriteChannel(Buzzer_PIN,DIO_LOGIC_LOW);
    6f66:	8a e1       	ldi	r24, 0x1A	; 26
    6f68:	60 e0       	ldi	r22, 0x00	; 0
    6f6a:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <Dio_enuWriteChannel>

}
    6f6e:	cf 91       	pop	r28
    6f70:	df 91       	pop	r29
    6f72:	08 95       	ret

00006f74 <Watch>:
#include "util/delay.h"
uint8 Sec1=0,Sec2=0,Min1=0,Min2=0,H1=0,H2=0;
uint8 Flag=0,key=0,Alarm=0;

void Watch(void)
{
    6f74:	6f 92       	push	r6
    6f76:	7f 92       	push	r7
    6f78:	8f 92       	push	r8
    6f7a:	9f 92       	push	r9
    6f7c:	af 92       	push	r10
    6f7e:	bf 92       	push	r11
    6f80:	cf 92       	push	r12
    6f82:	df 92       	push	r13
    6f84:	ef 92       	push	r14
    6f86:	ff 92       	push	r15
    6f88:	0f 93       	push	r16
    6f8a:	1f 93       	push	r17
    6f8c:	df 93       	push	r29
    6f8e:	cf 93       	push	r28
    6f90:	cd b7       	in	r28, 0x3d	; 61
    6f92:	de b7       	in	r29, 0x3e	; 62
	Sec1++;
    6f94:	80 91 fc 01 	lds	r24, 0x01FC
    6f98:	8f 5f       	subi	r24, 0xFF	; 255
    6f9a:	80 93 fc 01 	sts	0x01FC, r24
	if(Sec1==10)
    6f9e:	80 91 fc 01 	lds	r24, 0x01FC
    6fa2:	8a 30       	cpi	r24, 0x0A	; 10
    6fa4:	39 f4       	brne	.+14     	; 0x6fb4 <Watch+0x40>
	{
		Sec1=0;
    6fa6:	10 92 fc 01 	sts	0x01FC, r1
		Sec2++;
    6faa:	80 91 fd 01 	lds	r24, 0x01FD
    6fae:	8f 5f       	subi	r24, 0xFF	; 255
    6fb0:	80 93 fd 01 	sts	0x01FD, r24
	}
	if(Sec2==6)
    6fb4:	80 91 fd 01 	lds	r24, 0x01FD
    6fb8:	86 30       	cpi	r24, 0x06	; 6
    6fba:	39 f4       	brne	.+14     	; 0x6fca <Watch+0x56>
	{
		Min1++;
    6fbc:	80 91 fe 01 	lds	r24, 0x01FE
    6fc0:	8f 5f       	subi	r24, 0xFF	; 255
    6fc2:	80 93 fe 01 	sts	0x01FE, r24
		Sec2=0;
    6fc6:	10 92 fd 01 	sts	0x01FD, r1
	}
	if(Min1==10)
    6fca:	80 91 fe 01 	lds	r24, 0x01FE
    6fce:	8a 30       	cpi	r24, 0x0A	; 10
    6fd0:	39 f4       	brne	.+14     	; 0x6fe0 <Watch+0x6c>
	{
		Min1=0;
    6fd2:	10 92 fe 01 	sts	0x01FE, r1
		Min2++;
    6fd6:	80 91 ff 01 	lds	r24, 0x01FF
    6fda:	8f 5f       	subi	r24, 0xFF	; 255
    6fdc:	80 93 ff 01 	sts	0x01FF, r24
	}
	if(Min2==6)
    6fe0:	80 91 ff 01 	lds	r24, 0x01FF
    6fe4:	86 30       	cpi	r24, 0x06	; 6
    6fe6:	39 f4       	brne	.+14     	; 0x6ff6 <Watch+0x82>
	{
		H1++;
    6fe8:	80 91 00 02 	lds	r24, 0x0200
    6fec:	8f 5f       	subi	r24, 0xFF	; 255
    6fee:	80 93 00 02 	sts	0x0200, r24
		Min2=0;
    6ff2:	10 92 ff 01 	sts	0x01FF, r1
	}
	if(H1==10)
    6ff6:	80 91 00 02 	lds	r24, 0x0200
    6ffa:	8a 30       	cpi	r24, 0x0A	; 10
    6ffc:	39 f4       	brne	.+14     	; 0x700c <Watch+0x98>
	{
		H2++;
    6ffe:	80 91 01 02 	lds	r24, 0x0201
    7002:	8f 5f       	subi	r24, 0xFF	; 255
    7004:	80 93 01 02 	sts	0x0201, r24
		H1=0;
    7008:	10 92 00 02 	sts	0x0200, r1
	}
	Lcd_VidDisplayNumberXY(1,0,H2);
    700c:	80 91 01 02 	lds	r24, 0x0201
    7010:	68 2e       	mov	r6, r24
    7012:	77 24       	eor	r7, r7
    7014:	88 24       	eor	r8, r8
    7016:	99 24       	eor	r9, r9
    7018:	aa 24       	eor	r10, r10
    701a:	bb 24       	eor	r11, r11
    701c:	65 01       	movw	r12, r10
    701e:	81 e0       	ldi	r24, 0x01	; 1
    7020:	60 e0       	ldi	r22, 0x00	; 0
    7022:	e6 2c       	mov	r14, r6
    7024:	f7 2c       	mov	r15, r7
    7026:	08 2d       	mov	r16, r8
    7028:	19 2d       	mov	r17, r9
    702a:	2a 2d       	mov	r18, r10
    702c:	3b 2d       	mov	r19, r11
    702e:	4c 2d       	mov	r20, r12
    7030:	5d 2d       	mov	r21, r13
    7032:	0e 94 9e 31 	call	0x633c	; 0x633c <Lcd_VidDisplayNumberXY>
	Lcd_VidDisplayNumberXY(1,1,H1);
    7036:	80 91 00 02 	lds	r24, 0x0200
    703a:	68 2e       	mov	r6, r24
    703c:	77 24       	eor	r7, r7
    703e:	88 24       	eor	r8, r8
    7040:	99 24       	eor	r9, r9
    7042:	aa 24       	eor	r10, r10
    7044:	bb 24       	eor	r11, r11
    7046:	65 01       	movw	r12, r10
    7048:	81 e0       	ldi	r24, 0x01	; 1
    704a:	61 e0       	ldi	r22, 0x01	; 1
    704c:	e6 2c       	mov	r14, r6
    704e:	f7 2c       	mov	r15, r7
    7050:	08 2d       	mov	r16, r8
    7052:	19 2d       	mov	r17, r9
    7054:	2a 2d       	mov	r18, r10
    7056:	3b 2d       	mov	r19, r11
    7058:	4c 2d       	mov	r20, r12
    705a:	5d 2d       	mov	r21, r13
    705c:	0e 94 9e 31 	call	0x633c	; 0x633c <Lcd_VidDisplayNumberXY>
	Lcd_VidDisplayNumberXY(1,4,Min2);
    7060:	80 91 ff 01 	lds	r24, 0x01FF
    7064:	68 2e       	mov	r6, r24
    7066:	77 24       	eor	r7, r7
    7068:	88 24       	eor	r8, r8
    706a:	99 24       	eor	r9, r9
    706c:	aa 24       	eor	r10, r10
    706e:	bb 24       	eor	r11, r11
    7070:	65 01       	movw	r12, r10
    7072:	81 e0       	ldi	r24, 0x01	; 1
    7074:	64 e0       	ldi	r22, 0x04	; 4
    7076:	e6 2c       	mov	r14, r6
    7078:	f7 2c       	mov	r15, r7
    707a:	08 2d       	mov	r16, r8
    707c:	19 2d       	mov	r17, r9
    707e:	2a 2d       	mov	r18, r10
    7080:	3b 2d       	mov	r19, r11
    7082:	4c 2d       	mov	r20, r12
    7084:	5d 2d       	mov	r21, r13
    7086:	0e 94 9e 31 	call	0x633c	; 0x633c <Lcd_VidDisplayNumberXY>
	Lcd_VidDisplayNumberXY(1,5,Min1);
    708a:	80 91 fe 01 	lds	r24, 0x01FE
    708e:	68 2e       	mov	r6, r24
    7090:	77 24       	eor	r7, r7
    7092:	88 24       	eor	r8, r8
    7094:	99 24       	eor	r9, r9
    7096:	aa 24       	eor	r10, r10
    7098:	bb 24       	eor	r11, r11
    709a:	65 01       	movw	r12, r10
    709c:	81 e0       	ldi	r24, 0x01	; 1
    709e:	65 e0       	ldi	r22, 0x05	; 5
    70a0:	e6 2c       	mov	r14, r6
    70a2:	f7 2c       	mov	r15, r7
    70a4:	08 2d       	mov	r16, r8
    70a6:	19 2d       	mov	r17, r9
    70a8:	2a 2d       	mov	r18, r10
    70aa:	3b 2d       	mov	r19, r11
    70ac:	4c 2d       	mov	r20, r12
    70ae:	5d 2d       	mov	r21, r13
    70b0:	0e 94 9e 31 	call	0x633c	; 0x633c <Lcd_VidDisplayNumberXY>
	Lcd_VidDisplayNumberXY(1,8,Sec2);
    70b4:	80 91 fd 01 	lds	r24, 0x01FD
    70b8:	68 2e       	mov	r6, r24
    70ba:	77 24       	eor	r7, r7
    70bc:	88 24       	eor	r8, r8
    70be:	99 24       	eor	r9, r9
    70c0:	aa 24       	eor	r10, r10
    70c2:	bb 24       	eor	r11, r11
    70c4:	65 01       	movw	r12, r10
    70c6:	81 e0       	ldi	r24, 0x01	; 1
    70c8:	68 e0       	ldi	r22, 0x08	; 8
    70ca:	e6 2c       	mov	r14, r6
    70cc:	f7 2c       	mov	r15, r7
    70ce:	08 2d       	mov	r16, r8
    70d0:	19 2d       	mov	r17, r9
    70d2:	2a 2d       	mov	r18, r10
    70d4:	3b 2d       	mov	r19, r11
    70d6:	4c 2d       	mov	r20, r12
    70d8:	5d 2d       	mov	r21, r13
    70da:	0e 94 9e 31 	call	0x633c	; 0x633c <Lcd_VidDisplayNumberXY>
	Lcd_VidDisplayNumberXY(1,9,Sec1);
    70de:	80 91 fc 01 	lds	r24, 0x01FC
    70e2:	68 2e       	mov	r6, r24
    70e4:	77 24       	eor	r7, r7
    70e6:	88 24       	eor	r8, r8
    70e8:	99 24       	eor	r9, r9
    70ea:	aa 24       	eor	r10, r10
    70ec:	bb 24       	eor	r11, r11
    70ee:	65 01       	movw	r12, r10
    70f0:	81 e0       	ldi	r24, 0x01	; 1
    70f2:	69 e0       	ldi	r22, 0x09	; 9
    70f4:	e6 2c       	mov	r14, r6
    70f6:	f7 2c       	mov	r15, r7
    70f8:	08 2d       	mov	r16, r8
    70fa:	19 2d       	mov	r17, r9
    70fc:	2a 2d       	mov	r18, r10
    70fe:	3b 2d       	mov	r19, r11
    7100:	4c 2d       	mov	r20, r12
    7102:	5d 2d       	mov	r21, r13
    7104:	0e 94 9e 31 	call	0x633c	; 0x633c <Lcd_VidDisplayNumberXY>

}
    7108:	cf 91       	pop	r28
    710a:	df 91       	pop	r29
    710c:	1f 91       	pop	r17
    710e:	0f 91       	pop	r16
    7110:	ff 90       	pop	r15
    7112:	ef 90       	pop	r14
    7114:	df 90       	pop	r13
    7116:	cf 90       	pop	r12
    7118:	bf 90       	pop	r11
    711a:	af 90       	pop	r10
    711c:	9f 90       	pop	r9
    711e:	8f 90       	pop	r8
    7120:	7f 90       	pop	r7
    7122:	6f 90       	pop	r6
    7124:	08 95       	ret

00007126 <Alarm_Func>:

void Alarm_Func(void)
{
    7126:	6f 92       	push	r6
    7128:	7f 92       	push	r7
    712a:	8f 92       	push	r8
    712c:	9f 92       	push	r9
    712e:	af 92       	push	r10
    7130:	bf 92       	push	r11
    7132:	cf 92       	push	r12
    7134:	df 92       	push	r13
    7136:	ef 92       	push	r14
    7138:	ff 92       	push	r15
    713a:	0f 93       	push	r16
    713c:	1f 93       	push	r17
    713e:	df 93       	push	r29
    7140:	cf 93       	push	r28
    7142:	cd b7       	in	r28, 0x3d	; 61
    7144:	de b7       	in	r29, 0x3e	; 62
    7146:	2e 97       	sbiw	r28, 0x0e	; 14
    7148:	0f b6       	in	r0, 0x3f	; 63
    714a:	f8 94       	cli
    714c:	de bf       	out	0x3e, r29	; 62
    714e:	0f be       	out	0x3f, r0	; 63
    7150:	cd bf       	out	0x3d, r28	; 61
	LCD_DisplayStringXY(0,0,"ALARM:            ");
    7152:	20 e6       	ldi	r18, 0x60	; 96
    7154:	30 e0       	ldi	r19, 0x00	; 0
    7156:	80 e0       	ldi	r24, 0x00	; 0
    7158:	60 e0       	ldi	r22, 0x00	; 0
    715a:	a9 01       	movw	r20, r18
    715c:	0e 94 6c 31 	call	0x62d8	; 0x62d8 <LCD_DisplayStringXY>


	Alarm--;
    7160:	80 91 04 02 	lds	r24, 0x0204
    7164:	81 50       	subi	r24, 0x01	; 1
    7166:	80 93 04 02 	sts	0x0204, r24
	Lcd_VidDisplayNumberXY(1,5,Alarm);
    716a:	80 91 04 02 	lds	r24, 0x0204
    716e:	68 2e       	mov	r6, r24
    7170:	77 24       	eor	r7, r7
    7172:	88 24       	eor	r8, r8
    7174:	99 24       	eor	r9, r9
    7176:	aa 24       	eor	r10, r10
    7178:	bb 24       	eor	r11, r11
    717a:	65 01       	movw	r12, r10
    717c:	81 e0       	ldi	r24, 0x01	; 1
    717e:	65 e0       	ldi	r22, 0x05	; 5
    7180:	e6 2c       	mov	r14, r6
    7182:	f7 2c       	mov	r15, r7
    7184:	08 2d       	mov	r16, r8
    7186:	19 2d       	mov	r17, r9
    7188:	2a 2d       	mov	r18, r10
    718a:	3b 2d       	mov	r19, r11
    718c:	4c 2d       	mov	r20, r12
    718e:	5d 2d       	mov	r21, r13
    7190:	0e 94 9e 31 	call	0x633c	; 0x633c <Lcd_VidDisplayNumberXY>
	if(Alarm==0)
    7194:	80 91 04 02 	lds	r24, 0x0204
    7198:	88 23       	and	r24, r24
    719a:	09 f0       	breq	.+2      	; 0x719e <Alarm_Func+0x78>
    719c:	7b c0       	rjmp	.+246    	; 0x7294 <Alarm_Func+0x16e>
	{
		Buzzer_ON();
    719e:	0e 94 a4 37 	call	0x6f48	; 0x6f48 <Buzzer_ON>
    71a2:	80 e0       	ldi	r24, 0x00	; 0
    71a4:	90 e4       	ldi	r25, 0x40	; 64
    71a6:	ac e9       	ldi	r26, 0x9C	; 156
    71a8:	b5 e4       	ldi	r27, 0x45	; 69
    71aa:	8b 87       	std	Y+11, r24	; 0x0b
    71ac:	9c 87       	std	Y+12, r25	; 0x0c
    71ae:	ad 87       	std	Y+13, r26	; 0x0d
    71b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    71b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    71b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    71b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    71b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    71ba:	20 e0       	ldi	r18, 0x00	; 0
    71bc:	30 e0       	ldi	r19, 0x00	; 0
    71be:	4a ef       	ldi	r20, 0xFA	; 250
    71c0:	54 e4       	ldi	r21, 0x44	; 68
    71c2:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    71c6:	dc 01       	movw	r26, r24
    71c8:	cb 01       	movw	r24, r22
    71ca:	8f 83       	std	Y+7, r24	; 0x07
    71cc:	98 87       	std	Y+8, r25	; 0x08
    71ce:	a9 87       	std	Y+9, r26	; 0x09
    71d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    71d2:	6f 81       	ldd	r22, Y+7	; 0x07
    71d4:	78 85       	ldd	r23, Y+8	; 0x08
    71d6:	89 85       	ldd	r24, Y+9	; 0x09
    71d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    71da:	20 e0       	ldi	r18, 0x00	; 0
    71dc:	30 e0       	ldi	r19, 0x00	; 0
    71de:	40 e8       	ldi	r20, 0x80	; 128
    71e0:	5f e3       	ldi	r21, 0x3F	; 63
    71e2:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    71e6:	88 23       	and	r24, r24
    71e8:	2c f4       	brge	.+10     	; 0x71f4 <Alarm_Func+0xce>
		__ticks = 1;
    71ea:	81 e0       	ldi	r24, 0x01	; 1
    71ec:	90 e0       	ldi	r25, 0x00	; 0
    71ee:	9e 83       	std	Y+6, r25	; 0x06
    71f0:	8d 83       	std	Y+5, r24	; 0x05
    71f2:	3f c0       	rjmp	.+126    	; 0x7272 <Alarm_Func+0x14c>
	else if (__tmp > 65535)
    71f4:	6f 81       	ldd	r22, Y+7	; 0x07
    71f6:	78 85       	ldd	r23, Y+8	; 0x08
    71f8:	89 85       	ldd	r24, Y+9	; 0x09
    71fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    71fc:	20 e0       	ldi	r18, 0x00	; 0
    71fe:	3f ef       	ldi	r19, 0xFF	; 255
    7200:	4f e7       	ldi	r20, 0x7F	; 127
    7202:	57 e4       	ldi	r21, 0x47	; 71
    7204:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    7208:	18 16       	cp	r1, r24
    720a:	4c f5       	brge	.+82     	; 0x725e <Alarm_Func+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    720c:	6b 85       	ldd	r22, Y+11	; 0x0b
    720e:	7c 85       	ldd	r23, Y+12	; 0x0c
    7210:	8d 85       	ldd	r24, Y+13	; 0x0d
    7212:	9e 85       	ldd	r25, Y+14	; 0x0e
    7214:	20 e0       	ldi	r18, 0x00	; 0
    7216:	30 e0       	ldi	r19, 0x00	; 0
    7218:	40 e2       	ldi	r20, 0x20	; 32
    721a:	51 e4       	ldi	r21, 0x41	; 65
    721c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    7220:	dc 01       	movw	r26, r24
    7222:	cb 01       	movw	r24, r22
    7224:	bc 01       	movw	r22, r24
    7226:	cd 01       	movw	r24, r26
    7228:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    722c:	dc 01       	movw	r26, r24
    722e:	cb 01       	movw	r24, r22
    7230:	9e 83       	std	Y+6, r25	; 0x06
    7232:	8d 83       	std	Y+5, r24	; 0x05
    7234:	0f c0       	rjmp	.+30     	; 0x7254 <Alarm_Func+0x12e>
    7236:	88 ec       	ldi	r24, 0xC8	; 200
    7238:	90 e0       	ldi	r25, 0x00	; 0
    723a:	9c 83       	std	Y+4, r25	; 0x04
    723c:	8b 83       	std	Y+3, r24	; 0x03
    723e:	8b 81       	ldd	r24, Y+3	; 0x03
    7240:	9c 81       	ldd	r25, Y+4	; 0x04
    7242:	01 97       	sbiw	r24, 0x01	; 1
    7244:	f1 f7       	brne	.-4      	; 0x7242 <Alarm_Func+0x11c>
    7246:	9c 83       	std	Y+4, r25	; 0x04
    7248:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    724a:	8d 81       	ldd	r24, Y+5	; 0x05
    724c:	9e 81       	ldd	r25, Y+6	; 0x06
    724e:	01 97       	sbiw	r24, 0x01	; 1
    7250:	9e 83       	std	Y+6, r25	; 0x06
    7252:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7254:	8d 81       	ldd	r24, Y+5	; 0x05
    7256:	9e 81       	ldd	r25, Y+6	; 0x06
    7258:	00 97       	sbiw	r24, 0x00	; 0
    725a:	69 f7       	brne	.-38     	; 0x7236 <Alarm_Func+0x110>
    725c:	14 c0       	rjmp	.+40     	; 0x7286 <Alarm_Func+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    725e:	6f 81       	ldd	r22, Y+7	; 0x07
    7260:	78 85       	ldd	r23, Y+8	; 0x08
    7262:	89 85       	ldd	r24, Y+9	; 0x09
    7264:	9a 85       	ldd	r25, Y+10	; 0x0a
    7266:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    726a:	dc 01       	movw	r26, r24
    726c:	cb 01       	movw	r24, r22
    726e:	9e 83       	std	Y+6, r25	; 0x06
    7270:	8d 83       	std	Y+5, r24	; 0x05
    7272:	8d 81       	ldd	r24, Y+5	; 0x05
    7274:	9e 81       	ldd	r25, Y+6	; 0x06
    7276:	9a 83       	std	Y+2, r25	; 0x02
    7278:	89 83       	std	Y+1, r24	; 0x01
    727a:	89 81       	ldd	r24, Y+1	; 0x01
    727c:	9a 81       	ldd	r25, Y+2	; 0x02
    727e:	01 97       	sbiw	r24, 0x01	; 1
    7280:	f1 f7       	brne	.-4      	; 0x727e <Alarm_Func+0x158>
    7282:	9a 83       	std	Y+2, r25	; 0x02
    7284:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5000);
		Buzzer_Off();
    7286:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <Buzzer_Off>
		Timer_DeInit(Timer1);
    728a:	81 e0       	ldi	r24, 0x01	; 1
    728c:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <Timer_DeInit>
		Flag=0;
    7290:	10 92 02 02 	sts	0x0202, r1
	}
}
    7294:	2e 96       	adiw	r28, 0x0e	; 14
    7296:	0f b6       	in	r0, 0x3f	; 63
    7298:	f8 94       	cli
    729a:	de bf       	out	0x3e, r29	; 62
    729c:	0f be       	out	0x3f, r0	; 63
    729e:	cd bf       	out	0x3d, r28	; 61
    72a0:	cf 91       	pop	r28
    72a2:	df 91       	pop	r29
    72a4:	1f 91       	pop	r17
    72a6:	0f 91       	pop	r16
    72a8:	ff 90       	pop	r15
    72aa:	ef 90       	pop	r14
    72ac:	df 90       	pop	r13
    72ae:	cf 90       	pop	r12
    72b0:	bf 90       	pop	r11
    72b2:	af 90       	pop	r10
    72b4:	9f 90       	pop	r9
    72b6:	8f 90       	pop	r8
    72b8:	7f 90       	pop	r7
    72ba:	6f 90       	pop	r6
    72bc:	08 95       	ret

000072be <main>:

int main(void)
{
    72be:	6f 92       	push	r6
    72c0:	7f 92       	push	r7
    72c2:	8f 92       	push	r8
    72c4:	9f 92       	push	r9
    72c6:	af 92       	push	r10
    72c8:	bf 92       	push	r11
    72ca:	cf 92       	push	r12
    72cc:	df 92       	push	r13
    72ce:	ef 92       	push	r14
    72d0:	ff 92       	push	r15
    72d2:	0f 93       	push	r16
    72d4:	1f 93       	push	r17
    72d6:	df 93       	push	r29
    72d8:	cf 93       	push	r28
    72da:	cd b7       	in	r28, 0x3d	; 61
    72dc:	de b7       	in	r29, 0x3e	; 62
    72de:	2e 97       	sbiw	r28, 0x0e	; 14
    72e0:	0f b6       	in	r0, 0x3f	; 63
    72e2:	f8 94       	cli
    72e4:	de bf       	out	0x3e, r29	; 62
    72e6:	0f be       	out	0x3f, r0	; 63
    72e8:	cd bf       	out	0x3d, r28	; 61
	PORT_Init();
    72ea:	0e 94 c7 19 	call	0x338e	; 0x338e <PORT_Init>
	GIE_enuInit();
    72ee:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <GIE_enuInit>
	Lcd_Init();
    72f2:	0e 94 ee 22 	call	0x45dc	; 0x45dc <Lcd_Init>
	Timer_Config Config={0,8000,Timer1,CTC,Disconnect};
    72f6:	9e 01       	movw	r18, r28
    72f8:	2f 5f       	subi	r18, 0xFF	; 255
    72fa:	3f 4f       	sbci	r19, 0xFF	; 255
    72fc:	3b 87       	std	Y+11, r19	; 0x0b
    72fe:	2a 87       	std	Y+10, r18	; 0x0a
    7300:	8d ee       	ldi	r24, 0xED	; 237
    7302:	91 e0       	ldi	r25, 0x01	; 1
    7304:	9d 87       	std	Y+13, r25	; 0x0d
    7306:	8c 87       	std	Y+12, r24	; 0x0c
    7308:	97 e0       	ldi	r25, 0x07	; 7
    730a:	9e 87       	std	Y+14, r25	; 0x0e
    730c:	ec 85       	ldd	r30, Y+12	; 0x0c
    730e:	fd 85       	ldd	r31, Y+13	; 0x0d
    7310:	00 80       	ld	r0, Z
    7312:	2c 85       	ldd	r18, Y+12	; 0x0c
    7314:	3d 85       	ldd	r19, Y+13	; 0x0d
    7316:	2f 5f       	subi	r18, 0xFF	; 255
    7318:	3f 4f       	sbci	r19, 0xFF	; 255
    731a:	3d 87       	std	Y+13, r19	; 0x0d
    731c:	2c 87       	std	Y+12, r18	; 0x0c
    731e:	ea 85       	ldd	r30, Y+10	; 0x0a
    7320:	fb 85       	ldd	r31, Y+11	; 0x0b
    7322:	00 82       	st	Z, r0
    7324:	2a 85       	ldd	r18, Y+10	; 0x0a
    7326:	3b 85       	ldd	r19, Y+11	; 0x0b
    7328:	2f 5f       	subi	r18, 0xFF	; 255
    732a:	3f 4f       	sbci	r19, 0xFF	; 255
    732c:	3b 87       	std	Y+11, r19	; 0x0b
    732e:	2a 87       	std	Y+10, r18	; 0x0a
    7330:	3e 85       	ldd	r19, Y+14	; 0x0e
    7332:	31 50       	subi	r19, 0x01	; 1
    7334:	3e 87       	std	Y+14, r19	; 0x0e
    7336:	8e 85       	ldd	r24, Y+14	; 0x0e
    7338:	88 23       	and	r24, r24
    733a:	41 f7       	brne	.-48     	; 0x730c <main+0x4e>

	while(1)
	{
		if(Flag==0)
    733c:	80 91 02 02 	lds	r24, 0x0202
    7340:	88 23       	and	r24, r24
    7342:	c1 f4       	brne	.+48     	; 0x7374 <main+0xb6>
		{
			LCD_DisplayStringXY(0,0,"enter Your Choice:");
    7344:	23 e7       	ldi	r18, 0x73	; 115
    7346:	30 e0       	ldi	r19, 0x00	; 0
    7348:	80 e0       	ldi	r24, 0x00	; 0
    734a:	60 e0       	ldi	r22, 0x00	; 0
    734c:	a9 01       	movw	r20, r18
    734e:	0e 94 6c 31 	call	0x62d8	; 0x62d8 <LCD_DisplayStringXY>
			LCD_DisplayStringXY(1,0,"1.Watch               ");
    7352:	26 e8       	ldi	r18, 0x86	; 134
    7354:	30 e0       	ldi	r19, 0x00	; 0
    7356:	81 e0       	ldi	r24, 0x01	; 1
    7358:	60 e0       	ldi	r22, 0x00	; 0
    735a:	a9 01       	movw	r20, r18
    735c:	0e 94 6c 31 	call	0x62d8	; 0x62d8 <LCD_DisplayStringXY>
			LCD_DisplayStringXY(2,0,"2.Alarm               ");
    7360:	2d e9       	ldi	r18, 0x9D	; 157
    7362:	30 e0       	ldi	r19, 0x00	; 0
    7364:	82 e0       	ldi	r24, 0x02	; 2
    7366:	60 e0       	ldi	r22, 0x00	; 0
    7368:	a9 01       	movw	r20, r18
    736a:	0e 94 6c 31 	call	0x62d8	; 0x62d8 <LCD_DisplayStringXY>
			Flag=1;
    736e:	81 e0       	ldi	r24, 0x01	; 1
    7370:	80 93 02 02 	sts	0x0202, r24
		}
		Keypad_enuKeypadGetPressed(&key);
    7374:	83 e0       	ldi	r24, 0x03	; 3
    7376:	92 e0       	ldi	r25, 0x02	; 2
    7378:	0e 94 91 36 	call	0x6d22	; 0x6d22 <Keypad_enuKeypadGetPressed>

		switch(key)
    737c:	80 91 03 02 	lds	r24, 0x0203
    7380:	e8 2f       	mov	r30, r24
    7382:	f0 e0       	ldi	r31, 0x00	; 0
    7384:	f9 87       	std	Y+9, r31	; 0x09
    7386:	e8 87       	std	Y+8, r30	; 0x08
    7388:	28 85       	ldd	r18, Y+8	; 0x08
    738a:	39 85       	ldd	r19, Y+9	; 0x09
    738c:	21 33       	cpi	r18, 0x31	; 49
    738e:	31 05       	cpc	r19, r1
    7390:	61 f0       	breq	.+24     	; 0x73aa <main+0xec>
    7392:	88 85       	ldd	r24, Y+8	; 0x08
    7394:	99 85       	ldd	r25, Y+9	; 0x09
    7396:	82 33       	cpi	r24, 0x32	; 50
    7398:	91 05       	cpc	r25, r1
    739a:	d9 f0       	breq	.+54     	; 0x73d2 <main+0x114>
    739c:	e8 85       	ldd	r30, Y+8	; 0x08
    739e:	f9 85       	ldd	r31, Y+9	; 0x09
    73a0:	e3 32       	cpi	r30, 0x23	; 35
    73a2:	f1 05       	cpc	r31, r1
    73a4:	09 f4       	brne	.+2      	; 0x73a8 <main+0xea>
    73a6:	4e c0       	rjmp	.+156    	; 0x7444 <main+0x186>
    73a8:	c9 cf       	rjmp	.-110    	; 0x733c <main+0x7e>
		{
		case '1':

			LCD_vidClrDisplay();
    73aa:	0e 94 6f 30 	call	0x60de	; 0x60de <LCD_vidClrDisplay>
			LCD_DisplayStringXY(0,0,"HH::MM::SS");
    73ae:	24 eb       	ldi	r18, 0xB4	; 180
    73b0:	30 e0       	ldi	r19, 0x00	; 0
    73b2:	80 e0       	ldi	r24, 0x00	; 0
    73b4:	60 e0       	ldi	r22, 0x00	; 0
    73b6:	a9 01       	movw	r20, r18
    73b8:	0e 94 6c 31 	call	0x62d8	; 0x62d8 <LCD_DisplayStringXY>
			Timer_enuTimer_Init(&Config);
    73bc:	ce 01       	movw	r24, r28
    73be:	01 96       	adiw	r24, 0x01	; 1
    73c0:	0e 94 07 13 	call	0x260e	; 0x260e <Timer_enuTimer_Init>
			Timer1_CallBack(Watch);
    73c4:	8a eb       	ldi	r24, 0xBA	; 186
    73c6:	97 e3       	ldi	r25, 0x37	; 55
    73c8:	0e 94 1d 18 	call	0x303a	; 0x303a <Timer1_CallBack>
			Timer_Start();
    73cc:	0e 94 49 18 	call	0x3092	; 0x3092 <Timer_Start>
    73d0:	b5 cf       	rjmp	.-150    	; 0x733c <main+0x7e>
			break;
		case '2':
			LCD_vidClrDisplay();
    73d2:	0e 94 6f 30 	call	0x60de	; 0x60de <LCD_vidClrDisplay>
			LCD_DisplayStringXY(0,0,"Enter Sec:           ");
    73d6:	2f eb       	ldi	r18, 0xBF	; 191
    73d8:	30 e0       	ldi	r19, 0x00	; 0
    73da:	80 e0       	ldi	r24, 0x00	; 0
    73dc:	60 e0       	ldi	r22, 0x00	; 0
    73de:	a9 01       	movw	r20, r18
    73e0:	0e 94 6c 31 	call	0x62d8	; 0x62d8 <LCD_DisplayStringXY>
			key=0;
    73e4:	10 92 03 02 	sts	0x0203, r1
    73e8:	04 c0       	rjmp	.+8      	; 0x73f2 <main+0x134>
			while(key == 0){
				Keypad_enuKeypadGetPressed(&key);
    73ea:	83 e0       	ldi	r24, 0x03	; 3
    73ec:	92 e0       	ldi	r25, 0x02	; 2
    73ee:	0e 94 91 36 	call	0x6d22	; 0x6d22 <Keypad_enuKeypadGetPressed>
			break;
		case '2':
			LCD_vidClrDisplay();
			LCD_DisplayStringXY(0,0,"Enter Sec:           ");
			key=0;
			while(key == 0){
    73f2:	80 91 03 02 	lds	r24, 0x0203
    73f6:	88 23       	and	r24, r24
    73f8:	c1 f3       	breq	.-16     	; 0x73ea <main+0x12c>
				Keypad_enuKeypadGetPressed(&key);
			}
			Alarm=key - '0';
    73fa:	80 91 03 02 	lds	r24, 0x0203
    73fe:	80 53       	subi	r24, 0x30	; 48
    7400:	80 93 04 02 	sts	0x0204, r24
			Lcd_VidDisplayNumberXY(0,10,Alarm);
    7404:	80 91 04 02 	lds	r24, 0x0204
    7408:	68 2e       	mov	r6, r24
    740a:	77 24       	eor	r7, r7
    740c:	88 24       	eor	r8, r8
    740e:	99 24       	eor	r9, r9
    7410:	aa 24       	eor	r10, r10
    7412:	bb 24       	eor	r11, r11
    7414:	65 01       	movw	r12, r10
    7416:	80 e0       	ldi	r24, 0x00	; 0
    7418:	6a e0       	ldi	r22, 0x0A	; 10
    741a:	e6 2c       	mov	r14, r6
    741c:	f7 2c       	mov	r15, r7
    741e:	08 2d       	mov	r16, r8
    7420:	19 2d       	mov	r17, r9
    7422:	2a 2d       	mov	r18, r10
    7424:	3b 2d       	mov	r19, r11
    7426:	4c 2d       	mov	r20, r12
    7428:	5d 2d       	mov	r21, r13
    742a:	0e 94 9e 31 	call	0x633c	; 0x633c <Lcd_VidDisplayNumberXY>
			Timer_enuTimer_Init(&Config);
    742e:	ce 01       	movw	r24, r28
    7430:	01 96       	adiw	r24, 0x01	; 1
    7432:	0e 94 07 13 	call	0x260e	; 0x260e <Timer_enuTimer_Init>
			Timer1_CallBack(Alarm_Func);
    7436:	83 e9       	ldi	r24, 0x93	; 147
    7438:	98 e3       	ldi	r25, 0x38	; 56
    743a:	0e 94 1d 18 	call	0x303a	; 0x303a <Timer1_CallBack>
			Timer_Start();
    743e:	0e 94 49 18 	call	0x3092	; 0x3092 <Timer_Start>
    7442:	7c cf       	rjmp	.-264    	; 0x733c <main+0x7e>



			break;
		case '#':
			Flag=0;
    7444:	10 92 02 02 	sts	0x0202, r1
			H2=0;
    7448:	10 92 01 02 	sts	0x0201, r1
			H1=0;
    744c:	10 92 00 02 	sts	0x0200, r1
			Min2=0;
    7450:	10 92 ff 01 	sts	0x01FF, r1
			Min1=0;
    7454:	10 92 fe 01 	sts	0x01FE, r1
			Sec2=0;
    7458:	10 92 fd 01 	sts	0x01FD, r1
			Sec1=0;
    745c:	10 92 fc 01 	sts	0x01FC, r1
			Timer_DeInit(Timer1);
    7460:	81 e0       	ldi	r24, 0x01	; 1
    7462:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <Timer_DeInit>
    7466:	6a cf       	rjmp	.-300    	; 0x733c <main+0x7e>

00007468 <__mulsi3>:
    7468:	62 9f       	mul	r22, r18
    746a:	d0 01       	movw	r26, r0
    746c:	73 9f       	mul	r23, r19
    746e:	f0 01       	movw	r30, r0
    7470:	82 9f       	mul	r24, r18
    7472:	e0 0d       	add	r30, r0
    7474:	f1 1d       	adc	r31, r1
    7476:	64 9f       	mul	r22, r20
    7478:	e0 0d       	add	r30, r0
    747a:	f1 1d       	adc	r31, r1
    747c:	92 9f       	mul	r25, r18
    747e:	f0 0d       	add	r31, r0
    7480:	83 9f       	mul	r24, r19
    7482:	f0 0d       	add	r31, r0
    7484:	74 9f       	mul	r23, r20
    7486:	f0 0d       	add	r31, r0
    7488:	65 9f       	mul	r22, r21
    748a:	f0 0d       	add	r31, r0
    748c:	99 27       	eor	r25, r25
    748e:	72 9f       	mul	r23, r18
    7490:	b0 0d       	add	r27, r0
    7492:	e1 1d       	adc	r30, r1
    7494:	f9 1f       	adc	r31, r25
    7496:	63 9f       	mul	r22, r19
    7498:	b0 0d       	add	r27, r0
    749a:	e1 1d       	adc	r30, r1
    749c:	f9 1f       	adc	r31, r25
    749e:	bd 01       	movw	r22, r26
    74a0:	cf 01       	movw	r24, r30
    74a2:	11 24       	eor	r1, r1
    74a4:	08 95       	ret

000074a6 <__udivmodsi4>:
    74a6:	a1 e2       	ldi	r26, 0x21	; 33
    74a8:	1a 2e       	mov	r1, r26
    74aa:	aa 1b       	sub	r26, r26
    74ac:	bb 1b       	sub	r27, r27
    74ae:	fd 01       	movw	r30, r26
    74b0:	0d c0       	rjmp	.+26     	; 0x74cc <__udivmodsi4_ep>

000074b2 <__udivmodsi4_loop>:
    74b2:	aa 1f       	adc	r26, r26
    74b4:	bb 1f       	adc	r27, r27
    74b6:	ee 1f       	adc	r30, r30
    74b8:	ff 1f       	adc	r31, r31
    74ba:	a2 17       	cp	r26, r18
    74bc:	b3 07       	cpc	r27, r19
    74be:	e4 07       	cpc	r30, r20
    74c0:	f5 07       	cpc	r31, r21
    74c2:	20 f0       	brcs	.+8      	; 0x74cc <__udivmodsi4_ep>
    74c4:	a2 1b       	sub	r26, r18
    74c6:	b3 0b       	sbc	r27, r19
    74c8:	e4 0b       	sbc	r30, r20
    74ca:	f5 0b       	sbc	r31, r21

000074cc <__udivmodsi4_ep>:
    74cc:	66 1f       	adc	r22, r22
    74ce:	77 1f       	adc	r23, r23
    74d0:	88 1f       	adc	r24, r24
    74d2:	99 1f       	adc	r25, r25
    74d4:	1a 94       	dec	r1
    74d6:	69 f7       	brne	.-38     	; 0x74b2 <__udivmodsi4_loop>
    74d8:	60 95       	com	r22
    74da:	70 95       	com	r23
    74dc:	80 95       	com	r24
    74de:	90 95       	com	r25
    74e0:	9b 01       	movw	r18, r22
    74e2:	ac 01       	movw	r20, r24
    74e4:	bd 01       	movw	r22, r26
    74e6:	cf 01       	movw	r24, r30
    74e8:	08 95       	ret

000074ea <__prologue_saves__>:
    74ea:	2f 92       	push	r2
    74ec:	3f 92       	push	r3
    74ee:	4f 92       	push	r4
    74f0:	5f 92       	push	r5
    74f2:	6f 92       	push	r6
    74f4:	7f 92       	push	r7
    74f6:	8f 92       	push	r8
    74f8:	9f 92       	push	r9
    74fa:	af 92       	push	r10
    74fc:	bf 92       	push	r11
    74fe:	cf 92       	push	r12
    7500:	df 92       	push	r13
    7502:	ef 92       	push	r14
    7504:	ff 92       	push	r15
    7506:	0f 93       	push	r16
    7508:	1f 93       	push	r17
    750a:	cf 93       	push	r28
    750c:	df 93       	push	r29
    750e:	cd b7       	in	r28, 0x3d	; 61
    7510:	de b7       	in	r29, 0x3e	; 62
    7512:	ca 1b       	sub	r28, r26
    7514:	db 0b       	sbc	r29, r27
    7516:	0f b6       	in	r0, 0x3f	; 63
    7518:	f8 94       	cli
    751a:	de bf       	out	0x3e, r29	; 62
    751c:	0f be       	out	0x3f, r0	; 63
    751e:	cd bf       	out	0x3d, r28	; 61
    7520:	09 94       	ijmp

00007522 <__epilogue_restores__>:
    7522:	2a 88       	ldd	r2, Y+18	; 0x12
    7524:	39 88       	ldd	r3, Y+17	; 0x11
    7526:	48 88       	ldd	r4, Y+16	; 0x10
    7528:	5f 84       	ldd	r5, Y+15	; 0x0f
    752a:	6e 84       	ldd	r6, Y+14	; 0x0e
    752c:	7d 84       	ldd	r7, Y+13	; 0x0d
    752e:	8c 84       	ldd	r8, Y+12	; 0x0c
    7530:	9b 84       	ldd	r9, Y+11	; 0x0b
    7532:	aa 84       	ldd	r10, Y+10	; 0x0a
    7534:	b9 84       	ldd	r11, Y+9	; 0x09
    7536:	c8 84       	ldd	r12, Y+8	; 0x08
    7538:	df 80       	ldd	r13, Y+7	; 0x07
    753a:	ee 80       	ldd	r14, Y+6	; 0x06
    753c:	fd 80       	ldd	r15, Y+5	; 0x05
    753e:	0c 81       	ldd	r16, Y+4	; 0x04
    7540:	1b 81       	ldd	r17, Y+3	; 0x03
    7542:	aa 81       	ldd	r26, Y+2	; 0x02
    7544:	b9 81       	ldd	r27, Y+1	; 0x01
    7546:	ce 0f       	add	r28, r30
    7548:	d1 1d       	adc	r29, r1
    754a:	0f b6       	in	r0, 0x3f	; 63
    754c:	f8 94       	cli
    754e:	de bf       	out	0x3e, r29	; 62
    7550:	0f be       	out	0x3f, r0	; 63
    7552:	cd bf       	out	0x3d, r28	; 61
    7554:	ed 01       	movw	r28, r26
    7556:	08 95       	ret

00007558 <_exit>:
    7558:	f8 94       	cli

0000755a <__stop_program>:
    755a:	ff cf       	rjmp	.-2      	; 0x755a <__stop_program>
