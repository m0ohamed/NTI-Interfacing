
7Segments_IRQs.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002b00  00002b94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800068  00800068  00002b9c  2**0
                  ALLOC
  3 .stab         000022c8  00000000  00000000  00002b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012dd  00000000  00000000  00004e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006141  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006281  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000063f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000803a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008f25  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a0c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a88f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <__vector_1>
       8:	0c 94 a9 10 	jmp	0x2152	; 0x2152 <__vector_2>
       c:	0c 94 d6 10 	jmp	0x21ac	; 0x21ac <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ab 37       	cpi	r26, 0x7B	; 123
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e0 e0       	ldi	r30, 0x00	; 0
      78:	fb e2       	ldi	r31, 0x2B	; 43
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 34 13 	call	0x2668	; 0x2668 <main>
      8a:	0c 94 7e 15 	jmp	0x2afc	; 0x2afc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 47 15 	jmp	0x2a8e	; 0x2a8e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 63 15 	jmp	0x2ac6	; 0x2ac6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 53 15 	jmp	0x2aa6	; 0x2aa6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6f 15 	jmp	0x2ade	; 0x2ade <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 53 15 	jmp	0x2aa6	; 0x2aa6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6f 15 	jmp	0x2ade	; 0x2ade <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 47 15 	jmp	0x2a8e	; 0x2a8e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 63 15 	jmp	0x2ac6	; 0x2ac6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 53 15 	jmp	0x2aa6	; 0x2aa6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6f 15 	jmp	0x2ade	; 0x2ade <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 53 15 	jmp	0x2aa6	; 0x2aa6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6f 15 	jmp	0x2ade	; 0x2ade <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 53 15 	jmp	0x2aa6	; 0x2aa6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6f 15 	jmp	0x2ade	; 0x2ade <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 57 15 	jmp	0x2aae	; 0x2aae <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Dio_enuWriteChannel>:
 * Parameters(IN)  : 1.Copy_u8ChannelId -->channel number
 *                   2.Copy_u8Level     --> High or LOW
 * Parameters(OUT) : value of enum type PORT_tenuErrorStatus
 *******************************************************************************************/
Dio_tenuErrorStatus Dio_enuWriteChannel(DioPinType Copy_u8ChannelId,DioPinType Copy_u8Level)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	27 97       	sbiw	r28, 0x07	; 7
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8c 83       	std	Y+4, r24	; 0x04
     b5c:	6d 83       	std	Y+5, r22	; 0x05
	uint8 ErrorStatus=Dio_enuOK;
     b5e:	1b 82       	std	Y+3, r1	; 0x03
	uint8 PortIndex=0,PinIndex=0;
     b60:	1a 82       	std	Y+2, r1	; 0x02
     b62:	19 82       	std	Y+1, r1	; 0x01
	PortIndex=(Copy_u8ChannelId/8);
     b64:	8c 81       	ldd	r24, Y+4	; 0x04
     b66:	86 95       	lsr	r24
     b68:	86 95       	lsr	r24
     b6a:	86 95       	lsr	r24
     b6c:	8a 83       	std	Y+2, r24	; 0x02
	PinIndex=Copy_u8ChannelId%8;
     b6e:	8c 81       	ldd	r24, Y+4	; 0x04
     b70:	87 70       	andi	r24, 0x07	; 7
     b72:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8ChannelId>DIO_NUMBER_OF_PINS)
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	81 32       	cpi	r24, 0x21	; 33
     b78:	10 f0       	brcs	.+4      	; 0xb7e <Dio_enuWriteChannel+0x38>
	{
		ErrorStatus=Dio_enuPinError;
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	8b 83       	std	Y+3, r24	; 0x03
	}
	if(PortIndex>DIO_NUMBER_OF_PORTS)
     b7e:	8a 81       	ldd	r24, Y+2	; 0x02
     b80:	85 30       	cpi	r24, 0x05	; 5
     b82:	10 f0       	brcs	.+4      	; 0xb88 <Dio_enuWriteChannel+0x42>
	{
		ErrorStatus=Dio_enuPortError;
     b84:	82 e0       	ldi	r24, 0x02	; 2
     b86:	8b 83       	std	Y+3, r24	; 0x03
	}
	if(Copy_u8Level !=DIO_LOGIC_HIGH ||Copy_u8Level !=DIO_LOGIC_LOW )
     b88:	8d 81       	ldd	r24, Y+5	; 0x05
     b8a:	81 30       	cpi	r24, 0x01	; 1
     b8c:	19 f4       	brne	.+6      	; 0xb94 <Dio_enuWriteChannel+0x4e>
     b8e:	8d 81       	ldd	r24, Y+5	; 0x05
     b90:	88 23       	and	r24, r24
     b92:	11 f0       	breq	.+4      	; 0xb98 <Dio_enuWriteChannel+0x52>
	{
		ErrorStatus=DIO_enuDirectionError;
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8b 83       	std	Y+3, r24	; 0x03
	}
	switch(PortIndex)
     b98:	8a 81       	ldd	r24, Y+2	; 0x02
     b9a:	28 2f       	mov	r18, r24
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	3f 83       	std	Y+7, r19	; 0x07
     ba0:	2e 83       	std	Y+6, r18	; 0x06
     ba2:	4e 81       	ldd	r20, Y+6	; 0x06
     ba4:	5f 81       	ldd	r21, Y+7	; 0x07
     ba6:	41 30       	cpi	r20, 0x01	; 1
     ba8:	51 05       	cpc	r21, r1
     baa:	09 f4       	brne	.+2      	; 0xbae <Dio_enuWriteChannel+0x68>
     bac:	67 c0       	rjmp	.+206    	; 0xc7c <Dio_enuWriteChannel+0x136>
     bae:	8e 81       	ldd	r24, Y+6	; 0x06
     bb0:	9f 81       	ldd	r25, Y+7	; 0x07
     bb2:	82 30       	cpi	r24, 0x02	; 2
     bb4:	91 05       	cpc	r25, r1
     bb6:	34 f4       	brge	.+12     	; 0xbc4 <Dio_enuWriteChannel+0x7e>
     bb8:	2e 81       	ldd	r18, Y+6	; 0x06
     bba:	3f 81       	ldd	r19, Y+7	; 0x07
     bbc:	21 15       	cp	r18, r1
     bbe:	31 05       	cpc	r19, r1
     bc0:	71 f0       	breq	.+28     	; 0xbde <Dio_enuWriteChannel+0x98>
     bc2:	47 c1       	rjmp	.+654    	; 0xe52 <Dio_enuWriteChannel+0x30c>
     bc4:	4e 81       	ldd	r20, Y+6	; 0x06
     bc6:	5f 81       	ldd	r21, Y+7	; 0x07
     bc8:	42 30       	cpi	r20, 0x02	; 2
     bca:	51 05       	cpc	r21, r1
     bcc:	09 f4       	brne	.+2      	; 0xbd0 <Dio_enuWriteChannel+0x8a>
     bce:	a5 c0       	rjmp	.+330    	; 0xd1a <Dio_enuWriteChannel+0x1d4>
     bd0:	8e 81       	ldd	r24, Y+6	; 0x06
     bd2:	9f 81       	ldd	r25, Y+7	; 0x07
     bd4:	83 30       	cpi	r24, 0x03	; 3
     bd6:	91 05       	cpc	r25, r1
     bd8:	09 f4       	brne	.+2      	; 0xbdc <Dio_enuWriteChannel+0x96>
     bda:	ee c0       	rjmp	.+476    	; 0xdb8 <Dio_enuWriteChannel+0x272>
     bdc:	3a c1       	rjmp	.+628    	; 0xe52 <Dio_enuWriteChannel+0x30c>
	{
	case Dio_PORTA:
		if(GET_BIT(DDRA,PinIndex)==0)
     bde:	ea e3       	ldi	r30, 0x3A	; 58
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	48 2f       	mov	r20, r24
     be6:	50 e0       	ldi	r21, 0x00	; 0
     be8:	89 81       	ldd	r24, Y+1	; 0x01
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <Dio_enuWriteChannel+0xb2>
     bf4:	88 0f       	add	r24, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	2a 95       	dec	r18
     bfa:	e2 f7       	brpl	.-8      	; 0xbf4 <Dio_enuWriteChannel+0xae>
     bfc:	9a 01       	movw	r18, r20
     bfe:	28 23       	and	r18, r24
     c00:	39 23       	and	r19, r25
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	88 2f       	mov	r24, r24
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	a9 01       	movw	r20, r18
     c0a:	02 c0       	rjmp	.+4      	; 0xc10 <Dio_enuWriteChannel+0xca>
     c0c:	55 95       	asr	r21
     c0e:	47 95       	ror	r20
     c10:	8a 95       	dec	r24
     c12:	e2 f7       	brpl	.-8      	; 0xc0c <Dio_enuWriteChannel+0xc6>
     c14:	ca 01       	movw	r24, r20
     c16:	00 97       	sbiw	r24, 0x00	; 0
     c18:	11 f4       	brne	.+4      	; 0xc1e <Dio_enuWriteChannel+0xd8>
			ErrorStatus=DIO_enuDirectionError;
     c1a:	83 e0       	ldi	r24, 0x03	; 3
     c1c:	8b 83       	std	Y+3, r24	; 0x03

		if(Copy_u8Level==DIO_LOGIC_HIGH)
     c1e:	8d 81       	ldd	r24, Y+5	; 0x05
     c20:	81 30       	cpi	r24, 0x01	; 1
     c22:	99 f4       	brne	.+38     	; 0xc4a <Dio_enuWriteChannel+0x104>
			SET_BIT(PORTA,Copy_u8ChannelId);
     c24:	ab e3       	ldi	r26, 0x3B	; 59
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	eb e3       	ldi	r30, 0x3B	; 59
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	48 2f       	mov	r20, r24
     c30:	8c 81       	ldd	r24, Y+4	; 0x04
     c32:	28 2f       	mov	r18, r24
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	02 2e       	mov	r0, r18
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <Dio_enuWriteChannel+0xfc>
     c3e:	88 0f       	add	r24, r24
     c40:	99 1f       	adc	r25, r25
     c42:	0a 94       	dec	r0
     c44:	e2 f7       	brpl	.-8      	; 0xc3e <Dio_enuWriteChannel+0xf8>
     c46:	84 2b       	or	r24, r20
     c48:	8c 93       	st	X, r24

		if(Copy_u8Level==DIO_LOGIC_LOW)
     c4a:	8d 81       	ldd	r24, Y+5	; 0x05
     c4c:	88 23       	and	r24, r24
     c4e:	09 f0       	breq	.+2      	; 0xc52 <Dio_enuWriteChannel+0x10c>
     c50:	00 c1       	rjmp	.+512    	; 0xe52 <Dio_enuWriteChannel+0x30c>
			CLEAR_BIT(PORTA,Copy_u8ChannelId);
     c52:	ab e3       	ldi	r26, 0x3B	; 59
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	eb e3       	ldi	r30, 0x3B	; 59
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	48 2f       	mov	r20, r24
     c5e:	8c 81       	ldd	r24, Y+4	; 0x04
     c60:	28 2f       	mov	r18, r24
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	02 2e       	mov	r0, r18
     c6a:	02 c0       	rjmp	.+4      	; 0xc70 <Dio_enuWriteChannel+0x12a>
     c6c:	88 0f       	add	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	0a 94       	dec	r0
     c72:	e2 f7       	brpl	.-8      	; 0xc6c <Dio_enuWriteChannel+0x126>
     c74:	80 95       	com	r24
     c76:	84 23       	and	r24, r20
     c78:	8c 93       	st	X, r24
     c7a:	eb c0       	rjmp	.+470    	; 0xe52 <Dio_enuWriteChannel+0x30c>
		break;
	case Dio_PORTB:
		if(GET_BIT(DDRB,PinIndex)==0)
     c7c:	e7 e3       	ldi	r30, 0x37	; 55
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	48 2f       	mov	r20, r24
     c84:	50 e0       	ldi	r21, 0x00	; 0
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	28 2f       	mov	r18, r24
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <Dio_enuWriteChannel+0x150>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	2a 95       	dec	r18
     c98:	e2 f7       	brpl	.-8      	; 0xc92 <Dio_enuWriteChannel+0x14c>
     c9a:	9a 01       	movw	r18, r20
     c9c:	28 23       	and	r18, r24
     c9e:	39 23       	and	r19, r25
     ca0:	89 81       	ldd	r24, Y+1	; 0x01
     ca2:	88 2f       	mov	r24, r24
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	a9 01       	movw	r20, r18
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <Dio_enuWriteChannel+0x168>
     caa:	55 95       	asr	r21
     cac:	47 95       	ror	r20
     cae:	8a 95       	dec	r24
     cb0:	e2 f7       	brpl	.-8      	; 0xcaa <Dio_enuWriteChannel+0x164>
     cb2:	ca 01       	movw	r24, r20
     cb4:	00 97       	sbiw	r24, 0x00	; 0
     cb6:	11 f4       	brne	.+4      	; 0xcbc <Dio_enuWriteChannel+0x176>
			ErrorStatus=DIO_enuDirectionError;
     cb8:	83 e0       	ldi	r24, 0x03	; 3
     cba:	8b 83       	std	Y+3, r24	; 0x03
		if(Copy_u8Level==DIO_LOGIC_HIGH)
     cbc:	8d 81       	ldd	r24, Y+5	; 0x05
     cbe:	81 30       	cpi	r24, 0x01	; 1
     cc0:	99 f4       	brne	.+38     	; 0xce8 <Dio_enuWriteChannel+0x1a2>
			SET_BIT(PORTB,Copy_u8ChannelId);
     cc2:	a8 e3       	ldi	r26, 0x38	; 56
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e8 e3       	ldi	r30, 0x38	; 56
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	48 2f       	mov	r20, r24
     cce:	8c 81       	ldd	r24, Y+4	; 0x04
     cd0:	28 2f       	mov	r18, r24
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	02 2e       	mov	r0, r18
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <Dio_enuWriteChannel+0x19a>
     cdc:	88 0f       	add	r24, r24
     cde:	99 1f       	adc	r25, r25
     ce0:	0a 94       	dec	r0
     ce2:	e2 f7       	brpl	.-8      	; 0xcdc <Dio_enuWriteChannel+0x196>
     ce4:	84 2b       	or	r24, r20
     ce6:	8c 93       	st	X, r24
		if(Copy_u8Level==DIO_LOGIC_LOW)
     ce8:	8d 81       	ldd	r24, Y+5	; 0x05
     cea:	88 23       	and	r24, r24
     cec:	09 f0       	breq	.+2      	; 0xcf0 <Dio_enuWriteChannel+0x1aa>
     cee:	b1 c0       	rjmp	.+354    	; 0xe52 <Dio_enuWriteChannel+0x30c>
			CLEAR_BIT(PORTB,Copy_u8ChannelId);
     cf0:	a8 e3       	ldi	r26, 0x38	; 56
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	e8 e3       	ldi	r30, 0x38	; 56
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	48 2f       	mov	r20, r24
     cfc:	8c 81       	ldd	r24, Y+4	; 0x04
     cfe:	28 2f       	mov	r18, r24
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	02 2e       	mov	r0, r18
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <Dio_enuWriteChannel+0x1c8>
     d0a:	88 0f       	add	r24, r24
     d0c:	99 1f       	adc	r25, r25
     d0e:	0a 94       	dec	r0
     d10:	e2 f7       	brpl	.-8      	; 0xd0a <Dio_enuWriteChannel+0x1c4>
     d12:	80 95       	com	r24
     d14:	84 23       	and	r24, r20
     d16:	8c 93       	st	X, r24
     d18:	9c c0       	rjmp	.+312    	; 0xe52 <Dio_enuWriteChannel+0x30c>
		break;
	case Dio_PORTC:
		if(GET_BIT(DDRC,PinIndex)==0)
     d1a:	e4 e3       	ldi	r30, 0x34	; 52
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	48 2f       	mov	r20, r24
     d22:	50 e0       	ldi	r21, 0x00	; 0
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	28 2f       	mov	r18, r24
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <Dio_enuWriteChannel+0x1ee>
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	2a 95       	dec	r18
     d36:	e2 f7       	brpl	.-8      	; 0xd30 <Dio_enuWriteChannel+0x1ea>
     d38:	9a 01       	movw	r18, r20
     d3a:	28 23       	and	r18, r24
     d3c:	39 23       	and	r19, r25
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	88 2f       	mov	r24, r24
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	a9 01       	movw	r20, r18
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <Dio_enuWriteChannel+0x206>
     d48:	55 95       	asr	r21
     d4a:	47 95       	ror	r20
     d4c:	8a 95       	dec	r24
     d4e:	e2 f7       	brpl	.-8      	; 0xd48 <Dio_enuWriteChannel+0x202>
     d50:	ca 01       	movw	r24, r20
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	11 f4       	brne	.+4      	; 0xd5a <Dio_enuWriteChannel+0x214>
			ErrorStatus=DIO_enuDirectionError;
     d56:	83 e0       	ldi	r24, 0x03	; 3
     d58:	8b 83       	std	Y+3, r24	; 0x03
		if(Copy_u8Level==DIO_LOGIC_HIGH)
     d5a:	8d 81       	ldd	r24, Y+5	; 0x05
     d5c:	81 30       	cpi	r24, 0x01	; 1
     d5e:	99 f4       	brne	.+38     	; 0xd86 <Dio_enuWriteChannel+0x240>
			SET_BIT(PORTC,Copy_u8ChannelId);
     d60:	a5 e3       	ldi	r26, 0x35	; 53
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	e5 e3       	ldi	r30, 0x35	; 53
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	48 2f       	mov	r20, r24
     d6c:	8c 81       	ldd	r24, Y+4	; 0x04
     d6e:	28 2f       	mov	r18, r24
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	02 2e       	mov	r0, r18
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <Dio_enuWriteChannel+0x238>
     d7a:	88 0f       	add	r24, r24
     d7c:	99 1f       	adc	r25, r25
     d7e:	0a 94       	dec	r0
     d80:	e2 f7       	brpl	.-8      	; 0xd7a <Dio_enuWriteChannel+0x234>
     d82:	84 2b       	or	r24, r20
     d84:	8c 93       	st	X, r24
		if(Copy_u8Level==DIO_LOGIC_LOW)
     d86:	8d 81       	ldd	r24, Y+5	; 0x05
     d88:	88 23       	and	r24, r24
     d8a:	09 f0       	breq	.+2      	; 0xd8e <Dio_enuWriteChannel+0x248>
     d8c:	62 c0       	rjmp	.+196    	; 0xe52 <Dio_enuWriteChannel+0x30c>
			CLEAR_BIT(PORTC,Copy_u8ChannelId);
     d8e:	a5 e3       	ldi	r26, 0x35	; 53
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e5 e3       	ldi	r30, 0x35	; 53
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	48 2f       	mov	r20, r24
     d9a:	8c 81       	ldd	r24, Y+4	; 0x04
     d9c:	28 2f       	mov	r18, r24
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	02 2e       	mov	r0, r18
     da6:	02 c0       	rjmp	.+4      	; 0xdac <Dio_enuWriteChannel+0x266>
     da8:	88 0f       	add	r24, r24
     daa:	99 1f       	adc	r25, r25
     dac:	0a 94       	dec	r0
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <Dio_enuWriteChannel+0x262>
     db0:	80 95       	com	r24
     db2:	84 23       	and	r24, r20
     db4:	8c 93       	st	X, r24
     db6:	4d c0       	rjmp	.+154    	; 0xe52 <Dio_enuWriteChannel+0x30c>
		break;
	case Dio_PORTD:
		if(GET_BIT(DDRD,PinIndex)==0)
     db8:	e1 e3       	ldi	r30, 0x31	; 49
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	48 2f       	mov	r20, r24
     dc0:	50 e0       	ldi	r21, 0x00	; 0
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	28 2f       	mov	r18, r24
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <Dio_enuWriteChannel+0x28c>
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	2a 95       	dec	r18
     dd4:	e2 f7       	brpl	.-8      	; 0xdce <Dio_enuWriteChannel+0x288>
     dd6:	9a 01       	movw	r18, r20
     dd8:	28 23       	and	r18, r24
     dda:	39 23       	and	r19, r25
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
     dde:	88 2f       	mov	r24, r24
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	a9 01       	movw	r20, r18
     de4:	02 c0       	rjmp	.+4      	; 0xdea <Dio_enuWriteChannel+0x2a4>
     de6:	55 95       	asr	r21
     de8:	47 95       	ror	r20
     dea:	8a 95       	dec	r24
     dec:	e2 f7       	brpl	.-8      	; 0xde6 <Dio_enuWriteChannel+0x2a0>
     dee:	ca 01       	movw	r24, r20
     df0:	00 97       	sbiw	r24, 0x00	; 0
     df2:	11 f4       	brne	.+4      	; 0xdf8 <Dio_enuWriteChannel+0x2b2>
			ErrorStatus=DIO_enuDirectionError;
     df4:	83 e0       	ldi	r24, 0x03	; 3
     df6:	8b 83       	std	Y+3, r24	; 0x03
		if(Copy_u8Level==DIO_LOGIC_HIGH)
     df8:	8d 81       	ldd	r24, Y+5	; 0x05
     dfa:	81 30       	cpi	r24, 0x01	; 1
     dfc:	99 f4       	brne	.+38     	; 0xe24 <Dio_enuWriteChannel+0x2de>
			SET_BIT(PORTD,Copy_u8ChannelId);
     dfe:	a2 e3       	ldi	r26, 0x32	; 50
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	e2 e3       	ldi	r30, 0x32	; 50
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	48 2f       	mov	r20, r24
     e0a:	8c 81       	ldd	r24, Y+4	; 0x04
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	02 2e       	mov	r0, r18
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <Dio_enuWriteChannel+0x2d6>
     e18:	88 0f       	add	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	0a 94       	dec	r0
     e1e:	e2 f7       	brpl	.-8      	; 0xe18 <Dio_enuWriteChannel+0x2d2>
     e20:	84 2b       	or	r24, r20
     e22:	8c 93       	st	X, r24
		if(Copy_u8Level==DIO_LOGIC_LOW)
     e24:	8d 81       	ldd	r24, Y+5	; 0x05
     e26:	88 23       	and	r24, r24
     e28:	a1 f4       	brne	.+40     	; 0xe52 <Dio_enuWriteChannel+0x30c>
			CLEAR_BIT(PORTD,Copy_u8ChannelId);
     e2a:	a2 e3       	ldi	r26, 0x32	; 50
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e2 e3       	ldi	r30, 0x32	; 50
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	48 2f       	mov	r20, r24
     e36:	8c 81       	ldd	r24, Y+4	; 0x04
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	02 2e       	mov	r0, r18
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <Dio_enuWriteChannel+0x302>
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	0a 94       	dec	r0
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <Dio_enuWriteChannel+0x2fe>
     e4c:	80 95       	com	r24
     e4e:	84 23       	and	r24, r20
     e50:	8c 93       	st	X, r24
		break;
	}
	return ErrorStatus;
     e52:	8b 81       	ldd	r24, Y+3	; 0x03
}
     e54:	27 96       	adiw	r28, 0x07	; 7
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	f8 94       	cli
     e5a:	de bf       	out	0x3e, r29	; 62
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	cd bf       	out	0x3d, r28	; 61
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <Dio_enuReadChannel>:
 * Parameters(IN)  : 1.Copy_u8ChannelId        -->channel number
 *                   2.Add_pu8ChannelLevel     --> pointer to address of value carry
 * Parameters(OUT) : value of enum type PORT_tenuErrorStatus
 *******************************************************************************************/
Dio_tenuErrorStatus Dio_enuReadChannel(DioPinType Copy_u8ChannelId,pu8 Add_pu8ChannelLevel)
{
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	28 97       	sbiw	r28, 0x08	; 8
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	f8 94       	cli
     e74:	de bf       	out	0x3e, r29	; 62
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	cd bf       	out	0x3d, r28	; 61
     e7a:	8c 83       	std	Y+4, r24	; 0x04
     e7c:	7e 83       	std	Y+6, r23	; 0x06
     e7e:	6d 83       	std	Y+5, r22	; 0x05
	uint8 ErrorStatus=Dio_enuOK;
     e80:	1b 82       	std	Y+3, r1	; 0x03
		uint8 PortIndex=0,PinIndex=0;
     e82:	1a 82       	std	Y+2, r1	; 0x02
     e84:	19 82       	std	Y+1, r1	; 0x01
		PortIndex=(Copy_u8ChannelId/8);
     e86:	8c 81       	ldd	r24, Y+4	; 0x04
     e88:	86 95       	lsr	r24
     e8a:	86 95       	lsr	r24
     e8c:	86 95       	lsr	r24
     e8e:	8a 83       	std	Y+2, r24	; 0x02
		PinIndex=Copy_u8ChannelId%8;
     e90:	8c 81       	ldd	r24, Y+4	; 0x04
     e92:	87 70       	andi	r24, 0x07	; 7
     e94:	89 83       	std	Y+1, r24	; 0x01
		if(Copy_u8ChannelId>DIO_NUMBER_OF_PINS)
     e96:	8c 81       	ldd	r24, Y+4	; 0x04
     e98:	81 32       	cpi	r24, 0x21	; 33
     e9a:	10 f0       	brcs	.+4      	; 0xea0 <Dio_enuReadChannel+0x3a>
		{
			ErrorStatus=Dio_enuPinError;
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	8b 83       	std	Y+3, r24	; 0x03
		}
		if(PortIndex>DIO_NUMBER_OF_PORTS)
     ea0:	8a 81       	ldd	r24, Y+2	; 0x02
     ea2:	85 30       	cpi	r24, 0x05	; 5
     ea4:	10 f0       	brcs	.+4      	; 0xeaa <Dio_enuReadChannel+0x44>
		{
			ErrorStatus=Dio_enuPortError;
     ea6:	82 e0       	ldi	r24, 0x02	; 2
     ea8:	8b 83       	std	Y+3, r24	; 0x03
		}
		if( Add_pu8ChannelLevel ==Null_ptr)
     eaa:	8d 81       	ldd	r24, Y+5	; 0x05
     eac:	9e 81       	ldd	r25, Y+6	; 0x06
     eae:	00 97       	sbiw	r24, 0x00	; 0
     eb0:	11 f4       	brne	.+4      	; 0xeb6 <Dio_enuReadChannel+0x50>
		{
			ErrorStatus=DIO_enuNullPtr;
     eb2:	84 e0       	ldi	r24, 0x04	; 4
     eb4:	8b 83       	std	Y+3, r24	; 0x03
		}
		switch(PortIndex)
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	38 87       	std	Y+8, r19	; 0x08
     ebe:	2f 83       	std	Y+7, r18	; 0x07
     ec0:	4f 81       	ldd	r20, Y+7	; 0x07
     ec2:	58 85       	ldd	r21, Y+8	; 0x08
     ec4:	41 30       	cpi	r20, 0x01	; 1
     ec6:	51 05       	cpc	r21, r1
     ec8:	09 f4       	brne	.+2      	; 0xecc <Dio_enuReadChannel+0x66>
     eca:	5a c0       	rjmp	.+180    	; 0xf80 <Dio_enuReadChannel+0x11a>
     ecc:	8f 81       	ldd	r24, Y+7	; 0x07
     ece:	98 85       	ldd	r25, Y+8	; 0x08
     ed0:	82 30       	cpi	r24, 0x02	; 2
     ed2:	91 05       	cpc	r25, r1
     ed4:	34 f4       	brge	.+12     	; 0xee2 <Dio_enuReadChannel+0x7c>
     ed6:	2f 81       	ldd	r18, Y+7	; 0x07
     ed8:	38 85       	ldd	r19, Y+8	; 0x08
     eda:	21 15       	cp	r18, r1
     edc:	31 05       	cpc	r19, r1
     ede:	71 f0       	breq	.+28     	; 0xefc <Dio_enuReadChannel+0x96>
     ee0:	14 c1       	rjmp	.+552    	; 0x110a <Dio_enuReadChannel+0x2a4>
     ee2:	4f 81       	ldd	r20, Y+7	; 0x07
     ee4:	58 85       	ldd	r21, Y+8	; 0x08
     ee6:	42 30       	cpi	r20, 0x02	; 2
     ee8:	51 05       	cpc	r21, r1
     eea:	09 f4       	brne	.+2      	; 0xeee <Dio_enuReadChannel+0x88>
     eec:	8b c0       	rjmp	.+278    	; 0x1004 <Dio_enuReadChannel+0x19e>
     eee:	8f 81       	ldd	r24, Y+7	; 0x07
     ef0:	98 85       	ldd	r25, Y+8	; 0x08
     ef2:	83 30       	cpi	r24, 0x03	; 3
     ef4:	91 05       	cpc	r25, r1
     ef6:	09 f4       	brne	.+2      	; 0xefa <Dio_enuReadChannel+0x94>
     ef8:	c7 c0       	rjmp	.+398    	; 0x1088 <Dio_enuReadChannel+0x222>
     efa:	07 c1       	rjmp	.+526    	; 0x110a <Dio_enuReadChannel+0x2a4>
		{
		case Dio_PORTA:
			if(GET_BIT(DDRA,PinIndex)==1)
     efc:	ea e3       	ldi	r30, 0x3A	; 58
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	48 2f       	mov	r20, r24
     f04:	50 e0       	ldi	r21, 0x00	; 0
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <Dio_enuReadChannel+0xb0>
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	2a 95       	dec	r18
     f18:	e2 f7       	brpl	.-8      	; 0xf12 <Dio_enuReadChannel+0xac>
     f1a:	9a 01       	movw	r18, r20
     f1c:	28 23       	and	r18, r24
     f1e:	39 23       	and	r19, r25
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	88 2f       	mov	r24, r24
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	a9 01       	movw	r20, r18
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <Dio_enuReadChannel+0xc8>
     f2a:	55 95       	asr	r21
     f2c:	47 95       	ror	r20
     f2e:	8a 95       	dec	r24
     f30:	e2 f7       	brpl	.-8      	; 0xf2a <Dio_enuReadChannel+0xc4>
     f32:	ca 01       	movw	r24, r20
     f34:	81 30       	cpi	r24, 0x01	; 1
     f36:	91 05       	cpc	r25, r1
     f38:	19 f4       	brne	.+6      	; 0xf40 <Dio_enuReadChannel+0xda>
				ErrorStatus=DIO_enuDirectionError;
     f3a:	83 e0       	ldi	r24, 0x03	; 3
     f3c:	8b 83       	std	Y+3, r24	; 0x03
     f3e:	e5 c0       	rjmp	.+458    	; 0x110a <Dio_enuReadChannel+0x2a4>
			else
			*Add_pu8ChannelLevel=GET_BIT(DDRA,PinIndex);
     f40:	ea e3       	ldi	r30, 0x3A	; 58
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	48 2f       	mov	r20, r24
     f48:	50 e0       	ldi	r21, 0x00	; 0
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <Dio_enuReadChannel+0xf4>
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	2a 95       	dec	r18
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <Dio_enuReadChannel+0xf0>
     f5e:	9a 01       	movw	r18, r20
     f60:	28 23       	and	r18, r24
     f62:	39 23       	and	r19, r25
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	88 2f       	mov	r24, r24
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	a9 01       	movw	r20, r18
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <Dio_enuReadChannel+0x10c>
     f6e:	55 95       	asr	r21
     f70:	47 95       	ror	r20
     f72:	8a 95       	dec	r24
     f74:	e2 f7       	brpl	.-8      	; 0xf6e <Dio_enuReadChannel+0x108>
     f76:	ca 01       	movw	r24, r20
     f78:	ed 81       	ldd	r30, Y+5	; 0x05
     f7a:	fe 81       	ldd	r31, Y+6	; 0x06
     f7c:	80 83       	st	Z, r24
     f7e:	c5 c0       	rjmp	.+394    	; 0x110a <Dio_enuReadChannel+0x2a4>

			break;
		case Dio_PORTB:
			if(GET_BIT(DDRB,PinIndex)==1)
     f80:	e7 e3       	ldi	r30, 0x37	; 55
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	48 2f       	mov	r20, r24
     f88:	50 e0       	ldi	r21, 0x00	; 0
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <Dio_enuReadChannel+0x134>
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	2a 95       	dec	r18
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <Dio_enuReadChannel+0x130>
     f9e:	9a 01       	movw	r18, r20
     fa0:	28 23       	and	r18, r24
     fa2:	39 23       	and	r19, r25
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
     fa6:	88 2f       	mov	r24, r24
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	a9 01       	movw	r20, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <Dio_enuReadChannel+0x14c>
     fae:	55 95       	asr	r21
     fb0:	47 95       	ror	r20
     fb2:	8a 95       	dec	r24
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <Dio_enuReadChannel+0x148>
     fb6:	ca 01       	movw	r24, r20
     fb8:	81 30       	cpi	r24, 0x01	; 1
     fba:	91 05       	cpc	r25, r1
     fbc:	19 f4       	brne	.+6      	; 0xfc4 <Dio_enuReadChannel+0x15e>
				ErrorStatus=DIO_enuDirectionError;
     fbe:	83 e0       	ldi	r24, 0x03	; 3
     fc0:	8b 83       	std	Y+3, r24	; 0x03
     fc2:	a3 c0       	rjmp	.+326    	; 0x110a <Dio_enuReadChannel+0x2a4>
			else
			*Add_pu8ChannelLevel=GET_BIT(DDRB,PinIndex);
     fc4:	e7 e3       	ldi	r30, 0x37	; 55
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	48 2f       	mov	r20, r24
     fcc:	50 e0       	ldi	r21, 0x00	; 0
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <Dio_enuReadChannel+0x178>
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	2a 95       	dec	r18
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <Dio_enuReadChannel+0x174>
     fe2:	9a 01       	movw	r18, r20
     fe4:	28 23       	and	r18, r24
     fe6:	39 23       	and	r19, r25
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	88 2f       	mov	r24, r24
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	a9 01       	movw	r20, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <Dio_enuReadChannel+0x190>
     ff2:	55 95       	asr	r21
     ff4:	47 95       	ror	r20
     ff6:	8a 95       	dec	r24
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <Dio_enuReadChannel+0x18c>
     ffa:	ca 01       	movw	r24, r20
     ffc:	ed 81       	ldd	r30, Y+5	; 0x05
     ffe:	fe 81       	ldd	r31, Y+6	; 0x06
    1000:	80 83       	st	Z, r24
    1002:	83 c0       	rjmp	.+262    	; 0x110a <Dio_enuReadChannel+0x2a4>

			break;
		case Dio_PORTC:
			if(GET_BIT(DDRC,PinIndex)==1)
    1004:	e4 e3       	ldi	r30, 0x34	; 52
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	48 2f       	mov	r20, r24
    100c:	50 e0       	ldi	r21, 0x00	; 0
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	02 c0       	rjmp	.+4      	; 0x101e <Dio_enuReadChannel+0x1b8>
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	2a 95       	dec	r18
    1020:	e2 f7       	brpl	.-8      	; 0x101a <Dio_enuReadChannel+0x1b4>
    1022:	9a 01       	movw	r18, r20
    1024:	28 23       	and	r18, r24
    1026:	39 23       	and	r19, r25
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	88 2f       	mov	r24, r24
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	a9 01       	movw	r20, r18
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <Dio_enuReadChannel+0x1d0>
    1032:	55 95       	asr	r21
    1034:	47 95       	ror	r20
    1036:	8a 95       	dec	r24
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <Dio_enuReadChannel+0x1cc>
    103a:	ca 01       	movw	r24, r20
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	91 05       	cpc	r25, r1
    1040:	19 f4       	brne	.+6      	; 0x1048 <Dio_enuReadChannel+0x1e2>
				ErrorStatus=DIO_enuDirectionError;
    1042:	83 e0       	ldi	r24, 0x03	; 3
    1044:	8b 83       	std	Y+3, r24	; 0x03
    1046:	61 c0       	rjmp	.+194    	; 0x110a <Dio_enuReadChannel+0x2a4>
			else
			*Add_pu8ChannelLevel=GET_BIT(DDRC,PinIndex);
    1048:	e4 e3       	ldi	r30, 0x34	; 52
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	48 2f       	mov	r20, r24
    1050:	50 e0       	ldi	r21, 0x00	; 0
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <Dio_enuReadChannel+0x1fc>
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	2a 95       	dec	r18
    1064:	e2 f7       	brpl	.-8      	; 0x105e <Dio_enuReadChannel+0x1f8>
    1066:	9a 01       	movw	r18, r20
    1068:	28 23       	and	r18, r24
    106a:	39 23       	and	r19, r25
    106c:	89 81       	ldd	r24, Y+1	; 0x01
    106e:	88 2f       	mov	r24, r24
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	a9 01       	movw	r20, r18
    1074:	02 c0       	rjmp	.+4      	; 0x107a <Dio_enuReadChannel+0x214>
    1076:	55 95       	asr	r21
    1078:	47 95       	ror	r20
    107a:	8a 95       	dec	r24
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <Dio_enuReadChannel+0x210>
    107e:	ca 01       	movw	r24, r20
    1080:	ed 81       	ldd	r30, Y+5	; 0x05
    1082:	fe 81       	ldd	r31, Y+6	; 0x06
    1084:	80 83       	st	Z, r24
    1086:	41 c0       	rjmp	.+130    	; 0x110a <Dio_enuReadChannel+0x2a4>

			break;
		case Dio_PORTD:
			if(GET_BIT(DDRD,PinIndex)==1)
    1088:	e1 e3       	ldi	r30, 0x31	; 49
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	48 2f       	mov	r20, r24
    1090:	50 e0       	ldi	r21, 0x00	; 0
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <Dio_enuReadChannel+0x23c>
    109e:	88 0f       	add	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	2a 95       	dec	r18
    10a4:	e2 f7       	brpl	.-8      	; 0x109e <Dio_enuReadChannel+0x238>
    10a6:	9a 01       	movw	r18, r20
    10a8:	28 23       	and	r18, r24
    10aa:	39 23       	and	r19, r25
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	88 2f       	mov	r24, r24
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	a9 01       	movw	r20, r18
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <Dio_enuReadChannel+0x254>
    10b6:	55 95       	asr	r21
    10b8:	47 95       	ror	r20
    10ba:	8a 95       	dec	r24
    10bc:	e2 f7       	brpl	.-8      	; 0x10b6 <Dio_enuReadChannel+0x250>
    10be:	ca 01       	movw	r24, r20
    10c0:	81 30       	cpi	r24, 0x01	; 1
    10c2:	91 05       	cpc	r25, r1
    10c4:	19 f4       	brne	.+6      	; 0x10cc <Dio_enuReadChannel+0x266>
				ErrorStatus=DIO_enuDirectionError;
    10c6:	83 e0       	ldi	r24, 0x03	; 3
    10c8:	8b 83       	std	Y+3, r24	; 0x03
    10ca:	1f c0       	rjmp	.+62     	; 0x110a <Dio_enuReadChannel+0x2a4>
			else
			*Add_pu8ChannelLevel=GET_BIT(DDRD,PinIndex);
    10cc:	e1 e3       	ldi	r30, 0x31	; 49
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	48 2f       	mov	r20, r24
    10d4:	50 e0       	ldi	r21, 0x00	; 0
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <Dio_enuReadChannel+0x280>
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	2a 95       	dec	r18
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <Dio_enuReadChannel+0x27c>
    10ea:	9a 01       	movw	r18, r20
    10ec:	28 23       	and	r18, r24
    10ee:	39 23       	and	r19, r25
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	88 2f       	mov	r24, r24
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	a9 01       	movw	r20, r18
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <Dio_enuReadChannel+0x298>
    10fa:	55 95       	asr	r21
    10fc:	47 95       	ror	r20
    10fe:	8a 95       	dec	r24
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <Dio_enuReadChannel+0x294>
    1102:	ca 01       	movw	r24, r20
    1104:	ed 81       	ldd	r30, Y+5	; 0x05
    1106:	fe 81       	ldd	r31, Y+6	; 0x06
    1108:	80 83       	st	Z, r24

			break;
		}
		return ErrorStatus;
    110a:	8b 81       	ldd	r24, Y+3	; 0x03

}
    110c:	28 96       	adiw	r28, 0x08	; 8
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	f8 94       	cli
    1112:	de bf       	out	0x3e, r29	; 62
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	cd bf       	out	0x3d, r28	; 61
    1118:	cf 91       	pop	r28
    111a:	df 91       	pop	r29
    111c:	08 95       	ret

0000111e <Dio_enuWritePort>:
 * Parameters(IN)  : 1.Copy_u8PortlId -->port number
 *                   2.Copy_u8Level     --> High or LOW
 * Parameters(OUT) : value of enum type PORT_tenuErrorStatus
 *******************************************************************************************/
Dio_tenuErrorStatus Dio_enuWritePort(DioPinType Copy_u8PortlId,DioPinType Copy_u8Level)
{
    111e:	df 93       	push	r29
    1120:	cf 93       	push	r28
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	29 97       	sbiw	r28, 0x09	; 9
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	f8 94       	cli
    112c:	de bf       	out	0x3e, r29	; 62
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	cd bf       	out	0x3d, r28	; 61
    1132:	8a 83       	std	Y+2, r24	; 0x02
    1134:	6b 83       	std	Y+3, r22	; 0x03
	uint8 ErrorStatus=Dio_enuOK;
    1136:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortlId>DIO_NUMBER_OF_PORTS)
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	85 30       	cpi	r24, 0x05	; 5
    113c:	10 f0       	brcs	.+4      	; 0x1142 <Dio_enuWritePort+0x24>
			{
				ErrorStatus=Dio_enuPortError;
    113e:	82 e0       	ldi	r24, 0x02	; 2
    1140:	89 83       	std	Y+1, r24	; 0x01
			}
	switch(Copy_u8PortlId)
    1142:	8a 81       	ldd	r24, Y+2	; 0x02
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	39 87       	std	Y+9, r19	; 0x09
    114a:	28 87       	std	Y+8, r18	; 0x08
    114c:	88 85       	ldd	r24, Y+8	; 0x08
    114e:	99 85       	ldd	r25, Y+9	; 0x09
    1150:	81 30       	cpi	r24, 0x01	; 1
    1152:	91 05       	cpc	r25, r1
    1154:	e9 f0       	breq	.+58     	; 0x1190 <Dio_enuWritePort+0x72>
    1156:	28 85       	ldd	r18, Y+8	; 0x08
    1158:	39 85       	ldd	r19, Y+9	; 0x09
    115a:	22 30       	cpi	r18, 0x02	; 2
    115c:	31 05       	cpc	r19, r1
    115e:	2c f4       	brge	.+10     	; 0x116a <Dio_enuWritePort+0x4c>
    1160:	88 85       	ldd	r24, Y+8	; 0x08
    1162:	99 85       	ldd	r25, Y+9	; 0x09
    1164:	00 97       	sbiw	r24, 0x00	; 0
    1166:	61 f0       	breq	.+24     	; 0x1180 <Dio_enuWritePort+0x62>
    1168:	2a c0       	rjmp	.+84     	; 0x11be <Dio_enuWritePort+0xa0>
    116a:	28 85       	ldd	r18, Y+8	; 0x08
    116c:	39 85       	ldd	r19, Y+9	; 0x09
    116e:	22 30       	cpi	r18, 0x02	; 2
    1170:	31 05       	cpc	r19, r1
    1172:	b1 f0       	breq	.+44     	; 0x11a0 <Dio_enuWritePort+0x82>
    1174:	88 85       	ldd	r24, Y+8	; 0x08
    1176:	99 85       	ldd	r25, Y+9	; 0x09
    1178:	83 30       	cpi	r24, 0x03	; 3
    117a:	91 05       	cpc	r25, r1
    117c:	c9 f0       	breq	.+50     	; 0x11b0 <Dio_enuWritePort+0x92>
    117e:	1f c0       	rjmp	.+62     	; 0x11be <Dio_enuWritePort+0xa0>
			{
			case Dio_PORTA:
				ASSIGN_REG(PORTA,Copy_u8Level);
    1180:	eb e3       	ldi	r30, 0x3B	; 59
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	90 81       	ld	r25, Z
    1186:	eb e3       	ldi	r30, 0x3B	; 59
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	80 83       	st	Z, r24
    118e:	17 c0       	rjmp	.+46     	; 0x11be <Dio_enuWritePort+0xa0>

				break;
			case Dio_PORTB:
				ASSIGN_REG(PORTB,Copy_u8Level);
    1190:	e8 e3       	ldi	r30, 0x38	; 56
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	20 81       	ld	r18, Z
    1196:	e8 e3       	ldi	r30, 0x38	; 56
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	80 83       	st	Z, r24
    119e:	0f c0       	rjmp	.+30     	; 0x11be <Dio_enuWritePort+0xa0>

				break;
			case Dio_PORTC:
				ASSIGN_REG(PORTC,Copy_u8Level);
    11a0:	e5 e3       	ldi	r30, 0x35	; 53
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	30 81       	ld	r19, Z
    11a6:	e5 e3       	ldi	r30, 0x35	; 53
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	80 83       	st	Z, r24
    11ae:	07 c0       	rjmp	.+14     	; 0x11be <Dio_enuWritePort+0xa0>


				break;
			case Dio_PORTD:
				ASSIGN_REG(PORTD,Copy_u8Level);
    11b0:	e2 e3       	ldi	r30, 0x32	; 50
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	e2 e3       	ldi	r30, 0x32	; 50
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	80 83       	st	Z, r24

				break;
			}
			return ErrorStatus;
    11be:	89 81       	ldd	r24, Y+1	; 0x01
}
    11c0:	29 96       	adiw	r28, 0x09	; 9
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	de bf       	out	0x3e, r29	; 62
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	cd bf       	out	0x3d, r28	; 61
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	08 95       	ret

000011d2 <Dio_enuReadPort>:
 * Parameters(IN)  : 1.Copy_u8PortlId        -->port number
 *                   2.Add_pu8ChannelLevel     --> pointer to address of value carry
 * Parameters(OUT) : value of enum type PORT_tenuErrorStatus
 *******************************************************************************************/
Dio_tenuErrorStatus Dio_enuReadPort(DioPinType Copy_u8PortlId,pu8 Add_pu8PortLevel)
{
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <Dio_enuReadPort+0x6>
    11d8:	00 d0       	rcall	.+0      	; 0x11da <Dio_enuReadPort+0x8>
    11da:	00 d0       	rcall	.+0      	; 0x11dc <Dio_enuReadPort+0xa>
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	8a 83       	std	Y+2, r24	; 0x02
    11e2:	7c 83       	std	Y+4, r23	; 0x04
    11e4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 ErrorStatus=Dio_enuOK;
    11e6:	19 82       	std	Y+1, r1	; 0x01
		if(Copy_u8PortlId>DIO_NUMBER_OF_PORTS)
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	85 30       	cpi	r24, 0x05	; 5
    11ec:	10 f0       	brcs	.+4      	; 0x11f2 <Dio_enuReadPort+0x20>
				{
					ErrorStatus=Dio_enuPortError;
    11ee:	82 e0       	ldi	r24, 0x02	; 2
    11f0:	89 83       	std	Y+1, r24	; 0x01
				}
		if( Add_pu8PortLevel ==Null_ptr)
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	9c 81       	ldd	r25, Y+4	; 0x04
    11f6:	00 97       	sbiw	r24, 0x00	; 0
    11f8:	11 f4       	brne	.+4      	; 0x11fe <Dio_enuReadPort+0x2c>
				{
					ErrorStatus=DIO_enuNullPtr;
    11fa:	84 e0       	ldi	r24, 0x04	; 4
    11fc:	89 83       	std	Y+1, r24	; 0x01
				}
		switch(Copy_u8PortlId)
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	3e 83       	std	Y+6, r19	; 0x06
    1206:	2d 83       	std	Y+5, r18	; 0x05
    1208:	8d 81       	ldd	r24, Y+5	; 0x05
    120a:	9e 81       	ldd	r25, Y+6	; 0x06
    120c:	81 30       	cpi	r24, 0x01	; 1
    120e:	91 05       	cpc	r25, r1
    1210:	e1 f0       	breq	.+56     	; 0x124a <Dio_enuReadPort+0x78>
    1212:	2d 81       	ldd	r18, Y+5	; 0x05
    1214:	3e 81       	ldd	r19, Y+6	; 0x06
    1216:	22 30       	cpi	r18, 0x02	; 2
    1218:	31 05       	cpc	r19, r1
    121a:	2c f4       	brge	.+10     	; 0x1226 <Dio_enuReadPort+0x54>
    121c:	8d 81       	ldd	r24, Y+5	; 0x05
    121e:	9e 81       	ldd	r25, Y+6	; 0x06
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	61 f0       	breq	.+24     	; 0x123c <Dio_enuReadPort+0x6a>
    1224:	26 c0       	rjmp	.+76     	; 0x1272 <Dio_enuReadPort+0xa0>
    1226:	2d 81       	ldd	r18, Y+5	; 0x05
    1228:	3e 81       	ldd	r19, Y+6	; 0x06
    122a:	22 30       	cpi	r18, 0x02	; 2
    122c:	31 05       	cpc	r19, r1
    122e:	a1 f0       	breq	.+40     	; 0x1258 <Dio_enuReadPort+0x86>
    1230:	8d 81       	ldd	r24, Y+5	; 0x05
    1232:	9e 81       	ldd	r25, Y+6	; 0x06
    1234:	83 30       	cpi	r24, 0x03	; 3
    1236:	91 05       	cpc	r25, r1
    1238:	b1 f0       	breq	.+44     	; 0x1266 <Dio_enuReadPort+0x94>
    123a:	1b c0       	rjmp	.+54     	; 0x1272 <Dio_enuReadPort+0xa0>
				{
				case Dio_PORTA:
					*Add_pu8PortLevel=PINA;
    123c:	e9 e3       	ldi	r30, 0x39	; 57
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	eb 81       	ldd	r30, Y+3	; 0x03
    1244:	fc 81       	ldd	r31, Y+4	; 0x04
    1246:	80 83       	st	Z, r24
    1248:	14 c0       	rjmp	.+40     	; 0x1272 <Dio_enuReadPort+0xa0>
					break;
				case Dio_PORTB:
					*Add_pu8PortLevel=PINB;
    124a:	e6 e3       	ldi	r30, 0x36	; 54
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	eb 81       	ldd	r30, Y+3	; 0x03
    1252:	fc 81       	ldd	r31, Y+4	; 0x04
    1254:	80 83       	st	Z, r24
    1256:	0d c0       	rjmp	.+26     	; 0x1272 <Dio_enuReadPort+0xa0>

					break;
				case Dio_PORTC:
					*Add_pu8PortLevel=PINC;
    1258:	e3 e3       	ldi	r30, 0x33	; 51
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	eb 81       	ldd	r30, Y+3	; 0x03
    1260:	fc 81       	ldd	r31, Y+4	; 0x04
    1262:	80 83       	st	Z, r24
    1264:	06 c0       	rjmp	.+12     	; 0x1272 <Dio_enuReadPort+0xa0>


					break;
				case Dio_PORTD:
					*Add_pu8PortLevel=PIND;
    1266:	e0 e3       	ldi	r30, 0x30	; 48
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	eb 81       	ldd	r30, Y+3	; 0x03
    126e:	fc 81       	ldd	r31, Y+4	; 0x04
    1270:	80 83       	st	Z, r24

					break;
				}
				return ErrorStatus;
    1272:	89 81       	ldd	r24, Y+1	; 0x01
}
    1274:	26 96       	adiw	r28, 0x06	; 6
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	f8 94       	cli
    127a:	de bf       	out	0x3e, r29	; 62
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	cd bf       	out	0x3d, r28	; 61
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	08 95       	ret

00001286 <Dio_eneFlipChannel>:
 * Description     : Function responsible for flip pin
 * Parameters(IN)  : 1.Copy_u8ChannelId -->pin number
 * Parameters(OUT) : value of enum type PORT_tenuErrorStatus
 *******************************************************************************************/
Dio_tenuErrorStatus Dio_eneFlipChannel(DioPinType Copy_u8ChannelId)
{
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	00 d0       	rcall	.+0      	; 0x128c <Dio_eneFlipChannel+0x6>
    128c:	00 d0       	rcall	.+0      	; 0x128e <Dio_eneFlipChannel+0x8>
    128e:	00 d0       	rcall	.+0      	; 0x1290 <Dio_eneFlipChannel+0xa>
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
    1294:	8c 83       	std	Y+4, r24	; 0x04
	uint8 ErrorStatus=Dio_enuOK;
    1296:	1b 82       	std	Y+3, r1	; 0x03
			uint8 PortIndex=0,PinIndex=0;
    1298:	1a 82       	std	Y+2, r1	; 0x02
    129a:	19 82       	std	Y+1, r1	; 0x01
			PortIndex=(Copy_u8ChannelId/8);
    129c:	8c 81       	ldd	r24, Y+4	; 0x04
    129e:	86 95       	lsr	r24
    12a0:	86 95       	lsr	r24
    12a2:	86 95       	lsr	r24
    12a4:	8a 83       	std	Y+2, r24	; 0x02
			PinIndex=Copy_u8ChannelId%8;
    12a6:	8c 81       	ldd	r24, Y+4	; 0x04
    12a8:	87 70       	andi	r24, 0x07	; 7
    12aa:	89 83       	std	Y+1, r24	; 0x01
			if(Copy_u8ChannelId>DIO_NUMBER_OF_PINS)
    12ac:	8c 81       	ldd	r24, Y+4	; 0x04
    12ae:	81 32       	cpi	r24, 0x21	; 33
    12b0:	10 f0       	brcs	.+4      	; 0x12b6 <Dio_eneFlipChannel+0x30>
			{
				ErrorStatus=Dio_enuPinError;
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	8b 83       	std	Y+3, r24	; 0x03
			}
			if(PortIndex>DIO_NUMBER_OF_PORTS)
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	85 30       	cpi	r24, 0x05	; 5
    12ba:	10 f0       	brcs	.+4      	; 0x12c0 <Dio_eneFlipChannel+0x3a>
			{
				ErrorStatus=Dio_enuPortError;
    12bc:	82 e0       	ldi	r24, 0x02	; 2
    12be:	8b 83       	std	Y+3, r24	; 0x03
			}
			switch(PortIndex)
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	3e 83       	std	Y+6, r19	; 0x06
    12c8:	2d 83       	std	Y+5, r18	; 0x05
    12ca:	8d 81       	ldd	r24, Y+5	; 0x05
    12cc:	9e 81       	ldd	r25, Y+6	; 0x06
    12ce:	81 30       	cpi	r24, 0x01	; 1
    12d0:	91 05       	cpc	r25, r1
    12d2:	49 f1       	breq	.+82     	; 0x1326 <Dio_eneFlipChannel+0xa0>
    12d4:	2d 81       	ldd	r18, Y+5	; 0x05
    12d6:	3e 81       	ldd	r19, Y+6	; 0x06
    12d8:	22 30       	cpi	r18, 0x02	; 2
    12da:	31 05       	cpc	r19, r1
    12dc:	2c f4       	brge	.+10     	; 0x12e8 <Dio_eneFlipChannel+0x62>
    12de:	8d 81       	ldd	r24, Y+5	; 0x05
    12e0:	9e 81       	ldd	r25, Y+6	; 0x06
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	61 f0       	breq	.+24     	; 0x12fe <Dio_eneFlipChannel+0x78>
    12e6:	5a c0       	rjmp	.+180    	; 0x139c <Dio_eneFlipChannel+0x116>
    12e8:	2d 81       	ldd	r18, Y+5	; 0x05
    12ea:	3e 81       	ldd	r19, Y+6	; 0x06
    12ec:	22 30       	cpi	r18, 0x02	; 2
    12ee:	31 05       	cpc	r19, r1
    12f0:	71 f1       	breq	.+92     	; 0x134e <Dio_eneFlipChannel+0xc8>
    12f2:	8d 81       	ldd	r24, Y+5	; 0x05
    12f4:	9e 81       	ldd	r25, Y+6	; 0x06
    12f6:	83 30       	cpi	r24, 0x03	; 3
    12f8:	91 05       	cpc	r25, r1
    12fa:	e9 f1       	breq	.+122    	; 0x1376 <Dio_eneFlipChannel+0xf0>
    12fc:	4f c0       	rjmp	.+158    	; 0x139c <Dio_eneFlipChannel+0x116>
					{
					case Dio_PORTA:
						TOGGLE_BIT(DDRA,PinIndex);
    12fe:	aa e3       	ldi	r26, 0x3A	; 58
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	ea e3       	ldi	r30, 0x3A	; 58
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	48 2f       	mov	r20, r24
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	02 2e       	mov	r0, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <Dio_eneFlipChannel+0x96>
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	0a 94       	dec	r0
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <Dio_eneFlipChannel+0x92>
    1320:	84 27       	eor	r24, r20
    1322:	8c 93       	st	X, r24
    1324:	3b c0       	rjmp	.+118    	; 0x139c <Dio_eneFlipChannel+0x116>

						break;
					case Dio_PORTB:
						TOGGLE_BIT(DDRB,PinIndex);
    1326:	a7 e3       	ldi	r26, 0x37	; 55
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	e7 e3       	ldi	r30, 0x37	; 55
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	48 2f       	mov	r20, r24
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	02 2e       	mov	r0, r18
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <Dio_eneFlipChannel+0xbe>
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	0a 94       	dec	r0
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <Dio_eneFlipChannel+0xba>
    1348:	84 27       	eor	r24, r20
    134a:	8c 93       	st	X, r24
    134c:	27 c0       	rjmp	.+78     	; 0x139c <Dio_eneFlipChannel+0x116>

						break;
					case Dio_PORTC:
						TOGGLE_BIT(DDRC,PinIndex);
    134e:	a4 e3       	ldi	r26, 0x34	; 52
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e4 e3       	ldi	r30, 0x34	; 52
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	48 2f       	mov	r20, r24
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	02 2e       	mov	r0, r18
    1366:	02 c0       	rjmp	.+4      	; 0x136c <Dio_eneFlipChannel+0xe6>
    1368:	88 0f       	add	r24, r24
    136a:	99 1f       	adc	r25, r25
    136c:	0a 94       	dec	r0
    136e:	e2 f7       	brpl	.-8      	; 0x1368 <Dio_eneFlipChannel+0xe2>
    1370:	84 27       	eor	r24, r20
    1372:	8c 93       	st	X, r24
    1374:	13 c0       	rjmp	.+38     	; 0x139c <Dio_eneFlipChannel+0x116>

						break;
					case Dio_PORTD:
						TOGGLE_BIT(DDRD,PinIndex);
    1376:	a1 e3       	ldi	r26, 0x31	; 49
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e1 e3       	ldi	r30, 0x31	; 49
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	48 2f       	mov	r20, r24
    1382:	89 81       	ldd	r24, Y+1	; 0x01
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	02 2e       	mov	r0, r18
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <Dio_eneFlipChannel+0x10e>
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	0a 94       	dec	r0
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <Dio_eneFlipChannel+0x10a>
    1398:	84 27       	eor	r24, r20
    139a:	8c 93       	st	X, r24

						break;
					}
					return ErrorStatus;
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    139e:	26 96       	adiw	r28, 0x06	; 6
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	f8 94       	cli
    13a4:	de bf       	out	0x3e, r29	; 62
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	cd bf       	out	0x3d, r28	; 61
    13aa:	cf 91       	pop	r28
    13ac:	df 91       	pop	r29
    13ae:	08 95       	ret

000013b0 <GIE_enuInit>:
#include "GIE.h"
#include "GIE_Cfg.h"
#include "GIE_Prv.h"

void  GIE_enuInit(void)
{
    13b0:	df 93       	push	r29
    13b2:	cf 93       	push	r28
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
#if(GIE_MODE==GIE_ENABLE)
	SET_BIT(SREG,GIE_BIT);
    13b8:	af e5       	ldi	r26, 0x5F	; 95
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	ef e5       	ldi	r30, 0x5F	; 95
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	80 68       	ori	r24, 0x80	; 128
    13c4:	8c 93       	st	X, r24
#elif(GIE_MODE==GIE_DISABLE)
	CLEAR_BIT(SREG,GIE_BIT);
#endif
}
    13c6:	cf 91       	pop	r28
    13c8:	df 91       	pop	r29
    13ca:	08 95       	ret

000013cc <GIE_enuSetResetGie>:



GIE_tenuErrorStatus GIE_enuSetResetGie(uint8 Copy_u8GieStatus)
{
    13cc:	df 93       	push	r29
    13ce:	cf 93       	push	r28
    13d0:	00 d0       	rcall	.+0      	; 0x13d2 <GIE_enuSetResetGie+0x6>
    13d2:	00 d0       	rcall	.+0      	; 0x13d4 <GIE_enuSetResetGie+0x8>
    13d4:	cd b7       	in	r28, 0x3d	; 61
    13d6:	de b7       	in	r29, 0x3e	; 62
    13d8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 ErrorStatus=Keypad_enuOK;
    13da:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8GieStatus)
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	3c 83       	std	Y+4, r19	; 0x04
    13e4:	2b 83       	std	Y+3, r18	; 0x03
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ea:	00 97       	sbiw	r24, 0x00	; 0
    13ec:	69 f0       	breq	.+26     	; 0x1408 <GIE_enuSetResetGie+0x3c>
    13ee:	2b 81       	ldd	r18, Y+3	; 0x03
    13f0:	3c 81       	ldd	r19, Y+4	; 0x04
    13f2:	21 30       	cpi	r18, 0x01	; 1
    13f4:	31 05       	cpc	r19, r1
    13f6:	81 f4       	brne	.+32     	; 0x1418 <GIE_enuSetResetGie+0x4c>
	{
	case GIE_ENABLE:
		SET_BIT(SREG,GIE_BIT);
    13f8:	af e5       	ldi	r26, 0x5F	; 95
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	ef e5       	ldi	r30, 0x5F	; 95
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	80 68       	ori	r24, 0x80	; 128
    1404:	8c 93       	st	X, r24
    1406:	0a c0       	rjmp	.+20     	; 0x141c <GIE_enuSetResetGie+0x50>
		break;
	case GIE_DISABLE:
		CLEAR_BIT(SREG,GIE_BIT);
    1408:	af e5       	ldi	r26, 0x5F	; 95
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	ef e5       	ldi	r30, 0x5F	; 95
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	8f 77       	andi	r24, 0x7F	; 127
    1414:	8c 93       	st	X, r24
    1416:	02 c0       	rjmp	.+4      	; 0x141c <GIE_enuSetResetGie+0x50>
		break;
default:
	ErrorStatus=GIE_enuWrongStatus;
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	89 83       	std	Y+1, r24	; 0x01
	break;
	}
	return ErrorStatus;
    141c:	89 81       	ldd	r24, Y+1	; 0x01
}
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	cf 91       	pop	r28
    1428:	df 91       	pop	r29
    142a:	08 95       	ret

0000142c <PORT_Init>:
 * Description     : Function responsible for initializing all Pins with initial configurations
 * Parameters(IN)  : None
 * Parameters(OUT) : None
 *******************************************************************************************/
void PORT_Init(void)
{
    142c:	df 93       	push	r29
    142e:	cf 93       	push	r28
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
#define  PORT_INPUT_FLOATING 0
#define  PORT_INPUT_PULLUP   0


//set the initial direction of all Pins by using ConC function like macro in std_types.h
	DDRA=CONC(PORT_PIN7_CONFIG,PORT_PIN6_CONFIG,PORT_PIN5_CONFIG,PORT_PIN4_CONFIG,PORT_PIN3_CONFIG,PORT_PIN2_CONFIG,PORT_PIN1_CONFIG,PORT_PIN0_CONFIG);
    1434:	ea e3       	ldi	r30, 0x3A	; 58
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	8f ef       	ldi	r24, 0xFF	; 255
    143a:	80 83       	st	Z, r24
	DDRB=CONC(PORT_PIN15_CONFIG,PORT_PIN14_CONFIG,PORT_PIN13_CONFIG,PORT_PIN12_CONFIG,PORT_PIN11_CONFIG,PORT_PIN10_CONFIG,PORT_PIN9_CONFIG,PORT_PIN8_CONFIG);
    143c:	e7 e3       	ldi	r30, 0x37	; 55
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	8b ef       	ldi	r24, 0xFB	; 251
    1442:	80 83       	st	Z, r24
	DDRC=CONC(PORT_PIN23_CONFIG,PORT_PIN22_CONFIG,PORT_PIN21_CONFIG,PORT_PIN20_CONFIG,PORT_PIN19_CONFIG,PORT_PIN18_CONFIG,PORT_PIN17_CONFIG,PORT_PIN16_CONFIG);
    1444:	e4 e3       	ldi	r30, 0x34	; 52
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	8f ef       	ldi	r24, 0xFF	; 255
    144a:	80 83       	st	Z, r24
	DDRD=CONC(PORT_PIN31_CONFIG,PORT_PIN30_CONFIG,PORT_PIN29_CONFIG,PORT_PIN28_CONFIG,PORT_PIN27_CONFIG,PORT_PIN26_CONFIG,PORT_PIN25_CONFIG,PORT_PIN24_CONFIG);
    144c:	e1 e3       	ldi	r30, 0x31	; 49
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	83 ef       	ldi	r24, 0xF3	; 243
    1452:	80 83       	st	Z, r24
#define PORT_INPUT_FLOATING               0
#define PORT_INPUT_PULLUP                 1


//set the initial mode of all Pins by using ConC function like macro in std_types.h
	PORTA=CONC(PORT_PIN7_CONFIG,PORT_PIN6_CONFIG,PORT_PIN5_CONFIG,PORT_PIN4_CONFIG,PORT_PIN3_CONFIG,PORT_PIN2_CONFIG,PORT_PIN1_CONFIG,PORT_PIN0_CONFIG);
    1454:	eb e3       	ldi	r30, 0x3B	; 59
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	10 82       	st	Z, r1
	PORTB=CONC(PORT_PIN15_CONFIG,PORT_PIN14_CONFIG,PORT_PIN13_CONFIG,PORT_PIN12_CONFIG,PORT_PIN11_CONFIG,PORT_PIN10_CONFIG,PORT_PIN9_CONFIG,PORT_PIN8_CONFIG);
    145a:	e8 e3       	ldi	r30, 0x38	; 56
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	84 e0       	ldi	r24, 0x04	; 4
    1460:	80 83       	st	Z, r24
	PORTC=CONC(PORT_PIN23_CONFIG,PORT_PIN22_CONFIG,PORT_PIN21_CONFIG,PORT_PIN20_CONFIG,PORT_PIN19_CONFIG,PORT_PIN18_CONFIG,PORT_PIN17_CONFIG,PORT_PIN16_CONFIG);
    1462:	e5 e3       	ldi	r30, 0x35	; 53
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	10 82       	st	Z, r1
	PORTD=CONC(PORT_PIN31_CONFIG,PORT_PIN30_CONFIG,PORT_PIN29_CONFIG,PORT_PIN28_CONFIG,PORT_PIN27_CONFIG,PORT_PIN26_CONFIG,PORT_PIN25_CONFIG,PORT_PIN24_CONFIG);
    1468:	e2 e3       	ldi	r30, 0x32	; 50
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	8c e0       	ldi	r24, 0x0C	; 12
    146e:	80 83       	st	Z, r24

#define PORT_OUTPUT_HIGH                  2
#define PORT_OUTPUT_LOW			          3
#define PORT_INPUT_FLOATING               4
#define PORT_INPUT_PULLUP                 5
}
    1470:	cf 91       	pop	r28
    1472:	df 91       	pop	r29
    1474:	08 95       	ret

00001476 <PORT_enuSetPinMode>:
 * Parameters(IN)  : 1.Copy_u8PinId   --> channel Number
 *                   2.Copy_u8PinMode --> Mode
 * Parameters(OUT) : value of enum type PORT_tenuLOC_u8ErrorStatus
 *******************************************************************************************/
PORT_tenuErrorStatus PORT_enuSetPinMode(PortPinType Copy_u8PinId,PortPinType Copy_u8PinMode  )
{
    1476:	df 93       	push	r29
    1478:	cf 93       	push	r28
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
    147e:	2f 97       	sbiw	r28, 0x0f	; 15
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	de bf       	out	0x3e, r29	; 62
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	cd bf       	out	0x3d, r28	; 61
    148a:	8c 83       	std	Y+4, r24	; 0x04
    148c:	6d 83       	std	Y+5, r22	; 0x05
	//local variable for Error status
	uint8 LOC_u8ErrorStatus=PORT_enuOK;
    148e:	1b 82       	std	Y+3, r1	; 0x03
	//local variables for port and pin indexes
	uint8 PortIndex=0,PinIndex=0;
    1490:	1a 82       	std	Y+2, r1	; 0x02
    1492:	19 82       	std	Y+1, r1	; 0x01

	//get the port index from the pin id
	PortIndex=(Copy_u8PinId/8);
    1494:	8c 81       	ldd	r24, Y+4	; 0x04
    1496:	86 95       	lsr	r24
    1498:	86 95       	lsr	r24
    149a:	86 95       	lsr	r24
    149c:	8a 83       	std	Y+2, r24	; 0x02

	//get the pin index from the pin id ---pin index 0---7
	PinIndex=Copy_u8PinId%8;
    149e:	8c 81       	ldd	r24, Y+4	; 0x04
    14a0:	87 70       	andi	r24, 0x07	; 7
    14a2:	89 83       	std	Y+1, r24	; 0x01

	//check if pin id invalid
	if(Copy_u8PinId>PORT_NUMBER_OF_PINS)
    14a4:	8c 81       	ldd	r24, Y+4	; 0x04
    14a6:	81 32       	cpi	r24, 0x21	; 33
    14a8:	10 f0       	brcs	.+4      	; 0x14ae <PORT_enuSetPinMode+0x38>
	{
		LOC_u8ErrorStatus=PORT_enuPinError;
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	8b 83       	std	Y+3, r24	; 0x03
	}

	//check if port id invalid
	if(PortIndex>PORT_NUMBER_OF_PORTS)
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	85 30       	cpi	r24, 0x05	; 5
    14b2:	10 f0       	brcs	.+4      	; 0x14b8 <PORT_enuSetPinMode+0x42>
	{
		LOC_u8ErrorStatus=PORT_enuPortError;
    14b4:	82 e0       	ldi	r24, 0x02	; 2
    14b6:	8b 83       	std	Y+3, r24	; 0x03
	}

	//check if the mode invalid
	if(Copy_u8PinMode>5 ||Copy_u8PinMode<2)
    14b8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ba:	86 30       	cpi	r24, 0x06	; 6
    14bc:	18 f4       	brcc	.+6      	; 0x14c4 <PORT_enuSetPinMode+0x4e>
    14be:	8d 81       	ldd	r24, Y+5	; 0x05
    14c0:	82 30       	cpi	r24, 0x02	; 2
    14c2:	10 f4       	brcc	.+4      	; 0x14c8 <PORT_enuSetPinMode+0x52>
	{
		LOC_u8ErrorStatus=PORT_enuModeError;
    14c4:	83 e0       	ldi	r24, 0x03	; 3
    14c6:	8b 83       	std	Y+3, r24	; 0x03

	}

	//which Port
	switch(PortIndex)
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	3f 87       	std	Y+15, r19	; 0x0f
    14d0:	2e 87       	std	Y+14, r18	; 0x0e
    14d2:	8e 85       	ldd	r24, Y+14	; 0x0e
    14d4:	9f 85       	ldd	r25, Y+15	; 0x0f
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	91 05       	cpc	r25, r1
    14da:	09 f4       	brne	.+2      	; 0x14de <PORT_enuSetPinMode+0x68>
    14dc:	d6 c0       	rjmp	.+428    	; 0x168a <PORT_enuSetPinMode+0x214>
    14de:	2e 85       	ldd	r18, Y+14	; 0x0e
    14e0:	3f 85       	ldd	r19, Y+15	; 0x0f
    14e2:	22 30       	cpi	r18, 0x02	; 2
    14e4:	31 05       	cpc	r19, r1
    14e6:	2c f4       	brge	.+10     	; 0x14f2 <PORT_enuSetPinMode+0x7c>
    14e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    14ea:	9f 85       	ldd	r25, Y+15	; 0x0f
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	71 f0       	breq	.+28     	; 0x150c <PORT_enuSetPinMode+0x96>
    14f0:	08 c3       	rjmp	.+1552   	; 0x1b02 <PORT_enuSetPinMode+0x68c>
    14f2:	2e 85       	ldd	r18, Y+14	; 0x0e
    14f4:	3f 85       	ldd	r19, Y+15	; 0x0f
    14f6:	22 30       	cpi	r18, 0x02	; 2
    14f8:	31 05       	cpc	r19, r1
    14fa:	09 f4       	brne	.+2      	; 0x14fe <PORT_enuSetPinMode+0x88>
    14fc:	85 c1       	rjmp	.+778    	; 0x1808 <PORT_enuSetPinMode+0x392>
    14fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    1500:	9f 85       	ldd	r25, Y+15	; 0x0f
    1502:	83 30       	cpi	r24, 0x03	; 3
    1504:	91 05       	cpc	r25, r1
    1506:	09 f4       	brne	.+2      	; 0x150a <PORT_enuSetPinMode+0x94>
    1508:	3e c2       	rjmp	.+1148   	; 0x1986 <PORT_enuSetPinMode+0x510>
    150a:	fb c2       	rjmp	.+1526   	; 0x1b02 <PORT_enuSetPinMode+0x68c>
	{
	//if Port A
	case PORT_A:
		//which mode ---PORT_OUTPUT_HIGH---PORT_OUTPUT_LOW----PORT_INPUT_FLOATING----PORT_INPUT_PULLUP
		switch(Copy_u8PinMode)
    150c:	8d 81       	ldd	r24, Y+5	; 0x05
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	3d 87       	std	Y+13, r19	; 0x0d
    1514:	2c 87       	std	Y+12, r18	; 0x0c
    1516:	8c 85       	ldd	r24, Y+12	; 0x0c
    1518:	9d 85       	ldd	r25, Y+13	; 0x0d
    151a:	83 30       	cpi	r24, 0x03	; 3
    151c:	91 05       	cpc	r25, r1
    151e:	09 f4       	brne	.+2      	; 0x1522 <PORT_enuSetPinMode+0xac>
    1520:	3e c0       	rjmp	.+124    	; 0x159e <PORT_enuSetPinMode+0x128>
    1522:	2c 85       	ldd	r18, Y+12	; 0x0c
    1524:	3d 85       	ldd	r19, Y+13	; 0x0d
    1526:	24 30       	cpi	r18, 0x04	; 4
    1528:	31 05       	cpc	r19, r1
    152a:	34 f4       	brge	.+12     	; 0x1538 <PORT_enuSetPinMode+0xc2>
    152c:	8c 85       	ldd	r24, Y+12	; 0x0c
    152e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1530:	82 30       	cpi	r24, 0x02	; 2
    1532:	91 05       	cpc	r25, r1
    1534:	71 f0       	breq	.+28     	; 0x1552 <PORT_enuSetPinMode+0xdc>
    1536:	e5 c2       	rjmp	.+1482   	; 0x1b02 <PORT_enuSetPinMode+0x68c>
    1538:	2c 85       	ldd	r18, Y+12	; 0x0c
    153a:	3d 85       	ldd	r19, Y+13	; 0x0d
    153c:	24 30       	cpi	r18, 0x04	; 4
    153e:	31 05       	cpc	r19, r1
    1540:	09 f4       	brne	.+2      	; 0x1544 <PORT_enuSetPinMode+0xce>
    1542:	54 c0       	rjmp	.+168    	; 0x15ec <PORT_enuSetPinMode+0x176>
    1544:	8c 85       	ldd	r24, Y+12	; 0x0c
    1546:	9d 85       	ldd	r25, Y+13	; 0x0d
    1548:	85 30       	cpi	r24, 0x05	; 5
    154a:	91 05       	cpc	r25, r1
    154c:	09 f4       	brne	.+2      	; 0x1550 <PORT_enuSetPinMode+0xda>
    154e:	76 c0       	rjmp	.+236    	; 0x163c <PORT_enuSetPinMode+0x1c6>
    1550:	d8 c2       	rjmp	.+1456   	; 0x1b02 <PORT_enuSetPinMode+0x68c>
		{

		case PORT_OUTPUT_HIGH:
			//set output direction
			SET_BIT(DDRA,PinIndex);
    1552:	aa e3       	ldi	r26, 0x3A	; 58
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	ea e3       	ldi	r30, 0x3A	; 58
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	48 2f       	mov	r20, r24
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	02 c0       	rjmp	.+4      	; 0x156e <PORT_enuSetPinMode+0xf8>
    156a:	88 0f       	add	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	2a 95       	dec	r18
    1570:	e2 f7       	brpl	.-8      	; 0x156a <PORT_enuSetPinMode+0xf4>
    1572:	84 2b       	or	r24, r20
    1574:	8c 93       	st	X, r24
			//set high value
			SET_BIT(PORTA,PinIndex);
    1576:	ab e3       	ldi	r26, 0x3B	; 59
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	eb e3       	ldi	r30, 0x3B	; 59
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	48 2f       	mov	r20, r24
    1582:	89 81       	ldd	r24, Y+1	; 0x01
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	02 2e       	mov	r0, r18
    158e:	02 c0       	rjmp	.+4      	; 0x1594 <PORT_enuSetPinMode+0x11e>
    1590:	88 0f       	add	r24, r24
    1592:	99 1f       	adc	r25, r25
    1594:	0a 94       	dec	r0
    1596:	e2 f7       	brpl	.-8      	; 0x1590 <PORT_enuSetPinMode+0x11a>
    1598:	84 2b       	or	r24, r20
    159a:	8c 93       	st	X, r24
    159c:	b2 c2       	rjmp	.+1380   	; 0x1b02 <PORT_enuSetPinMode+0x68c>
			break;

		case PORT_OUTPUT_LOW:
			//set output direction
			SET_BIT(DDRA,PinIndex);
    159e:	aa e3       	ldi	r26, 0x3A	; 58
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	ea e3       	ldi	r30, 0x3A	; 58
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	48 2f       	mov	r20, r24
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	28 2f       	mov	r18, r24
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <PORT_enuSetPinMode+0x144>
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	2a 95       	dec	r18
    15bc:	e2 f7       	brpl	.-8      	; 0x15b6 <PORT_enuSetPinMode+0x140>
    15be:	84 2b       	or	r24, r20
    15c0:	8c 93       	st	X, r24
			//set LOW value
			CLEAR_BIT(PORTA,PinIndex);
    15c2:	ab e3       	ldi	r26, 0x3B	; 59
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	eb e3       	ldi	r30, 0x3B	; 59
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	48 2f       	mov	r20, r24
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	02 2e       	mov	r0, r18
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <PORT_enuSetPinMode+0x16a>
    15dc:	88 0f       	add	r24, r24
    15de:	99 1f       	adc	r25, r25
    15e0:	0a 94       	dec	r0
    15e2:	e2 f7       	brpl	.-8      	; 0x15dc <PORT_enuSetPinMode+0x166>
    15e4:	80 95       	com	r24
    15e6:	84 23       	and	r24, r20
    15e8:	8c 93       	st	X, r24
    15ea:	8b c2       	rjmp	.+1302   	; 0x1b02 <PORT_enuSetPinMode+0x68c>
			break;

		case PORT_INPUT_FLOATING:
			//set input direction
			CLEAR_BIT(DDRA,PinIndex);
    15ec:	aa e3       	ldi	r26, 0x3A	; 58
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	ea e3       	ldi	r30, 0x3A	; 58
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	48 2f       	mov	r20, r24
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
    15fa:	28 2f       	mov	r18, r24
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <PORT_enuSetPinMode+0x192>
    1604:	88 0f       	add	r24, r24
    1606:	99 1f       	adc	r25, r25
    1608:	2a 95       	dec	r18
    160a:	e2 f7       	brpl	.-8      	; 0x1604 <PORT_enuSetPinMode+0x18e>
    160c:	80 95       	com	r24
    160e:	84 23       	and	r24, r20
    1610:	8c 93       	st	X, r24
			//set Low value
			CLEAR_BIT(PORTA,PinIndex);
    1612:	ab e3       	ldi	r26, 0x3B	; 59
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	eb e3       	ldi	r30, 0x3B	; 59
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	48 2f       	mov	r20, r24
    161e:	89 81       	ldd	r24, Y+1	; 0x01
    1620:	28 2f       	mov	r18, r24
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	02 2e       	mov	r0, r18
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <PORT_enuSetPinMode+0x1ba>
    162c:	88 0f       	add	r24, r24
    162e:	99 1f       	adc	r25, r25
    1630:	0a 94       	dec	r0
    1632:	e2 f7       	brpl	.-8      	; 0x162c <PORT_enuSetPinMode+0x1b6>
    1634:	80 95       	com	r24
    1636:	84 23       	and	r24, r20
    1638:	8c 93       	st	X, r24
    163a:	63 c2       	rjmp	.+1222   	; 0x1b02 <PORT_enuSetPinMode+0x68c>
			break;

		case PORT_INPUT_PULLUP:
			//set input direction
			CLEAR_BIT(DDRA,PinIndex);
    163c:	aa e3       	ldi	r26, 0x3A	; 58
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	ea e3       	ldi	r30, 0x3A	; 58
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	48 2f       	mov	r20, r24
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <PORT_enuSetPinMode+0x1e2>
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	2a 95       	dec	r18
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <PORT_enuSetPinMode+0x1de>
    165c:	80 95       	com	r24
    165e:	84 23       	and	r24, r20
    1660:	8c 93       	st	X, r24
			//set pullup
			SET_BIT(PORTA,PinIndex);
    1662:	ab e3       	ldi	r26, 0x3B	; 59
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	eb e3       	ldi	r30, 0x3B	; 59
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	48 2f       	mov	r20, r24
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	02 2e       	mov	r0, r18
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <PORT_enuSetPinMode+0x20a>
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	0a 94       	dec	r0
    1682:	e2 f7       	brpl	.-8      	; 0x167c <PORT_enuSetPinMode+0x206>
    1684:	84 2b       	or	r24, r20
    1686:	8c 93       	st	X, r24
    1688:	3c c2       	rjmp	.+1144   	; 0x1b02 <PORT_enuSetPinMode+0x68c>

		//if port B
		case PORT_B:

			//which mode ---PORT_OUTPUT_HIGH---PORT_OUTPUT_LOW----PORT_INPUT_FLOATING----PORT_INPUT_PULLUP
			switch(Copy_u8PinMode)
    168a:	8d 81       	ldd	r24, Y+5	; 0x05
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	3b 87       	std	Y+11, r19	; 0x0b
    1692:	2a 87       	std	Y+10, r18	; 0x0a
    1694:	8a 85       	ldd	r24, Y+10	; 0x0a
    1696:	9b 85       	ldd	r25, Y+11	; 0x0b
    1698:	83 30       	cpi	r24, 0x03	; 3
    169a:	91 05       	cpc	r25, r1
    169c:	09 f4       	brne	.+2      	; 0x16a0 <PORT_enuSetPinMode+0x22a>
    169e:	3e c0       	rjmp	.+124    	; 0x171c <PORT_enuSetPinMode+0x2a6>
    16a0:	2a 85       	ldd	r18, Y+10	; 0x0a
    16a2:	3b 85       	ldd	r19, Y+11	; 0x0b
    16a4:	24 30       	cpi	r18, 0x04	; 4
    16a6:	31 05       	cpc	r19, r1
    16a8:	34 f4       	brge	.+12     	; 0x16b6 <PORT_enuSetPinMode+0x240>
    16aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    16ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    16ae:	82 30       	cpi	r24, 0x02	; 2
    16b0:	91 05       	cpc	r25, r1
    16b2:	71 f0       	breq	.+28     	; 0x16d0 <PORT_enuSetPinMode+0x25a>
    16b4:	26 c2       	rjmp	.+1100   	; 0x1b02 <PORT_enuSetPinMode+0x68c>
    16b6:	2a 85       	ldd	r18, Y+10	; 0x0a
    16b8:	3b 85       	ldd	r19, Y+11	; 0x0b
    16ba:	24 30       	cpi	r18, 0x04	; 4
    16bc:	31 05       	cpc	r19, r1
    16be:	09 f4       	brne	.+2      	; 0x16c2 <PORT_enuSetPinMode+0x24c>
    16c0:	54 c0       	rjmp	.+168    	; 0x176a <PORT_enuSetPinMode+0x2f4>
    16c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    16c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    16c6:	85 30       	cpi	r24, 0x05	; 5
    16c8:	91 05       	cpc	r25, r1
    16ca:	09 f4       	brne	.+2      	; 0x16ce <PORT_enuSetPinMode+0x258>
    16cc:	76 c0       	rjmp	.+236    	; 0x17ba <PORT_enuSetPinMode+0x344>
    16ce:	19 c2       	rjmp	.+1074   	; 0x1b02 <PORT_enuSetPinMode+0x68c>
			{
			case PORT_OUTPUT_HIGH:
				//set output direction
				SET_BIT(DDRB,PinIndex);
    16d0:	a7 e3       	ldi	r26, 0x37	; 55
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	e7 e3       	ldi	r30, 0x37	; 55
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	48 2f       	mov	r20, r24
    16dc:	89 81       	ldd	r24, Y+1	; 0x01
    16de:	28 2f       	mov	r18, r24
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <PORT_enuSetPinMode+0x276>
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	2a 95       	dec	r18
    16ee:	e2 f7       	brpl	.-8      	; 0x16e8 <PORT_enuSetPinMode+0x272>
    16f0:	84 2b       	or	r24, r20
    16f2:	8c 93       	st	X, r24
				SET_BIT(PORTB,PinIndex);
    16f4:	a8 e3       	ldi	r26, 0x38	; 56
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e8 e3       	ldi	r30, 0x38	; 56
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	48 2f       	mov	r20, r24
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	28 2f       	mov	r18, r24
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	02 2e       	mov	r0, r18
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <PORT_enuSetPinMode+0x29c>
    170e:	88 0f       	add	r24, r24
    1710:	99 1f       	adc	r25, r25
    1712:	0a 94       	dec	r0
    1714:	e2 f7       	brpl	.-8      	; 0x170e <PORT_enuSetPinMode+0x298>
    1716:	84 2b       	or	r24, r20
    1718:	8c 93       	st	X, r24
    171a:	f3 c1       	rjmp	.+998    	; 0x1b02 <PORT_enuSetPinMode+0x68c>
				break;
			case PORT_OUTPUT_LOW:
				SET_BIT(DDRB,PinIndex);
    171c:	a7 e3       	ldi	r26, 0x37	; 55
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e7 e3       	ldi	r30, 0x37	; 55
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	48 2f       	mov	r20, r24
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <PORT_enuSetPinMode+0x2c2>
    1734:	88 0f       	add	r24, r24
    1736:	99 1f       	adc	r25, r25
    1738:	2a 95       	dec	r18
    173a:	e2 f7       	brpl	.-8      	; 0x1734 <PORT_enuSetPinMode+0x2be>
    173c:	84 2b       	or	r24, r20
    173e:	8c 93       	st	X, r24
				CLEAR_BIT(PORTB,PinIndex);
    1740:	a8 e3       	ldi	r26, 0x38	; 56
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	e8 e3       	ldi	r30, 0x38	; 56
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	48 2f       	mov	r20, r24
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	28 2f       	mov	r18, r24
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	02 2e       	mov	r0, r18
    1758:	02 c0       	rjmp	.+4      	; 0x175e <PORT_enuSetPinMode+0x2e8>
    175a:	88 0f       	add	r24, r24
    175c:	99 1f       	adc	r25, r25
    175e:	0a 94       	dec	r0
    1760:	e2 f7       	brpl	.-8      	; 0x175a <PORT_enuSetPinMode+0x2e4>
    1762:	80 95       	com	r24
    1764:	84 23       	and	r24, r20
    1766:	8c 93       	st	X, r24
    1768:	cc c1       	rjmp	.+920    	; 0x1b02 <PORT_enuSetPinMode+0x68c>
				break;
			case PORT_INPUT_FLOATING:
				CLEAR_BIT(DDRB,PinIndex);
    176a:	a7 e3       	ldi	r26, 0x37	; 55
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	e7 e3       	ldi	r30, 0x37	; 55
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	48 2f       	mov	r20, r24
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	28 2f       	mov	r18, r24
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <PORT_enuSetPinMode+0x310>
    1782:	88 0f       	add	r24, r24
    1784:	99 1f       	adc	r25, r25
    1786:	2a 95       	dec	r18
    1788:	e2 f7       	brpl	.-8      	; 0x1782 <PORT_enuSetPinMode+0x30c>
    178a:	80 95       	com	r24
    178c:	84 23       	and	r24, r20
    178e:	8c 93       	st	X, r24
				CLEAR_BIT(PORTB,PinIndex);
    1790:	a8 e3       	ldi	r26, 0x38	; 56
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	e8 e3       	ldi	r30, 0x38	; 56
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	48 2f       	mov	r20, r24
    179c:	89 81       	ldd	r24, Y+1	; 0x01
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	02 2e       	mov	r0, r18
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <PORT_enuSetPinMode+0x338>
    17aa:	88 0f       	add	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	0a 94       	dec	r0
    17b0:	e2 f7       	brpl	.-8      	; 0x17aa <PORT_enuSetPinMode+0x334>
    17b2:	80 95       	com	r24
    17b4:	84 23       	and	r24, r20
    17b6:	8c 93       	st	X, r24
    17b8:	a4 c1       	rjmp	.+840    	; 0x1b02 <PORT_enuSetPinMode+0x68c>

				break;
			case PORT_INPUT_PULLUP:
				CLEAR_BIT(DDRB,PinIndex);
    17ba:	a7 e3       	ldi	r26, 0x37	; 55
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e7 e3       	ldi	r30, 0x37	; 55
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	48 2f       	mov	r20, r24
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <PORT_enuSetPinMode+0x360>
    17d2:	88 0f       	add	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	2a 95       	dec	r18
    17d8:	e2 f7       	brpl	.-8      	; 0x17d2 <PORT_enuSetPinMode+0x35c>
    17da:	80 95       	com	r24
    17dc:	84 23       	and	r24, r20
    17de:	8c 93       	st	X, r24
				SET_BIT(PORTB,PinIndex);
    17e0:	a8 e3       	ldi	r26, 0x38	; 56
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	e8 e3       	ldi	r30, 0x38	; 56
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	48 2f       	mov	r20, r24
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	28 2f       	mov	r18, r24
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	02 2e       	mov	r0, r18
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <PORT_enuSetPinMode+0x388>
    17fa:	88 0f       	add	r24, r24
    17fc:	99 1f       	adc	r25, r25
    17fe:	0a 94       	dec	r0
    1800:	e2 f7       	brpl	.-8      	; 0x17fa <PORT_enuSetPinMode+0x384>
    1802:	84 2b       	or	r24, r20
    1804:	8c 93       	st	X, r24
    1806:	7d c1       	rjmp	.+762    	; 0x1b02 <PORT_enuSetPinMode+0x68c>
			}
			break;

			case PORT_C:
				//which mode ---PORT_OUTPUT_HIGH---PORT_OUTPUT_LOW----PORT_INPUT_FLOATING----PORT_INPUT_PULLUP
				switch(Copy_u8PinMode)
    1808:	8d 81       	ldd	r24, Y+5	; 0x05
    180a:	28 2f       	mov	r18, r24
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	39 87       	std	Y+9, r19	; 0x09
    1810:	28 87       	std	Y+8, r18	; 0x08
    1812:	88 85       	ldd	r24, Y+8	; 0x08
    1814:	99 85       	ldd	r25, Y+9	; 0x09
    1816:	83 30       	cpi	r24, 0x03	; 3
    1818:	91 05       	cpc	r25, r1
    181a:	09 f4       	brne	.+2      	; 0x181e <PORT_enuSetPinMode+0x3a8>
    181c:	3e c0       	rjmp	.+124    	; 0x189a <PORT_enuSetPinMode+0x424>
    181e:	28 85       	ldd	r18, Y+8	; 0x08
    1820:	39 85       	ldd	r19, Y+9	; 0x09
    1822:	24 30       	cpi	r18, 0x04	; 4
    1824:	31 05       	cpc	r19, r1
    1826:	34 f4       	brge	.+12     	; 0x1834 <PORT_enuSetPinMode+0x3be>
    1828:	88 85       	ldd	r24, Y+8	; 0x08
    182a:	99 85       	ldd	r25, Y+9	; 0x09
    182c:	82 30       	cpi	r24, 0x02	; 2
    182e:	91 05       	cpc	r25, r1
    1830:	71 f0       	breq	.+28     	; 0x184e <PORT_enuSetPinMode+0x3d8>
    1832:	67 c1       	rjmp	.+718    	; 0x1b02 <PORT_enuSetPinMode+0x68c>
    1834:	28 85       	ldd	r18, Y+8	; 0x08
    1836:	39 85       	ldd	r19, Y+9	; 0x09
    1838:	24 30       	cpi	r18, 0x04	; 4
    183a:	31 05       	cpc	r19, r1
    183c:	09 f4       	brne	.+2      	; 0x1840 <PORT_enuSetPinMode+0x3ca>
    183e:	54 c0       	rjmp	.+168    	; 0x18e8 <PORT_enuSetPinMode+0x472>
    1840:	88 85       	ldd	r24, Y+8	; 0x08
    1842:	99 85       	ldd	r25, Y+9	; 0x09
    1844:	85 30       	cpi	r24, 0x05	; 5
    1846:	91 05       	cpc	r25, r1
    1848:	09 f4       	brne	.+2      	; 0x184c <PORT_enuSetPinMode+0x3d6>
    184a:	76 c0       	rjmp	.+236    	; 0x1938 <PORT_enuSetPinMode+0x4c2>
    184c:	5a c1       	rjmp	.+692    	; 0x1b02 <PORT_enuSetPinMode+0x68c>
				{
				case PORT_OUTPUT_HIGH:
					//set output direction
					SET_BIT(DDRC,PinIndex);
    184e:	a4 e3       	ldi	r26, 0x34	; 52
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	e4 e3       	ldi	r30, 0x34	; 52
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	48 2f       	mov	r20, r24
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	28 2f       	mov	r18, r24
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	02 c0       	rjmp	.+4      	; 0x186a <PORT_enuSetPinMode+0x3f4>
    1866:	88 0f       	add	r24, r24
    1868:	99 1f       	adc	r25, r25
    186a:	2a 95       	dec	r18
    186c:	e2 f7       	brpl	.-8      	; 0x1866 <PORT_enuSetPinMode+0x3f0>
    186e:	84 2b       	or	r24, r20
    1870:	8c 93       	st	X, r24
					SET_BIT(PORTC,PinIndex);
    1872:	a5 e3       	ldi	r26, 0x35	; 53
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	e5 e3       	ldi	r30, 0x35	; 53
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	48 2f       	mov	r20, r24
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	28 2f       	mov	r18, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	02 2e       	mov	r0, r18
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <PORT_enuSetPinMode+0x41a>
    188c:	88 0f       	add	r24, r24
    188e:	99 1f       	adc	r25, r25
    1890:	0a 94       	dec	r0
    1892:	e2 f7       	brpl	.-8      	; 0x188c <PORT_enuSetPinMode+0x416>
    1894:	84 2b       	or	r24, r20
    1896:	8c 93       	st	X, r24
    1898:	34 c1       	rjmp	.+616    	; 0x1b02 <PORT_enuSetPinMode+0x68c>
					break;
				case PORT_OUTPUT_LOW:
					SET_BIT(DDRC,PinIndex);
    189a:	a4 e3       	ldi	r26, 0x34	; 52
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	e4 e3       	ldi	r30, 0x34	; 52
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	48 2f       	mov	r20, r24
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	28 2f       	mov	r18, r24
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <PORT_enuSetPinMode+0x440>
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	2a 95       	dec	r18
    18b8:	e2 f7       	brpl	.-8      	; 0x18b2 <PORT_enuSetPinMode+0x43c>
    18ba:	84 2b       	or	r24, r20
    18bc:	8c 93       	st	X, r24
					CLEAR_BIT(PORTC,PinIndex);
    18be:	a5 e3       	ldi	r26, 0x35	; 53
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	e5 e3       	ldi	r30, 0x35	; 53
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	48 2f       	mov	r20, r24
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	02 2e       	mov	r0, r18
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <PORT_enuSetPinMode+0x466>
    18d8:	88 0f       	add	r24, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	0a 94       	dec	r0
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <PORT_enuSetPinMode+0x462>
    18e0:	80 95       	com	r24
    18e2:	84 23       	and	r24, r20
    18e4:	8c 93       	st	X, r24
    18e6:	0d c1       	rjmp	.+538    	; 0x1b02 <PORT_enuSetPinMode+0x68c>
					break;
				case PORT_INPUT_FLOATING:
					CLEAR_BIT(DDRC,PinIndex);
    18e8:	a4 e3       	ldi	r26, 0x34	; 52
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	e4 e3       	ldi	r30, 0x34	; 52
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	48 2f       	mov	r20, r24
    18f4:	89 81       	ldd	r24, Y+1	; 0x01
    18f6:	28 2f       	mov	r18, r24
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <PORT_enuSetPinMode+0x48e>
    1900:	88 0f       	add	r24, r24
    1902:	99 1f       	adc	r25, r25
    1904:	2a 95       	dec	r18
    1906:	e2 f7       	brpl	.-8      	; 0x1900 <PORT_enuSetPinMode+0x48a>
    1908:	80 95       	com	r24
    190a:	84 23       	and	r24, r20
    190c:	8c 93       	st	X, r24
					CLEAR_BIT(PORTC,PinIndex);
    190e:	a5 e3       	ldi	r26, 0x35	; 53
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	e5 e3       	ldi	r30, 0x35	; 53
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	48 2f       	mov	r20, r24
    191a:	89 81       	ldd	r24, Y+1	; 0x01
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	02 2e       	mov	r0, r18
    1926:	02 c0       	rjmp	.+4      	; 0x192c <PORT_enuSetPinMode+0x4b6>
    1928:	88 0f       	add	r24, r24
    192a:	99 1f       	adc	r25, r25
    192c:	0a 94       	dec	r0
    192e:	e2 f7       	brpl	.-8      	; 0x1928 <PORT_enuSetPinMode+0x4b2>
    1930:	80 95       	com	r24
    1932:	84 23       	and	r24, r20
    1934:	8c 93       	st	X, r24
    1936:	e5 c0       	rjmp	.+458    	; 0x1b02 <PORT_enuSetPinMode+0x68c>

					break;
				case PORT_INPUT_PULLUP:
					CLEAR_BIT(DDRC,PinIndex);
    1938:	a4 e3       	ldi	r26, 0x34	; 52
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	e4 e3       	ldi	r30, 0x34	; 52
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	48 2f       	mov	r20, r24
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <PORT_enuSetPinMode+0x4de>
    1950:	88 0f       	add	r24, r24
    1952:	99 1f       	adc	r25, r25
    1954:	2a 95       	dec	r18
    1956:	e2 f7       	brpl	.-8      	; 0x1950 <PORT_enuSetPinMode+0x4da>
    1958:	80 95       	com	r24
    195a:	84 23       	and	r24, r20
    195c:	8c 93       	st	X, r24
					SET_BIT(PORTC,PinIndex);
    195e:	a5 e3       	ldi	r26, 0x35	; 53
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	e5 e3       	ldi	r30, 0x35	; 53
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	48 2f       	mov	r20, r24
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	28 2f       	mov	r18, r24
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	02 2e       	mov	r0, r18
    1976:	02 c0       	rjmp	.+4      	; 0x197c <PORT_enuSetPinMode+0x506>
    1978:	88 0f       	add	r24, r24
    197a:	99 1f       	adc	r25, r25
    197c:	0a 94       	dec	r0
    197e:	e2 f7       	brpl	.-8      	; 0x1978 <PORT_enuSetPinMode+0x502>
    1980:	84 2b       	or	r24, r20
    1982:	8c 93       	st	X, r24
    1984:	be c0       	rjmp	.+380    	; 0x1b02 <PORT_enuSetPinMode+0x68c>
				}
				break;

				case PORT_D:
					//which mode ---PORT_OUTPUT_HIGH---PORT_OUTPUT_LOW----PORT_INPUT_FLOATING----PORT_INPUT_PULLUP
					switch(Copy_u8PinMode)
    1986:	8d 81       	ldd	r24, Y+5	; 0x05
    1988:	28 2f       	mov	r18, r24
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	3f 83       	std	Y+7, r19	; 0x07
    198e:	2e 83       	std	Y+6, r18	; 0x06
    1990:	8e 81       	ldd	r24, Y+6	; 0x06
    1992:	9f 81       	ldd	r25, Y+7	; 0x07
    1994:	83 30       	cpi	r24, 0x03	; 3
    1996:	91 05       	cpc	r25, r1
    1998:	09 f4       	brne	.+2      	; 0x199c <PORT_enuSetPinMode+0x526>
    199a:	3e c0       	rjmp	.+124    	; 0x1a18 <PORT_enuSetPinMode+0x5a2>
    199c:	2e 81       	ldd	r18, Y+6	; 0x06
    199e:	3f 81       	ldd	r19, Y+7	; 0x07
    19a0:	24 30       	cpi	r18, 0x04	; 4
    19a2:	31 05       	cpc	r19, r1
    19a4:	34 f4       	brge	.+12     	; 0x19b2 <PORT_enuSetPinMode+0x53c>
    19a6:	8e 81       	ldd	r24, Y+6	; 0x06
    19a8:	9f 81       	ldd	r25, Y+7	; 0x07
    19aa:	82 30       	cpi	r24, 0x02	; 2
    19ac:	91 05       	cpc	r25, r1
    19ae:	71 f0       	breq	.+28     	; 0x19cc <PORT_enuSetPinMode+0x556>
    19b0:	a8 c0       	rjmp	.+336    	; 0x1b02 <PORT_enuSetPinMode+0x68c>
    19b2:	2e 81       	ldd	r18, Y+6	; 0x06
    19b4:	3f 81       	ldd	r19, Y+7	; 0x07
    19b6:	24 30       	cpi	r18, 0x04	; 4
    19b8:	31 05       	cpc	r19, r1
    19ba:	09 f4       	brne	.+2      	; 0x19be <PORT_enuSetPinMode+0x548>
    19bc:	54 c0       	rjmp	.+168    	; 0x1a66 <PORT_enuSetPinMode+0x5f0>
    19be:	8e 81       	ldd	r24, Y+6	; 0x06
    19c0:	9f 81       	ldd	r25, Y+7	; 0x07
    19c2:	85 30       	cpi	r24, 0x05	; 5
    19c4:	91 05       	cpc	r25, r1
    19c6:	09 f4       	brne	.+2      	; 0x19ca <PORT_enuSetPinMode+0x554>
    19c8:	76 c0       	rjmp	.+236    	; 0x1ab6 <PORT_enuSetPinMode+0x640>
    19ca:	9b c0       	rjmp	.+310    	; 0x1b02 <PORT_enuSetPinMode+0x68c>
					{
					case PORT_OUTPUT_HIGH:
						//set output direction
						SET_BIT(DDRD,PinIndex);
    19cc:	a1 e3       	ldi	r26, 0x31	; 49
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	e1 e3       	ldi	r30, 0x31	; 49
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	48 2f       	mov	r20, r24
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	28 2f       	mov	r18, r24
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <PORT_enuSetPinMode+0x572>
    19e4:	88 0f       	add	r24, r24
    19e6:	99 1f       	adc	r25, r25
    19e8:	2a 95       	dec	r18
    19ea:	e2 f7       	brpl	.-8      	; 0x19e4 <PORT_enuSetPinMode+0x56e>
    19ec:	84 2b       	or	r24, r20
    19ee:	8c 93       	st	X, r24
						SET_BIT(PORTD,PinIndex);
    19f0:	a2 e3       	ldi	r26, 0x32	; 50
    19f2:	b0 e0       	ldi	r27, 0x00	; 0
    19f4:	e2 e3       	ldi	r30, 0x32	; 50
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	48 2f       	mov	r20, r24
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
    19fe:	28 2f       	mov	r18, r24
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	02 2e       	mov	r0, r18
    1a08:	02 c0       	rjmp	.+4      	; 0x1a0e <PORT_enuSetPinMode+0x598>
    1a0a:	88 0f       	add	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	0a 94       	dec	r0
    1a10:	e2 f7       	brpl	.-8      	; 0x1a0a <PORT_enuSetPinMode+0x594>
    1a12:	84 2b       	or	r24, r20
    1a14:	8c 93       	st	X, r24
    1a16:	75 c0       	rjmp	.+234    	; 0x1b02 <PORT_enuSetPinMode+0x68c>
						break;
					case PORT_OUTPUT_LOW:
						SET_BIT(DDRD,PinIndex);
    1a18:	a1 e3       	ldi	r26, 0x31	; 49
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	e1 e3       	ldi	r30, 0x31	; 49
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	48 2f       	mov	r20, r24
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	28 2f       	mov	r18, r24
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <PORT_enuSetPinMode+0x5be>
    1a30:	88 0f       	add	r24, r24
    1a32:	99 1f       	adc	r25, r25
    1a34:	2a 95       	dec	r18
    1a36:	e2 f7       	brpl	.-8      	; 0x1a30 <PORT_enuSetPinMode+0x5ba>
    1a38:	84 2b       	or	r24, r20
    1a3a:	8c 93       	st	X, r24
						CLEAR_BIT(PORTD,PinIndex);
    1a3c:	a2 e3       	ldi	r26, 0x32	; 50
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	e2 e3       	ldi	r30, 0x32	; 50
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	48 2f       	mov	r20, r24
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	28 2f       	mov	r18, r24
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	02 2e       	mov	r0, r18
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <PORT_enuSetPinMode+0x5e4>
    1a56:	88 0f       	add	r24, r24
    1a58:	99 1f       	adc	r25, r25
    1a5a:	0a 94       	dec	r0
    1a5c:	e2 f7       	brpl	.-8      	; 0x1a56 <PORT_enuSetPinMode+0x5e0>
    1a5e:	80 95       	com	r24
    1a60:	84 23       	and	r24, r20
    1a62:	8c 93       	st	X, r24
    1a64:	4e c0       	rjmp	.+156    	; 0x1b02 <PORT_enuSetPinMode+0x68c>
						break;
					case PORT_INPUT_FLOATING:
						CLEAR_BIT(DDRD,PinIndex);
    1a66:	a1 e3       	ldi	r26, 0x31	; 49
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e1 e3       	ldi	r30, 0x31	; 49
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	48 2f       	mov	r20, r24
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	28 2f       	mov	r18, r24
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	02 c0       	rjmp	.+4      	; 0x1a82 <PORT_enuSetPinMode+0x60c>
    1a7e:	88 0f       	add	r24, r24
    1a80:	99 1f       	adc	r25, r25
    1a82:	2a 95       	dec	r18
    1a84:	e2 f7       	brpl	.-8      	; 0x1a7e <PORT_enuSetPinMode+0x608>
    1a86:	80 95       	com	r24
    1a88:	84 23       	and	r24, r20
    1a8a:	8c 93       	st	X, r24
						CLEAR_BIT(PORTD,PinIndex);
    1a8c:	a2 e3       	ldi	r26, 0x32	; 50
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	e2 e3       	ldi	r30, 0x32	; 50
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	48 2f       	mov	r20, r24
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	28 2f       	mov	r18, r24
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	02 2e       	mov	r0, r18
    1aa4:	02 c0       	rjmp	.+4      	; 0x1aaa <PORT_enuSetPinMode+0x634>
    1aa6:	88 0f       	add	r24, r24
    1aa8:	99 1f       	adc	r25, r25
    1aaa:	0a 94       	dec	r0
    1aac:	e2 f7       	brpl	.-8      	; 0x1aa6 <PORT_enuSetPinMode+0x630>
    1aae:	80 95       	com	r24
    1ab0:	84 23       	and	r24, r20
    1ab2:	8c 93       	st	X, r24
    1ab4:	26 c0       	rjmp	.+76     	; 0x1b02 <PORT_enuSetPinMode+0x68c>

						break;
					case PORT_INPUT_PULLUP:
						CLEAR_BIT(DDRD,PinIndex);
    1ab6:	a1 e3       	ldi	r26, 0x31	; 49
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	e1 e3       	ldi	r30, 0x31	; 49
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	48 2f       	mov	r20, r24
    1ac2:	89 81       	ldd	r24, Y+1	; 0x01
    1ac4:	28 2f       	mov	r18, r24
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <PORT_enuSetPinMode+0x65c>
    1ace:	88 0f       	add	r24, r24
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	2a 95       	dec	r18
    1ad4:	e2 f7       	brpl	.-8      	; 0x1ace <PORT_enuSetPinMode+0x658>
    1ad6:	80 95       	com	r24
    1ad8:	84 23       	and	r24, r20
    1ada:	8c 93       	st	X, r24
						SET_BIT(PORTD,PinIndex);
    1adc:	a2 e3       	ldi	r26, 0x32	; 50
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	e2 e3       	ldi	r30, 0x32	; 50
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	48 2f       	mov	r20, r24
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
    1aea:	28 2f       	mov	r18, r24
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	02 2e       	mov	r0, r18
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <PORT_enuSetPinMode+0x684>
    1af6:	88 0f       	add	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	0a 94       	dec	r0
    1afc:	e2 f7       	brpl	.-8      	; 0x1af6 <PORT_enuSetPinMode+0x680>
    1afe:	84 2b       	or	r24, r20
    1b00:	8c 93       	st	X, r24
					}
					break;

	}
	//return Error Status
	return LOC_u8ErrorStatus;
    1b02:	8b 81       	ldd	r24, Y+3	; 0x03

}
    1b04:	2f 96       	adiw	r28, 0x0f	; 15
    1b06:	0f b6       	in	r0, 0x3f	; 63
    1b08:	f8 94       	cli
    1b0a:	de bf       	out	0x3e, r29	; 62
    1b0c:	0f be       	out	0x3f, r0	; 63
    1b0e:	cd bf       	out	0x3d, r28	; 61
    1b10:	cf 91       	pop	r28
    1b12:	df 91       	pop	r29
    1b14:	08 95       	ret

00001b16 <PORT_enuSetDirection>:
 *                   2.Copy_u8PinDirection --> Direction
 * Parameters(OUT) : value of enum type PORT_tenuLOC_u8ErrorStatus
 *******************************************************************************************/

PORT_tenuErrorStatus PORT_enuSetDirection(PortPinType Copy_u8PinId,PortPinType Copy_u8PinDirection)
{
    1b16:	df 93       	push	r29
    1b18:	cf 93       	push	r28
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
    1b1e:	2f 97       	sbiw	r28, 0x0f	; 15
    1b20:	0f b6       	in	r0, 0x3f	; 63
    1b22:	f8 94       	cli
    1b24:	de bf       	out	0x3e, r29	; 62
    1b26:	0f be       	out	0x3f, r0	; 63
    1b28:	cd bf       	out	0x3d, r28	; 61
    1b2a:	8c 83       	std	Y+4, r24	; 0x04
    1b2c:	6d 83       	std	Y+5, r22	; 0x05
	//local variable for Error status
	uint8 LOC_u8ErrorStatus=PORT_enuOK;
    1b2e:	1b 82       	std	Y+3, r1	; 0x03

	uint8 PortIndex=0,PinIndex=0;
    1b30:	1a 82       	std	Y+2, r1	; 0x02
    1b32:	19 82       	std	Y+1, r1	; 0x01

	PortIndex=(Copy_u8PinId/8);
    1b34:	8c 81       	ldd	r24, Y+4	; 0x04
    1b36:	86 95       	lsr	r24
    1b38:	86 95       	lsr	r24
    1b3a:	86 95       	lsr	r24
    1b3c:	8a 83       	std	Y+2, r24	; 0x02

	PinIndex=Copy_u8PinId%8;
    1b3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b40:	87 70       	andi	r24, 0x07	; 7
    1b42:	89 83       	std	Y+1, r24	; 0x01


	if(Copy_u8PinId>PORT_NUMBER_OF_PINS)
    1b44:	8c 81       	ldd	r24, Y+4	; 0x04
    1b46:	81 32       	cpi	r24, 0x21	; 33
    1b48:	10 f0       	brcs	.+4      	; 0x1b4e <PORT_enuSetDirection+0x38>
	{
		LOC_u8ErrorStatus=PORT_enuPinError;
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	8b 83       	std	Y+3, r24	; 0x03
	}

	if(PortIndex>PORT_NUMBER_OF_PORTS)
    1b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b50:	85 30       	cpi	r24, 0x05	; 5
    1b52:	10 f0       	brcs	.+4      	; 0x1b58 <PORT_enuSetDirection+0x42>
	{
		LOC_u8ErrorStatus=PORT_enuPortError;
    1b54:	82 e0       	ldi	r24, 0x02	; 2
    1b56:	8b 83       	std	Y+3, r24	; 0x03
	}

	if((Copy_u8PinDirection != PORT_INPUT_Direction) ||(Copy_u8PinDirection != PORT_OUTPUT_Direction))
    1b58:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5a:	86 30       	cpi	r24, 0x06	; 6
    1b5c:	19 f4       	brne	.+6      	; 0x1b64 <PORT_enuSetDirection+0x4e>
    1b5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b60:	87 30       	cpi	r24, 0x07	; 7
    1b62:	11 f0       	breq	.+4      	; 0x1b68 <PORT_enuSetDirection+0x52>
	{
		LOC_u8ErrorStatus=Por_enuDirectionError;
    1b64:	84 e0       	ldi	r24, 0x04	; 4
    1b66:	8b 83       	std	Y+3, r24	; 0x03

	}


	switch(PortIndex)
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	28 2f       	mov	r18, r24
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	3f 87       	std	Y+15, r19	; 0x0f
    1b70:	2e 87       	std	Y+14, r18	; 0x0e
    1b72:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b74:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b76:	81 30       	cpi	r24, 0x01	; 1
    1b78:	91 05       	cpc	r25, r1
    1b7a:	09 f4       	brne	.+2      	; 0x1b7e <PORT_enuSetDirection+0x68>
    1b7c:	50 c0       	rjmp	.+160    	; 0x1c1e <PORT_enuSetDirection+0x108>
    1b7e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1b80:	3f 85       	ldd	r19, Y+15	; 0x0f
    1b82:	22 30       	cpi	r18, 0x02	; 2
    1b84:	31 05       	cpc	r19, r1
    1b86:	2c f4       	brge	.+10     	; 0x1b92 <PORT_enuSetDirection+0x7c>
    1b88:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b8a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b8c:	00 97       	sbiw	r24, 0x00	; 0
    1b8e:	71 f0       	breq	.+28     	; 0x1bac <PORT_enuSetDirection+0x96>
    1b90:	f0 c0       	rjmp	.+480    	; 0x1d72 <PORT_enuSetDirection+0x25c>
    1b92:	2e 85       	ldd	r18, Y+14	; 0x0e
    1b94:	3f 85       	ldd	r19, Y+15	; 0x0f
    1b96:	22 30       	cpi	r18, 0x02	; 2
    1b98:	31 05       	cpc	r19, r1
    1b9a:	09 f4       	brne	.+2      	; 0x1b9e <PORT_enuSetDirection+0x88>
    1b9c:	79 c0       	rjmp	.+242    	; 0x1c90 <PORT_enuSetDirection+0x17a>
    1b9e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ba0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ba2:	83 30       	cpi	r24, 0x03	; 3
    1ba4:	91 05       	cpc	r25, r1
    1ba6:	09 f4       	brne	.+2      	; 0x1baa <PORT_enuSetDirection+0x94>
    1ba8:	ac c0       	rjmp	.+344    	; 0x1d02 <PORT_enuSetDirection+0x1ec>
    1baa:	e3 c0       	rjmp	.+454    	; 0x1d72 <PORT_enuSetDirection+0x25c>
	{

	case PORT_A:

		switch(Copy_u8PinDirection)
    1bac:	8d 81       	ldd	r24, Y+5	; 0x05
    1bae:	28 2f       	mov	r18, r24
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	3d 87       	std	Y+13, r19	; 0x0d
    1bb4:	2c 87       	std	Y+12, r18	; 0x0c
    1bb6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bb8:	9d 85       	ldd	r25, Y+13	; 0x0d
    1bba:	86 30       	cpi	r24, 0x06	; 6
    1bbc:	91 05       	cpc	r25, r1
    1bbe:	31 f0       	breq	.+12     	; 0x1bcc <PORT_enuSetDirection+0xb6>
    1bc0:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bc2:	3d 85       	ldd	r19, Y+13	; 0x0d
    1bc4:	27 30       	cpi	r18, 0x07	; 7
    1bc6:	31 05       	cpc	r19, r1
    1bc8:	b1 f0       	breq	.+44     	; 0x1bf6 <PORT_enuSetDirection+0xe0>
    1bca:	d3 c0       	rjmp	.+422    	; 0x1d72 <PORT_enuSetDirection+0x25c>
		{
		case PORT_INPUT_Direction:
			CLEAR_BIT(DDRA,PinIndex);
    1bcc:	aa e3       	ldi	r26, 0x3A	; 58
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	ea e3       	ldi	r30, 0x3A	; 58
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	48 2f       	mov	r20, r24
    1bd8:	89 81       	ldd	r24, Y+1	; 0x01
    1bda:	28 2f       	mov	r18, r24
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	02 2e       	mov	r0, r18
    1be4:	02 c0       	rjmp	.+4      	; 0x1bea <PORT_enuSetDirection+0xd4>
    1be6:	88 0f       	add	r24, r24
    1be8:	99 1f       	adc	r25, r25
    1bea:	0a 94       	dec	r0
    1bec:	e2 f7       	brpl	.-8      	; 0x1be6 <PORT_enuSetDirection+0xd0>
    1bee:	80 95       	com	r24
    1bf0:	84 23       	and	r24, r20
    1bf2:	8c 93       	st	X, r24
    1bf4:	be c0       	rjmp	.+380    	; 0x1d72 <PORT_enuSetDirection+0x25c>
			break;
		case PORT_OUTPUT_Direction:
			SET_BIT(PORTA,PinIndex);
    1bf6:	ab e3       	ldi	r26, 0x3B	; 59
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	eb e3       	ldi	r30, 0x3B	; 59
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	48 2f       	mov	r20, r24
    1c02:	89 81       	ldd	r24, Y+1	; 0x01
    1c04:	28 2f       	mov	r18, r24
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	02 2e       	mov	r0, r18
    1c0e:	02 c0       	rjmp	.+4      	; 0x1c14 <PORT_enuSetDirection+0xfe>
    1c10:	88 0f       	add	r24, r24
    1c12:	99 1f       	adc	r25, r25
    1c14:	0a 94       	dec	r0
    1c16:	e2 f7       	brpl	.-8      	; 0x1c10 <PORT_enuSetDirection+0xfa>
    1c18:	84 2b       	or	r24, r20
    1c1a:	8c 93       	st	X, r24
    1c1c:	aa c0       	rjmp	.+340    	; 0x1d72 <PORT_enuSetDirection+0x25c>
		}
		break;

		case PORT_B:

			switch(Copy_u8PinDirection)
    1c1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c20:	28 2f       	mov	r18, r24
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	3b 87       	std	Y+11, r19	; 0x0b
    1c26:	2a 87       	std	Y+10, r18	; 0x0a
    1c28:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c2a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c2c:	86 30       	cpi	r24, 0x06	; 6
    1c2e:	91 05       	cpc	r25, r1
    1c30:	31 f0       	breq	.+12     	; 0x1c3e <PORT_enuSetDirection+0x128>
    1c32:	2a 85       	ldd	r18, Y+10	; 0x0a
    1c34:	3b 85       	ldd	r19, Y+11	; 0x0b
    1c36:	27 30       	cpi	r18, 0x07	; 7
    1c38:	31 05       	cpc	r19, r1
    1c3a:	b1 f0       	breq	.+44     	; 0x1c68 <PORT_enuSetDirection+0x152>
    1c3c:	9a c0       	rjmp	.+308    	; 0x1d72 <PORT_enuSetDirection+0x25c>
			{
			case PORT_INPUT_Direction:
				CLEAR_BIT(DDRB,PinIndex);
    1c3e:	a7 e3       	ldi	r26, 0x37	; 55
    1c40:	b0 e0       	ldi	r27, 0x00	; 0
    1c42:	e7 e3       	ldi	r30, 0x37	; 55
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	48 2f       	mov	r20, r24
    1c4a:	89 81       	ldd	r24, Y+1	; 0x01
    1c4c:	28 2f       	mov	r18, r24
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	02 2e       	mov	r0, r18
    1c56:	02 c0       	rjmp	.+4      	; 0x1c5c <PORT_enuSetDirection+0x146>
    1c58:	88 0f       	add	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	0a 94       	dec	r0
    1c5e:	e2 f7       	brpl	.-8      	; 0x1c58 <PORT_enuSetDirection+0x142>
    1c60:	80 95       	com	r24
    1c62:	84 23       	and	r24, r20
    1c64:	8c 93       	st	X, r24
    1c66:	85 c0       	rjmp	.+266    	; 0x1d72 <PORT_enuSetDirection+0x25c>
				break;
			case PORT_OUTPUT_Direction:
				SET_BIT(PORTB,PinIndex);
    1c68:	a8 e3       	ldi	r26, 0x38	; 56
    1c6a:	b0 e0       	ldi	r27, 0x00	; 0
    1c6c:	e8 e3       	ldi	r30, 0x38	; 56
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	48 2f       	mov	r20, r24
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
    1c76:	28 2f       	mov	r18, r24
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	02 2e       	mov	r0, r18
    1c80:	02 c0       	rjmp	.+4      	; 0x1c86 <PORT_enuSetDirection+0x170>
    1c82:	88 0f       	add	r24, r24
    1c84:	99 1f       	adc	r25, r25
    1c86:	0a 94       	dec	r0
    1c88:	e2 f7       	brpl	.-8      	; 0x1c82 <PORT_enuSetDirection+0x16c>
    1c8a:	84 2b       	or	r24, r20
    1c8c:	8c 93       	st	X, r24
    1c8e:	71 c0       	rjmp	.+226    	; 0x1d72 <PORT_enuSetDirection+0x25c>

			break;

			case PORT_C:

				switch(Copy_u8PinDirection)
    1c90:	8d 81       	ldd	r24, Y+5	; 0x05
    1c92:	28 2f       	mov	r18, r24
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	39 87       	std	Y+9, r19	; 0x09
    1c98:	28 87       	std	Y+8, r18	; 0x08
    1c9a:	88 85       	ldd	r24, Y+8	; 0x08
    1c9c:	99 85       	ldd	r25, Y+9	; 0x09
    1c9e:	86 30       	cpi	r24, 0x06	; 6
    1ca0:	91 05       	cpc	r25, r1
    1ca2:	31 f0       	breq	.+12     	; 0x1cb0 <PORT_enuSetDirection+0x19a>
    1ca4:	28 85       	ldd	r18, Y+8	; 0x08
    1ca6:	39 85       	ldd	r19, Y+9	; 0x09
    1ca8:	27 30       	cpi	r18, 0x07	; 7
    1caa:	31 05       	cpc	r19, r1
    1cac:	b1 f0       	breq	.+44     	; 0x1cda <PORT_enuSetDirection+0x1c4>
    1cae:	61 c0       	rjmp	.+194    	; 0x1d72 <PORT_enuSetDirection+0x25c>
				{
				case PORT_INPUT_Direction:
					CLEAR_BIT(DDRC,PinIndex);
    1cb0:	a4 e3       	ldi	r26, 0x34	; 52
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	e4 e3       	ldi	r30, 0x34	; 52
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	48 2f       	mov	r20, r24
    1cbc:	89 81       	ldd	r24, Y+1	; 0x01
    1cbe:	28 2f       	mov	r18, r24
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	02 2e       	mov	r0, r18
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <PORT_enuSetDirection+0x1b8>
    1cca:	88 0f       	add	r24, r24
    1ccc:	99 1f       	adc	r25, r25
    1cce:	0a 94       	dec	r0
    1cd0:	e2 f7       	brpl	.-8      	; 0x1cca <PORT_enuSetDirection+0x1b4>
    1cd2:	80 95       	com	r24
    1cd4:	84 23       	and	r24, r20
    1cd6:	8c 93       	st	X, r24
    1cd8:	4c c0       	rjmp	.+152    	; 0x1d72 <PORT_enuSetDirection+0x25c>
					break;
				case PORT_OUTPUT_Direction:
					SET_BIT(PORTC,PinIndex);
    1cda:	a5 e3       	ldi	r26, 0x35	; 53
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	e5 e3       	ldi	r30, 0x35	; 53
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	48 2f       	mov	r20, r24
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	28 2f       	mov	r18, r24
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	02 2e       	mov	r0, r18
    1cf2:	02 c0       	rjmp	.+4      	; 0x1cf8 <PORT_enuSetDirection+0x1e2>
    1cf4:	88 0f       	add	r24, r24
    1cf6:	99 1f       	adc	r25, r25
    1cf8:	0a 94       	dec	r0
    1cfa:	e2 f7       	brpl	.-8      	; 0x1cf4 <PORT_enuSetDirection+0x1de>
    1cfc:	84 2b       	or	r24, r20
    1cfe:	8c 93       	st	X, r24
    1d00:	38 c0       	rjmp	.+112    	; 0x1d72 <PORT_enuSetDirection+0x25c>
				}
				break;

				case PORT_D:

					switch(Copy_u8PinDirection)
    1d02:	8d 81       	ldd	r24, Y+5	; 0x05
    1d04:	28 2f       	mov	r18, r24
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	3f 83       	std	Y+7, r19	; 0x07
    1d0a:	2e 83       	std	Y+6, r18	; 0x06
    1d0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d0e:	9f 81       	ldd	r25, Y+7	; 0x07
    1d10:	86 30       	cpi	r24, 0x06	; 6
    1d12:	91 05       	cpc	r25, r1
    1d14:	31 f0       	breq	.+12     	; 0x1d22 <PORT_enuSetDirection+0x20c>
    1d16:	2e 81       	ldd	r18, Y+6	; 0x06
    1d18:	3f 81       	ldd	r19, Y+7	; 0x07
    1d1a:	27 30       	cpi	r18, 0x07	; 7
    1d1c:	31 05       	cpc	r19, r1
    1d1e:	b1 f0       	breq	.+44     	; 0x1d4c <PORT_enuSetDirection+0x236>
    1d20:	28 c0       	rjmp	.+80     	; 0x1d72 <PORT_enuSetDirection+0x25c>
					{
					case PORT_INPUT_Direction:
						CLEAR_BIT(DDRD,PinIndex);
    1d22:	a1 e3       	ldi	r26, 0x31	; 49
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	e1 e3       	ldi	r30, 0x31	; 49
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	48 2f       	mov	r20, r24
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
    1d30:	28 2f       	mov	r18, r24
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	02 2e       	mov	r0, r18
    1d3a:	02 c0       	rjmp	.+4      	; 0x1d40 <PORT_enuSetDirection+0x22a>
    1d3c:	88 0f       	add	r24, r24
    1d3e:	99 1f       	adc	r25, r25
    1d40:	0a 94       	dec	r0
    1d42:	e2 f7       	brpl	.-8      	; 0x1d3c <PORT_enuSetDirection+0x226>
    1d44:	80 95       	com	r24
    1d46:	84 23       	and	r24, r20
    1d48:	8c 93       	st	X, r24
    1d4a:	13 c0       	rjmp	.+38     	; 0x1d72 <PORT_enuSetDirection+0x25c>
						break;
					case PORT_OUTPUT_Direction:
						SET_BIT(PORTD,PinIndex);
    1d4c:	a2 e3       	ldi	r26, 0x32	; 50
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	e2 e3       	ldi	r30, 0x32	; 50
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	80 81       	ld	r24, Z
    1d56:	48 2f       	mov	r20, r24
    1d58:	89 81       	ldd	r24, Y+1	; 0x01
    1d5a:	28 2f       	mov	r18, r24
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	02 2e       	mov	r0, r18
    1d64:	02 c0       	rjmp	.+4      	; 0x1d6a <PORT_enuSetDirection+0x254>
    1d66:	88 0f       	add	r24, r24
    1d68:	99 1f       	adc	r25, r25
    1d6a:	0a 94       	dec	r0
    1d6c:	e2 f7       	brpl	.-8      	; 0x1d66 <PORT_enuSetDirection+0x250>
    1d6e:	84 2b       	or	r24, r20
    1d70:	8c 93       	st	X, r24
					}
					break;

	}

	return LOC_u8ErrorStatus;
    1d72:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1d74:	2f 96       	adiw	r28, 0x0f	; 15
    1d76:	0f b6       	in	r0, 0x3f	; 63
    1d78:	f8 94       	cli
    1d7a:	de bf       	out	0x3e, r29	; 62
    1d7c:	0f be       	out	0x3f, r0	; 63
    1d7e:	cd bf       	out	0x3d, r28	; 61
    1d80:	cf 91       	pop	r28
    1d82:	df 91       	pop	r29
    1d84:	08 95       	ret

00001d86 <EXTI_CallBack>:
#include "EXTI_Cfg.h"
#include "EXTI_Prv.h"


EXTI_tenuErrorStatus EXTI_CallBack(void(*Func_Ptr)(void),uint8 Copy_u8Index)
{
    1d86:	df 93       	push	r29
    1d88:	cf 93       	push	r28
    1d8a:	00 d0       	rcall	.+0      	; 0x1d8c <EXTI_CallBack+0x6>
    1d8c:	00 d0       	rcall	.+0      	; 0x1d8e <EXTI_CallBack+0x8>
    1d8e:	cd b7       	in	r28, 0x3d	; 61
    1d90:	de b7       	in	r29, 0x3e	; 62
    1d92:	9b 83       	std	Y+3, r25	; 0x03
    1d94:	8a 83       	std	Y+2, r24	; 0x02
    1d96:	6c 83       	std	Y+4, r22	; 0x04
	uint8 ErrorStatus=EXTI_enuOK;
    1d98:	19 82       	std	Y+1, r1	; 0x01
	if(Func_Ptr==Null_ptr)
    1d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d9e:	00 97       	sbiw	r24, 0x00	; 0
    1da0:	19 f4       	brne	.+6      	; 0x1da8 <EXTI_CallBack+0x22>
	{
		ErrorStatus=EXTI_NullPtr;
    1da2:	83 e0       	ldi	r24, 0x03	; 3
    1da4:	89 83       	std	Y+1, r24	; 0x01
    1da6:	0c c0       	rjmp	.+24     	; 0x1dc0 <EXTI_CallBack+0x3a>
	}
	else{


	EXTIINT_Ptr[Copy_u8Index]=Func_Ptr;
    1da8:	8c 81       	ldd	r24, Y+4	; 0x04
    1daa:	88 2f       	mov	r24, r24
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	88 0f       	add	r24, r24
    1db0:	99 1f       	adc	r25, r25
    1db2:	fc 01       	movw	r30, r24
    1db4:	eb 58       	subi	r30, 0x8B	; 139
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dba:	9b 81       	ldd	r25, Y+3	; 0x03
    1dbc:	91 83       	std	Z+1, r25	; 0x01
    1dbe:	80 83       	st	Z, r24
        }
	return ErrorStatus;
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dc2:	0f 90       	pop	r0
    1dc4:	0f 90       	pop	r0
    1dc6:	0f 90       	pop	r0
    1dc8:	0f 90       	pop	r0
    1dca:	cf 91       	pop	r28
    1dcc:	df 91       	pop	r29
    1dce:	08 95       	ret

00001dd0 <EXTI_Init>:




void EXTI_Init(void)
{
    1dd0:	df 93       	push	r29
    1dd2:	cf 93       	push	r28
    1dd4:	cd b7       	in	r28, 0x3d	; 61
    1dd6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,EXTI_INT0);
#elif(EXTI_INT0_MODE==EXTI_INT0_ENABLE_WITH_LOGICAL_CHANGE)
	MCUCR =(MCUCR & 0xFC) |EXTI_INT0_ENABLE_WITH_LOGICAL_CHANGE;
	SET_BIT(GICR,EXTI_INT0);
#elif(EXTI_INT0_MODE==EXTI_INT0_ENABLE_WITH_FALLING_EDGE)
	MCUCR =(MCUCR & 0xFC) |EXTI_INT0_ENABLE_WITH_FALLING_EDGE;
    1dd8:	a5 e5       	ldi	r26, 0x55	; 85
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	e5 e5       	ldi	r30, 0x55	; 85
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	8c 7f       	andi	r24, 0xFC	; 252
    1de4:	82 60       	ori	r24, 0x02	; 2
    1de6:	8c 93       	st	X, r24
	SET_BIT(GICR,EXTI_INT0);
    1de8:	ab e5       	ldi	r26, 0x5B	; 91
    1dea:	b0 e0       	ldi	r27, 0x00	; 0
    1dec:	eb e5       	ldi	r30, 0x5B	; 91
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	80 81       	ld	r24, Z
    1df2:	80 64       	ori	r24, 0x40	; 64
    1df4:	8c 93       	st	X, r24
	MCUCR =(MCUCR & 0xF3) |(EXTI_INT1_ENABLE_WITH_LOGICAL_CHANGE<<2);
	SET_BIT(GICR,EXTI_INT1);


#elif(EXTI_INT1_MODE==EXTI_INT1_ENABLE_WITH_FALLING_EDGE)
	MCUCR =(MCUCR & 0xF3) | (EXTI_INT1_ENABLE_WITH_FALLING_EDGE<<2);
    1df6:	a5 e5       	ldi	r26, 0x55	; 85
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	e5 e5       	ldi	r30, 0x55	; 85
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
    1e00:	83 7f       	andi	r24, 0xF3	; 243
    1e02:	88 60       	ori	r24, 0x08	; 8
    1e04:	8c 93       	st	X, r24
	SET_BIT(GICR,EXTI_INT1);
    1e06:	ab e5       	ldi	r26, 0x5B	; 91
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	eb e5       	ldi	r30, 0x5B	; 91
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	80 68       	ori	r24, 0x80	; 128
    1e12:	8c 93       	st	X, r24
#if(EXTI_INT2_MODE==EXTI_INT2_DISABLE)
	CLEAR_BIT(GICR,EXTI_INT2);


#elif(EXTI_INT2_MODE==EXTI_INT2_ENABLE_WITH_FALLING_EDGE)
	MCUCSR &=	EXTI_INT2_ENABLE_WITH_FALLING_EDGE;
    1e14:	a4 e5       	ldi	r26, 0x54	; 84
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	e4 e5       	ldi	r30, 0x54	; 84
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	8f 7b       	andi	r24, 0xBF	; 191
    1e20:	8c 93       	st	X, r24
	SET_BIT(GICR,EXTI_INT2);
    1e22:	ab e5       	ldi	r26, 0x5B	; 91
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	eb e5       	ldi	r30, 0x5B	; 91
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	80 62       	ori	r24, 0x20	; 32
    1e2e:	8c 93       	st	X, r24
#endif




}
    1e30:	cf 91       	pop	r28
    1e32:	df 91       	pop	r29
    1e34:	08 95       	ret

00001e36 <EXTI_Disable>:


EXTI_tenuErrorStatus EXTI_Disable(uint8 Copy_u8INTNum)
{
    1e36:	df 93       	push	r29
    1e38:	cf 93       	push	r28
    1e3a:	00 d0       	rcall	.+0      	; 0x1e3c <EXTI_Disable+0x6>
    1e3c:	00 d0       	rcall	.+0      	; 0x1e3e <EXTI_Disable+0x8>
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
    1e42:	8a 83       	std	Y+2, r24	; 0x02
	uint8 ErrorStatus=EXTI_enuOK;
    1e44:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8INTNum)
    1e46:	8a 81       	ldd	r24, Y+2	; 0x02
    1e48:	28 2f       	mov	r18, r24
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	3c 83       	std	Y+4, r19	; 0x04
    1e4e:	2b 83       	std	Y+3, r18	; 0x03
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	9c 81       	ldd	r25, Y+4	; 0x04
    1e54:	86 30       	cpi	r24, 0x06	; 6
    1e56:	91 05       	cpc	r25, r1
    1e58:	59 f0       	breq	.+22     	; 0x1e70 <EXTI_Disable+0x3a>
    1e5a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e5c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e5e:	27 30       	cpi	r18, 0x07	; 7
    1e60:	31 05       	cpc	r19, r1
    1e62:	71 f0       	breq	.+28     	; 0x1e80 <EXTI_Disable+0x4a>
    1e64:	8b 81       	ldd	r24, Y+3	; 0x03
    1e66:	9c 81       	ldd	r25, Y+4	; 0x04
    1e68:	85 30       	cpi	r24, 0x05	; 5
    1e6a:	91 05       	cpc	r25, r1
    1e6c:	89 f0       	breq	.+34     	; 0x1e90 <EXTI_Disable+0x5a>
    1e6e:	18 c0       	rjmp	.+48     	; 0x1ea0 <EXTI_Disable+0x6a>
	{
	case EXTI_INT0:
		CLEAR_BIT(GICR,EXTI_INT0);
    1e70:	ab e5       	ldi	r26, 0x5B	; 91
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	eb e5       	ldi	r30, 0x5B	; 91
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	8f 7b       	andi	r24, 0xBF	; 191
    1e7c:	8c 93       	st	X, r24
    1e7e:	12 c0       	rjmp	.+36     	; 0x1ea4 <EXTI_Disable+0x6e>
		break;
	case EXTI_INT1:
		CLEAR_BIT(GICR,EXTI_INT1);
    1e80:	ab e5       	ldi	r26, 0x5B	; 91
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	eb e5       	ldi	r30, 0x5B	; 91
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	8f 77       	andi	r24, 0x7F	; 127
    1e8c:	8c 93       	st	X, r24
    1e8e:	0a c0       	rjmp	.+20     	; 0x1ea4 <EXTI_Disable+0x6e>
		break;
	case EXTI_INT2:
		CLEAR_BIT(GICR,EXTI_INT2);
    1e90:	ab e5       	ldi	r26, 0x5B	; 91
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	eb e5       	ldi	r30, 0x5B	; 91
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	8f 7d       	andi	r24, 0xDF	; 223
    1e9c:	8c 93       	st	X, r24
    1e9e:	02 c0       	rjmp	.+4      	; 0x1ea4 <EXTI_Disable+0x6e>
		break;
	default:
		ErrorStatus=EXTI_enuWrongINT;
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return ErrorStatus;
    1ea4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	cf 91       	pop	r28
    1eb0:	df 91       	pop	r29
    1eb2:	08 95       	ret

00001eb4 <EXTI_Enable>:

EXTI_tenuErrorStatus EXTI_Enable(uint8 Copy_u8INTNum,uint8 Copy_u8INTMode)
{
    1eb4:	df 93       	push	r29
    1eb6:	cf 93       	push	r28
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
    1ebc:	2b 97       	sbiw	r28, 0x0b	; 11
    1ebe:	0f b6       	in	r0, 0x3f	; 63
    1ec0:	f8 94       	cli
    1ec2:	de bf       	out	0x3e, r29	; 62
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	cd bf       	out	0x3d, r28	; 61
    1ec8:	8a 83       	std	Y+2, r24	; 0x02
    1eca:	6b 83       	std	Y+3, r22	; 0x03
	uint8 ErrorStatus=EXTI_enuOK;
    1ecc:	19 82       	std	Y+1, r1	; 0x01


	switch(Copy_u8INTNum)
    1ece:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed0:	28 2f       	mov	r18, r24
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	3b 87       	std	Y+11, r19	; 0x0b
    1ed6:	2a 87       	std	Y+10, r18	; 0x0a
    1ed8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1eda:	9b 85       	ldd	r25, Y+11	; 0x0b
    1edc:	86 30       	cpi	r24, 0x06	; 6
    1ede:	91 05       	cpc	r25, r1
    1ee0:	69 f0       	breq	.+26     	; 0x1efc <EXTI_Enable+0x48>
    1ee2:	2a 85       	ldd	r18, Y+10	; 0x0a
    1ee4:	3b 85       	ldd	r19, Y+11	; 0x0b
    1ee6:	27 30       	cpi	r18, 0x07	; 7
    1ee8:	31 05       	cpc	r19, r1
    1eea:	09 f4       	brne	.+2      	; 0x1eee <EXTI_Enable+0x3a>
    1eec:	68 c0       	rjmp	.+208    	; 0x1fbe <EXTI_Enable+0x10a>
    1eee:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ef0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ef2:	85 30       	cpi	r24, 0x05	; 5
    1ef4:	91 05       	cpc	r25, r1
    1ef6:	09 f4       	brne	.+2      	; 0x1efa <EXTI_Enable+0x46>
    1ef8:	c3 c0       	rjmp	.+390    	; 0x2080 <EXTI_Enable+0x1cc>
    1efa:	f2 c0       	rjmp	.+484    	; 0x20e0 <EXTI_Enable+0x22c>
	{
	case EXTI_INT0:
		switch(Copy_u8INTMode)
    1efc:	8b 81       	ldd	r24, Y+3	; 0x03
    1efe:	28 2f       	mov	r18, r24
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	39 87       	std	Y+9, r19	; 0x09
    1f04:	28 87       	std	Y+8, r18	; 0x08
    1f06:	88 85       	ldd	r24, Y+8	; 0x08
    1f08:	99 85       	ldd	r25, Y+9	; 0x09
    1f0a:	82 30       	cpi	r24, 0x02	; 2
    1f0c:	91 05       	cpc	r25, r1
    1f0e:	a9 f1       	breq	.+106    	; 0x1f7a <EXTI_Enable+0xc6>
    1f10:	28 85       	ldd	r18, Y+8	; 0x08
    1f12:	39 85       	ldd	r19, Y+9	; 0x09
    1f14:	23 30       	cpi	r18, 0x03	; 3
    1f16:	31 05       	cpc	r19, r1
    1f18:	34 f4       	brge	.+12     	; 0x1f26 <EXTI_Enable+0x72>
    1f1a:	88 85       	ldd	r24, Y+8	; 0x08
    1f1c:	99 85       	ldd	r25, Y+9	; 0x09
    1f1e:	81 30       	cpi	r24, 0x01	; 1
    1f20:	91 05       	cpc	r25, r1
    1f22:	d9 f0       	breq	.+54     	; 0x1f5a <EXTI_Enable+0xa6>
    1f24:	49 c0       	rjmp	.+146    	; 0x1fb8 <EXTI_Enable+0x104>
    1f26:	28 85       	ldd	r18, Y+8	; 0x08
    1f28:	39 85       	ldd	r19, Y+9	; 0x09
    1f2a:	23 30       	cpi	r18, 0x03	; 3
    1f2c:	31 05       	cpc	r19, r1
    1f2e:	a9 f1       	breq	.+106    	; 0x1f9a <EXTI_Enable+0xe6>
    1f30:	88 85       	ldd	r24, Y+8	; 0x08
    1f32:	99 85       	ldd	r25, Y+9	; 0x09
    1f34:	8c 3f       	cpi	r24, 0xFC	; 252
    1f36:	91 05       	cpc	r25, r1
    1f38:	09 f0       	breq	.+2      	; 0x1f3c <EXTI_Enable+0x88>
    1f3a:	3e c0       	rjmp	.+124    	; 0x1fb8 <EXTI_Enable+0x104>
		{
		case EXTI_INT0_ENABLE_WITH_LOW_MODE:
			MCUCR &=EXTI_INT0_ENABLE_WITH_LOW_MODE;
    1f3c:	a5 e5       	ldi	r26, 0x55	; 85
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	e5 e5       	ldi	r30, 0x55	; 85
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
    1f46:	8c 7f       	andi	r24, 0xFC	; 252
    1f48:	8c 93       	st	X, r24
			SET_BIT(GICR,EXTI_INT0);
    1f4a:	ab e5       	ldi	r26, 0x5B	; 91
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	eb e5       	ldi	r30, 0x5B	; 91
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	80 64       	ori	r24, 0x40	; 64
    1f56:	8c 93       	st	X, r24
    1f58:	c5 c0       	rjmp	.+394    	; 0x20e4 <EXTI_Enable+0x230>
			break;
		case EXTI_INT0_ENABLE_WITH_LOGICAL_CHANGE:
			MCUCR =(MCUCR & 0xFC) |EXTI_INT0_ENABLE_WITH_LOGICAL_CHANGE;
    1f5a:	a5 e5       	ldi	r26, 0x55	; 85
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	e5 e5       	ldi	r30, 0x55	; 85
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	8c 7f       	andi	r24, 0xFC	; 252
    1f66:	81 60       	ori	r24, 0x01	; 1
    1f68:	8c 93       	st	X, r24
			SET_BIT(GICR,EXTI_INT0);
    1f6a:	ab e5       	ldi	r26, 0x5B	; 91
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	eb e5       	ldi	r30, 0x5B	; 91
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	80 64       	ori	r24, 0x40	; 64
    1f76:	8c 93       	st	X, r24
    1f78:	b5 c0       	rjmp	.+362    	; 0x20e4 <EXTI_Enable+0x230>
			break;
		case EXTI_INT0_ENABLE_WITH_FALLING_EDGE:
			MCUCR =(MCUCR & 0xFC) |EXTI_INT0_ENABLE_WITH_FALLING_EDGE;
    1f7a:	a5 e5       	ldi	r26, 0x55	; 85
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	e5 e5       	ldi	r30, 0x55	; 85
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	8c 7f       	andi	r24, 0xFC	; 252
    1f86:	82 60       	ori	r24, 0x02	; 2
    1f88:	8c 93       	st	X, r24
			SET_BIT(GICR,EXTI_INT0);
    1f8a:	ab e5       	ldi	r26, 0x5B	; 91
    1f8c:	b0 e0       	ldi	r27, 0x00	; 0
    1f8e:	eb e5       	ldi	r30, 0x5B	; 91
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	80 81       	ld	r24, Z
    1f94:	80 64       	ori	r24, 0x40	; 64
    1f96:	8c 93       	st	X, r24
    1f98:	a5 c0       	rjmp	.+330    	; 0x20e4 <EXTI_Enable+0x230>
			break;
		case EXTI_INT0_ENABLE_WITH_RAISING_EDGE:
			MCUCR =(MCUCR & 0xFC) |EXTI_INT0_ENABLE_WITH_RAISING_EDGE;
    1f9a:	a5 e5       	ldi	r26, 0x55	; 85
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	e5 e5       	ldi	r30, 0x55	; 85
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 81       	ld	r24, Z
    1fa4:	83 60       	ori	r24, 0x03	; 3
    1fa6:	8c 93       	st	X, r24
			SET_BIT(GICR,EXTI_INT0);
    1fa8:	ab e5       	ldi	r26, 0x5B	; 91
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	eb e5       	ldi	r30, 0x5B	; 91
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	80 64       	ori	r24, 0x40	; 64
    1fb4:	8c 93       	st	X, r24
    1fb6:	96 c0       	rjmp	.+300    	; 0x20e4 <EXTI_Enable+0x230>
			break;
		default:
			ErrorStatus=EXTI_enuWrongMode;
    1fb8:	82 e0       	ldi	r24, 0x02	; 2
    1fba:	89 83       	std	Y+1, r24	; 0x01
    1fbc:	93 c0       	rjmp	.+294    	; 0x20e4 <EXTI_Enable+0x230>
			break;
		}

		break;
		case EXTI_INT1:
			switch(Copy_u8INTMode)
    1fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc0:	28 2f       	mov	r18, r24
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	3f 83       	std	Y+7, r19	; 0x07
    1fc6:	2e 83       	std	Y+6, r18	; 0x06
    1fc8:	8e 81       	ldd	r24, Y+6	; 0x06
    1fca:	9f 81       	ldd	r25, Y+7	; 0x07
    1fcc:	82 30       	cpi	r24, 0x02	; 2
    1fce:	91 05       	cpc	r25, r1
    1fd0:	a9 f1       	breq	.+106    	; 0x203c <EXTI_Enable+0x188>
    1fd2:	2e 81       	ldd	r18, Y+6	; 0x06
    1fd4:	3f 81       	ldd	r19, Y+7	; 0x07
    1fd6:	23 30       	cpi	r18, 0x03	; 3
    1fd8:	31 05       	cpc	r19, r1
    1fda:	34 f4       	brge	.+12     	; 0x1fe8 <EXTI_Enable+0x134>
    1fdc:	8e 81       	ldd	r24, Y+6	; 0x06
    1fde:	9f 81       	ldd	r25, Y+7	; 0x07
    1fe0:	81 30       	cpi	r24, 0x01	; 1
    1fe2:	91 05       	cpc	r25, r1
    1fe4:	d9 f0       	breq	.+54     	; 0x201c <EXTI_Enable+0x168>
    1fe6:	49 c0       	rjmp	.+146    	; 0x207a <EXTI_Enable+0x1c6>
    1fe8:	2e 81       	ldd	r18, Y+6	; 0x06
    1fea:	3f 81       	ldd	r19, Y+7	; 0x07
    1fec:	23 30       	cpi	r18, 0x03	; 3
    1fee:	31 05       	cpc	r19, r1
    1ff0:	a9 f1       	breq	.+106    	; 0x205c <EXTI_Enable+0x1a8>
    1ff2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ff4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ff6:	83 3f       	cpi	r24, 0xF3	; 243
    1ff8:	91 05       	cpc	r25, r1
    1ffa:	09 f0       	breq	.+2      	; 0x1ffe <EXTI_Enable+0x14a>
    1ffc:	3e c0       	rjmp	.+124    	; 0x207a <EXTI_Enable+0x1c6>
			{
			case EXTI_INT1_ENABLE_WITH_LOW_MODE:
				MCUCR &=EXTI_INT1_ENABLE_WITH_LOW_MODE;
    1ffe:	a5 e5       	ldi	r26, 0x55	; 85
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	e5 e5       	ldi	r30, 0x55	; 85
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	83 7f       	andi	r24, 0xF3	; 243
    200a:	8c 93       	st	X, r24
				SET_BIT(GICR,EXTI_INT1);
    200c:	ab e5       	ldi	r26, 0x5B	; 91
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	eb e5       	ldi	r30, 0x5B	; 91
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	80 68       	ori	r24, 0x80	; 128
    2018:	8c 93       	st	X, r24
    201a:	64 c0       	rjmp	.+200    	; 0x20e4 <EXTI_Enable+0x230>

				break;
			case EXTI_INT1_ENABLE_WITH_LOGICAL_CHANGE:
				MCUCR =(MCUCR & 0xF3) |(EXTI_INT1_ENABLE_WITH_LOGICAL_CHANGE<<2);
    201c:	a5 e5       	ldi	r26, 0x55	; 85
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	e5 e5       	ldi	r30, 0x55	; 85
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	83 7f       	andi	r24, 0xF3	; 243
    2028:	84 60       	ori	r24, 0x04	; 4
    202a:	8c 93       	st	X, r24
				SET_BIT(GICR,EXTI_INT1);
    202c:	ab e5       	ldi	r26, 0x5B	; 91
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	eb e5       	ldi	r30, 0x5B	; 91
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	80 68       	ori	r24, 0x80	; 128
    2038:	8c 93       	st	X, r24
    203a:	54 c0       	rjmp	.+168    	; 0x20e4 <EXTI_Enable+0x230>
				break;
			case EXTI_INT1_ENABLE_WITH_FALLING_EDGE:
				MCUCR =(MCUCR & 0xF3) | (EXTI_INT1_ENABLE_WITH_FALLING_EDGE<<2);
    203c:	a5 e5       	ldi	r26, 0x55	; 85
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	e5 e5       	ldi	r30, 0x55	; 85
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	83 7f       	andi	r24, 0xF3	; 243
    2048:	88 60       	ori	r24, 0x08	; 8
    204a:	8c 93       	st	X, r24
				SET_BIT(GICR,EXTI_INT1);
    204c:	ab e5       	ldi	r26, 0x5B	; 91
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	eb e5       	ldi	r30, 0x5B	; 91
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	80 68       	ori	r24, 0x80	; 128
    2058:	8c 93       	st	X, r24
    205a:	44 c0       	rjmp	.+136    	; 0x20e4 <EXTI_Enable+0x230>
				break;
			case EXTI_INT1_ENABLE_WITH_RAISING_EDGE:
				MCUCR =(MCUCR & 0xF3) | (EXTI_INT1_ENABLE_WITH_RAISING_EDGE<<2);
    205c:	a5 e5       	ldi	r26, 0x55	; 85
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	e5 e5       	ldi	r30, 0x55	; 85
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	8c 60       	ori	r24, 0x0C	; 12
    2068:	8c 93       	st	X, r24
				SET_BIT(GICR,EXTI_INT1);
    206a:	ab e5       	ldi	r26, 0x5B	; 91
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	eb e5       	ldi	r30, 0x5B	; 91
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	80 68       	ori	r24, 0x80	; 128
    2076:	8c 93       	st	X, r24
    2078:	35 c0       	rjmp	.+106    	; 0x20e4 <EXTI_Enable+0x230>
				break;
			default:
				ErrorStatus=EXTI_enuWrongMode;
    207a:	82 e0       	ldi	r24, 0x02	; 2
    207c:	89 83       	std	Y+1, r24	; 0x01
    207e:	32 c0       	rjmp	.+100    	; 0x20e4 <EXTI_Enable+0x230>
				break;
			}

			break;
			case EXTI_INT2:
				switch(Copy_u8INTMode)
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
    2082:	28 2f       	mov	r18, r24
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	3d 83       	std	Y+5, r19	; 0x05
    2088:	2c 83       	std	Y+4, r18	; 0x04
    208a:	8c 81       	ldd	r24, Y+4	; 0x04
    208c:	9d 81       	ldd	r25, Y+5	; 0x05
    208e:	80 34       	cpi	r24, 0x40	; 64
    2090:	91 05       	cpc	r25, r1
    2092:	a1 f0       	breq	.+40     	; 0x20bc <EXTI_Enable+0x208>
    2094:	2c 81       	ldd	r18, Y+4	; 0x04
    2096:	3d 81       	ldd	r19, Y+5	; 0x05
    2098:	2f 3b       	cpi	r18, 0xBF	; 191
    209a:	31 05       	cpc	r19, r1
    209c:	f1 f4       	brne	.+60     	; 0x20da <EXTI_Enable+0x226>
				{

				case EXTI_INT2_ENABLE_WITH_FALLING_EDGE:
					MCUCSR &=	EXTI_INT2_ENABLE_WITH_FALLING_EDGE;
    209e:	a4 e5       	ldi	r26, 0x54	; 84
    20a0:	b0 e0       	ldi	r27, 0x00	; 0
    20a2:	e4 e5       	ldi	r30, 0x54	; 84
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	8f 7b       	andi	r24, 0xBF	; 191
    20aa:	8c 93       	st	X, r24
					SET_BIT(GICR,EXTI_INT2);
    20ac:	ab e5       	ldi	r26, 0x5B	; 91
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	eb e5       	ldi	r30, 0x5B	; 91
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	80 81       	ld	r24, Z
    20b6:	80 62       	ori	r24, 0x20	; 32
    20b8:	8c 93       	st	X, r24
    20ba:	14 c0       	rjmp	.+40     	; 0x20e4 <EXTI_Enable+0x230>
					break;
				case EXTI_INT2_ENABLE_WITH_RAISING_EDGE:
					MCUCSR |=EXTI_INT2_ENABLE_WITH_RAISING_EDGE;
    20bc:	a4 e5       	ldi	r26, 0x54	; 84
    20be:	b0 e0       	ldi	r27, 0x00	; 0
    20c0:	e4 e5       	ldi	r30, 0x54	; 84
    20c2:	f0 e0       	ldi	r31, 0x00	; 0
    20c4:	80 81       	ld	r24, Z
    20c6:	80 64       	ori	r24, 0x40	; 64
    20c8:	8c 93       	st	X, r24
					SET_BIT(GICR,EXTI_INT2);
    20ca:	ab e5       	ldi	r26, 0x5B	; 91
    20cc:	b0 e0       	ldi	r27, 0x00	; 0
    20ce:	eb e5       	ldi	r30, 0x5B	; 91
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	80 81       	ld	r24, Z
    20d4:	80 62       	ori	r24, 0x20	; 32
    20d6:	8c 93       	st	X, r24
    20d8:	05 c0       	rjmp	.+10     	; 0x20e4 <EXTI_Enable+0x230>
					break;
				default:
					ErrorStatus=EXTI_enuWrongMode;
    20da:	82 e0       	ldi	r24, 0x02	; 2
    20dc:	89 83       	std	Y+1, r24	; 0x01
    20de:	02 c0       	rjmp	.+4      	; 0x20e4 <EXTI_Enable+0x230>
					break;
				}
				break;
				default:
					ErrorStatus=EXTI_enuWrongINT;
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	89 83       	std	Y+1, r24	; 0x01
					break;
	}

	return ErrorStatus;
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    20e6:	2b 96       	adiw	r28, 0x0b	; 11
    20e8:	0f b6       	in	r0, 0x3f	; 63
    20ea:	f8 94       	cli
    20ec:	de bf       	out	0x3e, r29	; 62
    20ee:	0f be       	out	0x3f, r0	; 63
    20f0:	cd bf       	out	0x3d, r28	; 61
    20f2:	cf 91       	pop	r28
    20f4:	df 91       	pop	r29
    20f6:	08 95       	ret

000020f8 <__vector_1>:
#include "EXTI_Prv.h"

void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
    20f8:	1f 92       	push	r1
    20fa:	0f 92       	push	r0
    20fc:	0f b6       	in	r0, 0x3f	; 63
    20fe:	0f 92       	push	r0
    2100:	11 24       	eor	r1, r1
    2102:	2f 93       	push	r18
    2104:	3f 93       	push	r19
    2106:	4f 93       	push	r20
    2108:	5f 93       	push	r21
    210a:	6f 93       	push	r22
    210c:	7f 93       	push	r23
    210e:	8f 93       	push	r24
    2110:	9f 93       	push	r25
    2112:	af 93       	push	r26
    2114:	bf 93       	push	r27
    2116:	ef 93       	push	r30
    2118:	ff 93       	push	r31
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62
	EXTIINT_Ptr[EXTI_INT0_IRQ]();
    2122:	e0 91 75 00 	lds	r30, 0x0075
    2126:	f0 91 76 00 	lds	r31, 0x0076
    212a:	09 95       	icall
}
    212c:	cf 91       	pop	r28
    212e:	df 91       	pop	r29
    2130:	ff 91       	pop	r31
    2132:	ef 91       	pop	r30
    2134:	bf 91       	pop	r27
    2136:	af 91       	pop	r26
    2138:	9f 91       	pop	r25
    213a:	8f 91       	pop	r24
    213c:	7f 91       	pop	r23
    213e:	6f 91       	pop	r22
    2140:	5f 91       	pop	r21
    2142:	4f 91       	pop	r20
    2144:	3f 91       	pop	r19
    2146:	2f 91       	pop	r18
    2148:	0f 90       	pop	r0
    214a:	0f be       	out	0x3f, r0	; 63
    214c:	0f 90       	pop	r0
    214e:	1f 90       	pop	r1
    2150:	18 95       	reti

00002152 <__vector_2>:


void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
    2152:	1f 92       	push	r1
    2154:	0f 92       	push	r0
    2156:	0f b6       	in	r0, 0x3f	; 63
    2158:	0f 92       	push	r0
    215a:	11 24       	eor	r1, r1
    215c:	2f 93       	push	r18
    215e:	3f 93       	push	r19
    2160:	4f 93       	push	r20
    2162:	5f 93       	push	r21
    2164:	6f 93       	push	r22
    2166:	7f 93       	push	r23
    2168:	8f 93       	push	r24
    216a:	9f 93       	push	r25
    216c:	af 93       	push	r26
    216e:	bf 93       	push	r27
    2170:	ef 93       	push	r30
    2172:	ff 93       	push	r31
    2174:	df 93       	push	r29
    2176:	cf 93       	push	r28
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
	EXTIINT_Ptr[EXTI_INT1_IRQ]();
    217c:	e0 91 77 00 	lds	r30, 0x0077
    2180:	f0 91 78 00 	lds	r31, 0x0078
    2184:	09 95       	icall
}
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	ff 91       	pop	r31
    218c:	ef 91       	pop	r30
    218e:	bf 91       	pop	r27
    2190:	af 91       	pop	r26
    2192:	9f 91       	pop	r25
    2194:	8f 91       	pop	r24
    2196:	7f 91       	pop	r23
    2198:	6f 91       	pop	r22
    219a:	5f 91       	pop	r21
    219c:	4f 91       	pop	r20
    219e:	3f 91       	pop	r19
    21a0:	2f 91       	pop	r18
    21a2:	0f 90       	pop	r0
    21a4:	0f be       	out	0x3f, r0	; 63
    21a6:	0f 90       	pop	r0
    21a8:	1f 90       	pop	r1
    21aa:	18 95       	reti

000021ac <__vector_3>:


void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
    21ac:	1f 92       	push	r1
    21ae:	0f 92       	push	r0
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	0f 92       	push	r0
    21b4:	11 24       	eor	r1, r1
    21b6:	2f 93       	push	r18
    21b8:	3f 93       	push	r19
    21ba:	4f 93       	push	r20
    21bc:	5f 93       	push	r21
    21be:	6f 93       	push	r22
    21c0:	7f 93       	push	r23
    21c2:	8f 93       	push	r24
    21c4:	9f 93       	push	r25
    21c6:	af 93       	push	r26
    21c8:	bf 93       	push	r27
    21ca:	ef 93       	push	r30
    21cc:	ff 93       	push	r31
    21ce:	df 93       	push	r29
    21d0:	cf 93       	push	r28
    21d2:	cd b7       	in	r28, 0x3d	; 61
    21d4:	de b7       	in	r29, 0x3e	; 62
	EXTIINT_Ptr[EXTI_INT2_IRQ]();
    21d6:	e0 91 79 00 	lds	r30, 0x0079
    21da:	f0 91 7a 00 	lds	r31, 0x007A
    21de:	09 95       	icall
}
    21e0:	cf 91       	pop	r28
    21e2:	df 91       	pop	r29
    21e4:	ff 91       	pop	r31
    21e6:	ef 91       	pop	r30
    21e8:	bf 91       	pop	r27
    21ea:	af 91       	pop	r26
    21ec:	9f 91       	pop	r25
    21ee:	8f 91       	pop	r24
    21f0:	7f 91       	pop	r23
    21f2:	6f 91       	pop	r22
    21f4:	5f 91       	pop	r21
    21f6:	4f 91       	pop	r20
    21f8:	3f 91       	pop	r19
    21fa:	2f 91       	pop	r18
    21fc:	0f 90       	pop	r0
    21fe:	0f be       	out	0x3f, r0	; 63
    2200:	0f 90       	pop	r0
    2202:	1f 90       	pop	r1
    2204:	18 95       	reti

00002206 <Time_Counter>:
uint8 Sec1=0,Sec2=0;
uint8 Min1=0,Min2=0;
uint8 Flag=0;

void Time_Counter(void)
{
    2206:	df 93       	push	r29
    2208:	cf 93       	push	r28
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62
	Sec1++;
    220e:	80 91 68 00 	lds	r24, 0x0068
    2212:	8f 5f       	subi	r24, 0xFF	; 255
    2214:	80 93 68 00 	sts	0x0068, r24
	if(Sec1==10)
    2218:	80 91 68 00 	lds	r24, 0x0068
    221c:	8a 30       	cpi	r24, 0x0A	; 10
    221e:	39 f4       	brne	.+14     	; 0x222e <Time_Counter+0x28>
	{
		Sec1=0;
    2220:	10 92 68 00 	sts	0x0068, r1
		Sec2++;
    2224:	80 91 69 00 	lds	r24, 0x0069
    2228:	8f 5f       	subi	r24, 0xFF	; 255
    222a:	80 93 69 00 	sts	0x0069, r24
	}
	if(Sec2==6)
    222e:	80 91 69 00 	lds	r24, 0x0069
    2232:	86 30       	cpi	r24, 0x06	; 6
    2234:	39 f4       	brne	.+14     	; 0x2244 <Time_Counter+0x3e>
	{
		Sec2=0;
    2236:	10 92 69 00 	sts	0x0069, r1
		Min1++;
    223a:	80 91 6a 00 	lds	r24, 0x006A
    223e:	8f 5f       	subi	r24, 0xFF	; 255
    2240:	80 93 6a 00 	sts	0x006A, r24
	}
	if(Min1==10)
    2244:	80 91 6a 00 	lds	r24, 0x006A
    2248:	8a 30       	cpi	r24, 0x0A	; 10
    224a:	39 f4       	brne	.+14     	; 0x225a <Time_Counter+0x54>
	{
		Min1=0;
    224c:	10 92 6a 00 	sts	0x006A, r1
		Min2++;
    2250:	80 91 6b 00 	lds	r24, 0x006B
    2254:	8f 5f       	subi	r24, 0xFF	; 255
    2256:	80 93 6b 00 	sts	0x006B, r24
	}
	if(Min2==6)
    225a:	80 91 6b 00 	lds	r24, 0x006B
    225e:	86 30       	cpi	r24, 0x06	; 6
    2260:	41 f4       	brne	.+16     	; 0x2272 <Time_Counter+0x6c>
	{
		Sec1=0;
    2262:	10 92 68 00 	sts	0x0068, r1
		Sec2=0;
    2266:	10 92 69 00 	sts	0x0069, r1
		Min1=0;
    226a:	10 92 6a 00 	sts	0x006A, r1
		Min2=0;
    226e:	10 92 6b 00 	sts	0x006B, r1
	}
}
    2272:	cf 91       	pop	r28
    2274:	df 91       	pop	r29
    2276:	08 95       	ret

00002278 <Second_Delay>:


void Second_Delay(void)
{
    2278:	df 93       	push	r29
    227a:	cf 93       	push	r28
    227c:	cd b7       	in	r28, 0x3d	; 61
    227e:	de b7       	in	r29, 0x3e	; 62
    2280:	c1 54       	subi	r28, 0x41	; 65
    2282:	d0 40       	sbci	r29, 0x00	; 0
    2284:	0f b6       	in	r0, 0x3f	; 63
    2286:	f8 94       	cli
    2288:	de bf       	out	0x3e, r29	; 62
    228a:	0f be       	out	0x3f, r0	; 63
    228c:	cd bf       	out	0x3d, r28	; 61
	static uint64 x=0;
	x++;
    228e:	80 91 6d 00 	lds	r24, 0x006D
    2292:	8f 8b       	std	Y+23, r24	; 0x17
    2294:	90 91 6e 00 	lds	r25, 0x006E
    2298:	98 8f       	std	Y+24, r25	; 0x18
    229a:	80 91 6f 00 	lds	r24, 0x006F
    229e:	89 8f       	std	Y+25, r24	; 0x19
    22a0:	90 91 70 00 	lds	r25, 0x0070
    22a4:	9a 8f       	std	Y+26, r25	; 0x1a
    22a6:	80 91 71 00 	lds	r24, 0x0071
    22aa:	8b 8f       	std	Y+27, r24	; 0x1b
    22ac:	90 91 72 00 	lds	r25, 0x0072
    22b0:	9c 8f       	std	Y+28, r25	; 0x1c
    22b2:	80 91 73 00 	lds	r24, 0x0073
    22b6:	8d 8f       	std	Y+29, r24	; 0x1d
    22b8:	90 91 74 00 	lds	r25, 0x0074
    22bc:	9e 8f       	std	Y+30, r25	; 0x1e
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	8f 8f       	std	Y+31, r24	; 0x1f
    22c2:	18 a2       	std	Y+32, r1	; 0x20
    22c4:	19 a2       	std	Y+33, r1	; 0x21
    22c6:	1a a2       	std	Y+34, r1	; 0x22
    22c8:	1b a2       	std	Y+35, r1	; 0x23
    22ca:	1c a2       	std	Y+36, r1	; 0x24
    22cc:	1d a2       	std	Y+37, r1	; 0x25
    22ce:	1e a2       	std	Y+38, r1	; 0x26
    22d0:	9f 89       	ldd	r25, Y+23	; 0x17
    22d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22d4:	98 0f       	add	r25, r24
    22d6:	9f a3       	std	Y+39, r25	; 0x27
    22d8:	91 e0       	ldi	r25, 0x01	; 1
    22da:	9f a7       	std	Y+47, r25	; 0x2f
    22dc:	8f a1       	ldd	r24, Y+39	; 0x27
    22de:	9f 89       	ldd	r25, Y+23	; 0x17
    22e0:	89 17       	cp	r24, r25
    22e2:	08 f0       	brcs	.+2      	; 0x22e6 <Second_Delay+0x6e>
    22e4:	1f a6       	std	Y+47, r1	; 0x2f
    22e6:	88 8d       	ldd	r24, Y+24	; 0x18
    22e8:	98 a1       	ldd	r25, Y+32	; 0x20
    22ea:	89 0f       	add	r24, r25
    22ec:	88 a7       	std	Y+40, r24	; 0x28
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	88 ab       	std	Y+48, r24	; 0x30
    22f2:	98 a5       	ldd	r25, Y+40	; 0x28
    22f4:	88 8d       	ldd	r24, Y+24	; 0x18
    22f6:	98 17       	cp	r25, r24
    22f8:	08 f0       	brcs	.+2      	; 0x22fc <Second_Delay+0x84>
    22fa:	18 aa       	std	Y+48, r1	; 0x30
    22fc:	9f a5       	ldd	r25, Y+47	; 0x2f
    22fe:	88 a5       	ldd	r24, Y+40	; 0x28
    2300:	98 0f       	add	r25, r24
    2302:	99 ab       	std	Y+49, r25	; 0x31
    2304:	91 e0       	ldi	r25, 0x01	; 1
    2306:	9a ab       	std	Y+50, r25	; 0x32
    2308:	89 a9       	ldd	r24, Y+49	; 0x31
    230a:	98 a5       	ldd	r25, Y+40	; 0x28
    230c:	89 17       	cp	r24, r25
    230e:	08 f0       	brcs	.+2      	; 0x2312 <Second_Delay+0x9a>
    2310:	1a aa       	std	Y+50, r1	; 0x32
    2312:	88 a9       	ldd	r24, Y+48	; 0x30
    2314:	9a a9       	ldd	r25, Y+50	; 0x32
    2316:	89 2b       	or	r24, r25
    2318:	88 ab       	std	Y+48, r24	; 0x30
    231a:	89 a9       	ldd	r24, Y+49	; 0x31
    231c:	88 a7       	std	Y+40, r24	; 0x28
    231e:	99 8d       	ldd	r25, Y+25	; 0x19
    2320:	89 a1       	ldd	r24, Y+33	; 0x21
    2322:	98 0f       	add	r25, r24
    2324:	99 a7       	std	Y+41, r25	; 0x29
    2326:	91 e0       	ldi	r25, 0x01	; 1
    2328:	9b ab       	std	Y+51, r25	; 0x33
    232a:	89 a5       	ldd	r24, Y+41	; 0x29
    232c:	99 8d       	ldd	r25, Y+25	; 0x19
    232e:	89 17       	cp	r24, r25
    2330:	08 f0       	brcs	.+2      	; 0x2334 <Second_Delay+0xbc>
    2332:	1b aa       	std	Y+51, r1	; 0x33
    2334:	88 a9       	ldd	r24, Y+48	; 0x30
    2336:	99 a5       	ldd	r25, Y+41	; 0x29
    2338:	89 0f       	add	r24, r25
    233a:	8c ab       	std	Y+52, r24	; 0x34
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	8d ab       	std	Y+53, r24	; 0x35
    2340:	9c a9       	ldd	r25, Y+52	; 0x34
    2342:	89 a5       	ldd	r24, Y+41	; 0x29
    2344:	98 17       	cp	r25, r24
    2346:	08 f0       	brcs	.+2      	; 0x234a <Second_Delay+0xd2>
    2348:	1d aa       	std	Y+53, r1	; 0x35
    234a:	9b a9       	ldd	r25, Y+51	; 0x33
    234c:	8d a9       	ldd	r24, Y+53	; 0x35
    234e:	98 2b       	or	r25, r24
    2350:	9b ab       	std	Y+51, r25	; 0x33
    2352:	9c a9       	ldd	r25, Y+52	; 0x34
    2354:	99 a7       	std	Y+41, r25	; 0x29
    2356:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2358:	9a a1       	ldd	r25, Y+34	; 0x22
    235a:	89 0f       	add	r24, r25
    235c:	8a a7       	std	Y+42, r24	; 0x2a
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	8e ab       	std	Y+54, r24	; 0x36
    2362:	9a a5       	ldd	r25, Y+42	; 0x2a
    2364:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2366:	98 17       	cp	r25, r24
    2368:	08 f0       	brcs	.+2      	; 0x236c <Second_Delay+0xf4>
    236a:	1e aa       	std	Y+54, r1	; 0x36
    236c:	9b a9       	ldd	r25, Y+51	; 0x33
    236e:	8a a5       	ldd	r24, Y+42	; 0x2a
    2370:	98 0f       	add	r25, r24
    2372:	9f ab       	std	Y+55, r25	; 0x37
    2374:	91 e0       	ldi	r25, 0x01	; 1
    2376:	98 af       	std	Y+56, r25	; 0x38
    2378:	8f a9       	ldd	r24, Y+55	; 0x37
    237a:	9a a5       	ldd	r25, Y+42	; 0x2a
    237c:	89 17       	cp	r24, r25
    237e:	08 f0       	brcs	.+2      	; 0x2382 <Second_Delay+0x10a>
    2380:	18 ae       	std	Y+56, r1	; 0x38
    2382:	8e a9       	ldd	r24, Y+54	; 0x36
    2384:	98 ad       	ldd	r25, Y+56	; 0x38
    2386:	89 2b       	or	r24, r25
    2388:	8e ab       	std	Y+54, r24	; 0x36
    238a:	8f a9       	ldd	r24, Y+55	; 0x37
    238c:	8a a7       	std	Y+42, r24	; 0x2a
    238e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2390:	8b a1       	ldd	r24, Y+35	; 0x23
    2392:	98 0f       	add	r25, r24
    2394:	9b a7       	std	Y+43, r25	; 0x2b
    2396:	91 e0       	ldi	r25, 0x01	; 1
    2398:	99 af       	std	Y+57, r25	; 0x39
    239a:	8b a5       	ldd	r24, Y+43	; 0x2b
    239c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    239e:	89 17       	cp	r24, r25
    23a0:	08 f0       	brcs	.+2      	; 0x23a4 <Second_Delay+0x12c>
    23a2:	19 ae       	std	Y+57, r1	; 0x39
    23a4:	8e a9       	ldd	r24, Y+54	; 0x36
    23a6:	9b a5       	ldd	r25, Y+43	; 0x2b
    23a8:	89 0f       	add	r24, r25
    23aa:	8a af       	std	Y+58, r24	; 0x3a
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	8b af       	std	Y+59, r24	; 0x3b
    23b0:	9a ad       	ldd	r25, Y+58	; 0x3a
    23b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    23b4:	98 17       	cp	r25, r24
    23b6:	08 f0       	brcs	.+2      	; 0x23ba <Second_Delay+0x142>
    23b8:	1b ae       	std	Y+59, r1	; 0x3b
    23ba:	99 ad       	ldd	r25, Y+57	; 0x39
    23bc:	8b ad       	ldd	r24, Y+59	; 0x3b
    23be:	98 2b       	or	r25, r24
    23c0:	99 af       	std	Y+57, r25	; 0x39
    23c2:	9a ad       	ldd	r25, Y+58	; 0x3a
    23c4:	9b a7       	std	Y+43, r25	; 0x2b
    23c6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23c8:	9c a1       	ldd	r25, Y+36	; 0x24
    23ca:	89 0f       	add	r24, r25
    23cc:	8c a7       	std	Y+44, r24	; 0x2c
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	8c af       	std	Y+60, r24	; 0x3c
    23d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    23d4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23d6:	98 17       	cp	r25, r24
    23d8:	08 f0       	brcs	.+2      	; 0x23dc <Second_Delay+0x164>
    23da:	1c ae       	std	Y+60, r1	; 0x3c
    23dc:	99 ad       	ldd	r25, Y+57	; 0x39
    23de:	8c a5       	ldd	r24, Y+44	; 0x2c
    23e0:	98 0f       	add	r25, r24
    23e2:	9d af       	std	Y+61, r25	; 0x3d
    23e4:	91 e0       	ldi	r25, 0x01	; 1
    23e6:	9e af       	std	Y+62, r25	; 0x3e
    23e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    23ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    23ec:	89 17       	cp	r24, r25
    23ee:	08 f0       	brcs	.+2      	; 0x23f2 <Second_Delay+0x17a>
    23f0:	1e ae       	std	Y+62, r1	; 0x3e
    23f2:	8c ad       	ldd	r24, Y+60	; 0x3c
    23f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    23f6:	89 2b       	or	r24, r25
    23f8:	8c af       	std	Y+60, r24	; 0x3c
    23fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    23fc:	8c a7       	std	Y+44, r24	; 0x2c
    23fe:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2400:	8d a1       	ldd	r24, Y+37	; 0x25
    2402:	98 0f       	add	r25, r24
    2404:	9d a7       	std	Y+45, r25	; 0x2d
    2406:	91 e0       	ldi	r25, 0x01	; 1
    2408:	9f af       	std	Y+63, r25	; 0x3f
    240a:	8d a5       	ldd	r24, Y+45	; 0x2d
    240c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    240e:	89 17       	cp	r24, r25
    2410:	08 f0       	brcs	.+2      	; 0x2414 <Second_Delay+0x19c>
    2412:	1f ae       	std	Y+63, r1	; 0x3f
    2414:	8c ad       	ldd	r24, Y+60	; 0x3c
    2416:	9d a5       	ldd	r25, Y+45	; 0x2d
    2418:	89 0f       	add	r24, r25
    241a:	21 96       	adiw	r28, 0x01	; 1
    241c:	8f af       	std	Y+63, r24	; 0x3f
    241e:	21 97       	sbiw	r28, 0x01	; 1
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	22 96       	adiw	r28, 0x02	; 2
    2424:	8f af       	std	Y+63, r24	; 0x3f
    2426:	22 97       	sbiw	r28, 0x02	; 2
    2428:	21 96       	adiw	r28, 0x01	; 1
    242a:	9f ad       	ldd	r25, Y+63	; 0x3f
    242c:	21 97       	sbiw	r28, 0x01	; 1
    242e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2430:	98 17       	cp	r25, r24
    2432:	18 f0       	brcs	.+6      	; 0x243a <Second_Delay+0x1c2>
    2434:	22 96       	adiw	r28, 0x02	; 2
    2436:	1f ae       	std	Y+63, r1	; 0x3f
    2438:	22 97       	sbiw	r28, 0x02	; 2
    243a:	9f ad       	ldd	r25, Y+63	; 0x3f
    243c:	22 96       	adiw	r28, 0x02	; 2
    243e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2440:	22 97       	sbiw	r28, 0x02	; 2
    2442:	98 2b       	or	r25, r24
    2444:	9f af       	std	Y+63, r25	; 0x3f
    2446:	21 96       	adiw	r28, 0x01	; 1
    2448:	9f ad       	ldd	r25, Y+63	; 0x3f
    244a:	21 97       	sbiw	r28, 0x01	; 1
    244c:	9d a7       	std	Y+45, r25	; 0x2d
    244e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2450:	9e a1       	ldd	r25, Y+38	; 0x26
    2452:	89 0f       	add	r24, r25
    2454:	8e a7       	std	Y+46, r24	; 0x2e
    2456:	8f ad       	ldd	r24, Y+63	; 0x3f
    2458:	9e a5       	ldd	r25, Y+46	; 0x2e
    245a:	89 0f       	add	r24, r25
    245c:	8e a7       	std	Y+46, r24	; 0x2e
    245e:	2f a1       	ldd	r18, Y+39	; 0x27
    2460:	38 a5       	ldd	r19, Y+40	; 0x28
    2462:	49 a5       	ldd	r20, Y+41	; 0x29
    2464:	5a a5       	ldd	r21, Y+42	; 0x2a
    2466:	6b a5       	ldd	r22, Y+43	; 0x2b
    2468:	7c a5       	ldd	r23, Y+44	; 0x2c
    246a:	8d a5       	ldd	r24, Y+45	; 0x2d
    246c:	9e a5       	ldd	r25, Y+46	; 0x2e
    246e:	20 93 6d 00 	sts	0x006D, r18
    2472:	30 93 6e 00 	sts	0x006E, r19
    2476:	40 93 6f 00 	sts	0x006F, r20
    247a:	50 93 70 00 	sts	0x0070, r21
    247e:	60 93 71 00 	sts	0x0071, r22
    2482:	70 93 72 00 	sts	0x0072, r23
    2486:	80 93 73 00 	sts	0x0073, r24
    248a:	90 93 74 00 	sts	0x0074, r25
    248e:	80 e0       	ldi	r24, 0x00	; 0
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	a0 e8       	ldi	r26, 0x80	; 128
    2494:	bf e3       	ldi	r27, 0x3F	; 63
    2496:	8b 87       	std	Y+11, r24	; 0x0b
    2498:	9c 87       	std	Y+12, r25	; 0x0c
    249a:	ad 87       	std	Y+13, r26	; 0x0d
    249c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    249e:	6b 85       	ldd	r22, Y+11	; 0x0b
    24a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    24a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	4a e7       	ldi	r20, 0x7A	; 122
    24ac:	53 e4       	ldi	r21, 0x43	; 67
    24ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	8f 83       	std	Y+7, r24	; 0x07
    24b8:	98 87       	std	Y+8, r25	; 0x08
    24ba:	a9 87       	std	Y+9, r26	; 0x09
    24bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24be:	6f 81       	ldd	r22, Y+7	; 0x07
    24c0:	78 85       	ldd	r23, Y+8	; 0x08
    24c2:	89 85       	ldd	r24, Y+9	; 0x09
    24c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	40 e8       	ldi	r20, 0x80	; 128
    24cc:	5f e3       	ldi	r21, 0x3F	; 63
    24ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24d2:	88 23       	and	r24, r24
    24d4:	2c f4       	brge	.+10     	; 0x24e0 <Second_Delay+0x268>
		__ticks = 1;
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	9e 83       	std	Y+6, r25	; 0x06
    24dc:	8d 83       	std	Y+5, r24	; 0x05
    24de:	3f c0       	rjmp	.+126    	; 0x255e <Second_Delay+0x2e6>
	else if (__tmp > 65535)
    24e0:	6f 81       	ldd	r22, Y+7	; 0x07
    24e2:	78 85       	ldd	r23, Y+8	; 0x08
    24e4:	89 85       	ldd	r24, Y+9	; 0x09
    24e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	3f ef       	ldi	r19, 0xFF	; 255
    24ec:	4f e7       	ldi	r20, 0x7F	; 127
    24ee:	57 e4       	ldi	r21, 0x47	; 71
    24f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24f4:	18 16       	cp	r1, r24
    24f6:	4c f5       	brge	.+82     	; 0x254a <Second_Delay+0x2d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    24fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    24fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	40 e2       	ldi	r20, 0x20	; 32
    2506:	51 e4       	ldi	r21, 0x41	; 65
    2508:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	bc 01       	movw	r22, r24
    2512:	cd 01       	movw	r24, r26
    2514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	9e 83       	std	Y+6, r25	; 0x06
    251e:	8d 83       	std	Y+5, r24	; 0x05
    2520:	0f c0       	rjmp	.+30     	; 0x2540 <Second_Delay+0x2c8>
    2522:	89 e1       	ldi	r24, 0x19	; 25
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	9c 83       	std	Y+4, r25	; 0x04
    2528:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    252a:	8b 81       	ldd	r24, Y+3	; 0x03
    252c:	9c 81       	ldd	r25, Y+4	; 0x04
    252e:	01 97       	sbiw	r24, 0x01	; 1
    2530:	f1 f7       	brne	.-4      	; 0x252e <Second_Delay+0x2b6>
    2532:	9c 83       	std	Y+4, r25	; 0x04
    2534:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2536:	8d 81       	ldd	r24, Y+5	; 0x05
    2538:	9e 81       	ldd	r25, Y+6	; 0x06
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	9e 83       	std	Y+6, r25	; 0x06
    253e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2540:	8d 81       	ldd	r24, Y+5	; 0x05
    2542:	9e 81       	ldd	r25, Y+6	; 0x06
    2544:	00 97       	sbiw	r24, 0x00	; 0
    2546:	69 f7       	brne	.-38     	; 0x2522 <Second_Delay+0x2aa>
    2548:	14 c0       	rjmp	.+40     	; 0x2572 <Second_Delay+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    254a:	6f 81       	ldd	r22, Y+7	; 0x07
    254c:	78 85       	ldd	r23, Y+8	; 0x08
    254e:	89 85       	ldd	r24, Y+9	; 0x09
    2550:	9a 85       	ldd	r25, Y+10	; 0x0a
    2552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2556:	dc 01       	movw	r26, r24
    2558:	cb 01       	movw	r24, r22
    255a:	9e 83       	std	Y+6, r25	; 0x06
    255c:	8d 83       	std	Y+5, r24	; 0x05
    255e:	8d 81       	ldd	r24, Y+5	; 0x05
    2560:	9e 81       	ldd	r25, Y+6	; 0x06
    2562:	9a 83       	std	Y+2, r25	; 0x02
    2564:	89 83       	std	Y+1, r24	; 0x01
    2566:	89 81       	ldd	r24, Y+1	; 0x01
    2568:	9a 81       	ldd	r25, Y+2	; 0x02
    256a:	01 97       	sbiw	r24, 0x01	; 1
    256c:	f1 f7       	brne	.-4      	; 0x256a <Second_Delay+0x2f2>
    256e:	9a 83       	std	Y+2, r25	; 0x02
    2570:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	if(x==25)
    2572:	80 91 6d 00 	lds	r24, 0x006D
    2576:	8f 87       	std	Y+15, r24	; 0x0f
    2578:	90 91 6e 00 	lds	r25, 0x006E
    257c:	98 8b       	std	Y+16, r25	; 0x10
    257e:	80 91 6f 00 	lds	r24, 0x006F
    2582:	89 8b       	std	Y+17, r24	; 0x11
    2584:	90 91 70 00 	lds	r25, 0x0070
    2588:	9a 8b       	std	Y+18, r25	; 0x12
    258a:	80 91 71 00 	lds	r24, 0x0071
    258e:	8b 8b       	std	Y+19, r24	; 0x13
    2590:	90 91 72 00 	lds	r25, 0x0072
    2594:	9c 8b       	std	Y+20, r25	; 0x14
    2596:	80 91 73 00 	lds	r24, 0x0073
    259a:	8d 8b       	std	Y+21, r24	; 0x15
    259c:	90 91 74 00 	lds	r25, 0x0074
    25a0:	9e 8b       	std	Y+22, r25	; 0x16
    25a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    25a4:	89 31       	cpi	r24, 0x19	; 25
    25a6:	39 f5       	brne	.+78     	; 0x25f6 <Second_Delay+0x37e>
    25a8:	98 89       	ldd	r25, Y+16	; 0x10
    25aa:	99 23       	and	r25, r25
    25ac:	21 f5       	brne	.+72     	; 0x25f6 <Second_Delay+0x37e>
    25ae:	89 89       	ldd	r24, Y+17	; 0x11
    25b0:	88 23       	and	r24, r24
    25b2:	09 f5       	brne	.+66     	; 0x25f6 <Second_Delay+0x37e>
    25b4:	9a 89       	ldd	r25, Y+18	; 0x12
    25b6:	99 23       	and	r25, r25
    25b8:	f1 f4       	brne	.+60     	; 0x25f6 <Second_Delay+0x37e>
    25ba:	8b 89       	ldd	r24, Y+19	; 0x13
    25bc:	88 23       	and	r24, r24
    25be:	d9 f4       	brne	.+54     	; 0x25f6 <Second_Delay+0x37e>
    25c0:	9c 89       	ldd	r25, Y+20	; 0x14
    25c2:	99 23       	and	r25, r25
    25c4:	c1 f4       	brne	.+48     	; 0x25f6 <Second_Delay+0x37e>
    25c6:	8d 89       	ldd	r24, Y+21	; 0x15
    25c8:	88 23       	and	r24, r24
    25ca:	a9 f4       	brne	.+42     	; 0x25f6 <Second_Delay+0x37e>
    25cc:	9e 89       	ldd	r25, Y+22	; 0x16
    25ce:	99 23       	and	r25, r25
    25d0:	91 f4       	brne	.+36     	; 0x25f6 <Second_Delay+0x37e>
	{
		Time_Counter();
    25d2:	0e 94 03 11 	call	0x2206	; 0x2206 <Time_Counter>
		x=0;
    25d6:	10 92 6d 00 	sts	0x006D, r1
    25da:	10 92 6e 00 	sts	0x006E, r1
    25de:	10 92 6f 00 	sts	0x006F, r1
    25e2:	10 92 70 00 	sts	0x0070, r1
    25e6:	10 92 71 00 	sts	0x0071, r1
    25ea:	10 92 72 00 	sts	0x0072, r1
    25ee:	10 92 73 00 	sts	0x0073, r1
    25f2:	10 92 74 00 	sts	0x0074, r1
	}
}
    25f6:	cf 5b       	subi	r28, 0xBF	; 191
    25f8:	df 4f       	sbci	r29, 0xFF	; 255
    25fa:	0f b6       	in	r0, 0x3f	; 63
    25fc:	f8 94       	cli
    25fe:	de bf       	out	0x3e, r29	; 62
    2600:	0f be       	out	0x3f, r0	; 63
    2602:	cd bf       	out	0x3d, r28	; 61
    2604:	cf 91       	pop	r28
    2606:	df 91       	pop	r29
    2608:	08 95       	ret

0000260a <ResetFunction>:


void ResetFunction(void)
{
    260a:	df 93       	push	r29
    260c:	cf 93       	push	r28
    260e:	cd b7       	in	r28, 0x3d	; 61
    2610:	de b7       	in	r29, 0x3e	; 62
	Sec1=0;
    2612:	10 92 68 00 	sts	0x0068, r1
	Sec2=0;
    2616:	10 92 69 00 	sts	0x0069, r1
	Min1=0;
    261a:	10 92 6a 00 	sts	0x006A, r1
	Min2=0;
    261e:	10 92 6b 00 	sts	0x006B, r1
}
    2622:	cf 91       	pop	r28
    2624:	df 91       	pop	r29
    2626:	08 95       	ret

00002628 <ResumeFunction>:
void ResumeFunction(void)
{
    2628:	df 93       	push	r29
    262a:	cf 93       	push	r28
    262c:	cd b7       	in	r28, 0x3d	; 61
    262e:	de b7       	in	r29, 0x3e	; 62
	Flag=1;
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	80 93 6c 00 	sts	0x006C, r24
}
    2636:	cf 91       	pop	r28
    2638:	df 91       	pop	r29
    263a:	08 95       	ret

0000263c <StopFunction>:

void StopFunction(void)
{
    263c:	df 93       	push	r29
    263e:	cf 93       	push	r28
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62
	Flag=0;
    2644:	10 92 6c 00 	sts	0x006C, r1
}
    2648:	cf 91       	pop	r28
    264a:	df 91       	pop	r29
    264c:	08 95       	ret

0000264e <_7Segments_Init>:



void _7Segments_Init(void)
{
    264e:	df 93       	push	r29
    2650:	cf 93       	push	r28
    2652:	cd b7       	in	r28, 0x3d	; 61
    2654:	de b7       	in	r29, 0x3e	; 62
	PORT_Init();
    2656:	0e 94 16 0a 	call	0x142c	; 0x142c <PORT_Init>
	GIE_enuInit();
    265a:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GIE_enuInit>
	EXTI_Init();
    265e:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <EXTI_Init>


}
    2662:	cf 91       	pop	r28
    2664:	df 91       	pop	r29
    2666:	08 95       	ret

00002668 <main>:
#include "7Segments.h"
int main(void)
{
    2668:	df 93       	push	r29
    266a:	cf 93       	push	r28
    266c:	cd b7       	in	r28, 0x3d	; 61
    266e:	de b7       	in	r29, 0x3e	; 62
    2670:	e8 97       	sbiw	r28, 0x38	; 56
    2672:	0f b6       	in	r0, 0x3f	; 63
    2674:	f8 94       	cli
    2676:	de bf       	out	0x3e, r29	; 62
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	cd bf       	out	0x3d, r28	; 61
	_7Segments_Init();
    267c:	0e 94 27 13 	call	0x264e	; 0x264e <_7Segments_Init>
	EXTI_CallBack(ResetFunction,EXTI_INT0_IRQ);
    2680:	85 e0       	ldi	r24, 0x05	; 5
    2682:	93 e1       	ldi	r25, 0x13	; 19
    2684:	60 e0       	ldi	r22, 0x00	; 0
    2686:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <EXTI_CallBack>
	EXTI_CallBack(ResumeFunction,EXTI_INT1_IRQ);
    268a:	84 e1       	ldi	r24, 0x14	; 20
    268c:	93 e1       	ldi	r25, 0x13	; 19
    268e:	61 e0       	ldi	r22, 0x01	; 1
    2690:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <EXTI_CallBack>
	EXTI_CallBack(StopFunction,EXTI_INT2_IRQ);
    2694:	8e e1       	ldi	r24, 0x1E	; 30
    2696:	93 e1       	ldi	r25, 0x13	; 19
    2698:	62 e0       	ldi	r22, 0x02	; 2
    269a:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <EXTI_CallBack>

	while(1)
	{
		Dio_enuWritePort(P_PORTA,0x01);
    269e:	80 e0       	ldi	r24, 0x00	; 0
    26a0:	61 e0       	ldi	r22, 0x01	; 1
    26a2:	0e 94 8f 08 	call	0x111e	; 0x111e <Dio_enuWritePort>
		Dio_enuWritePort(P_PORTC,Sec1);
    26a6:	90 91 68 00 	lds	r25, 0x0068
    26aa:	82 e0       	ldi	r24, 0x02	; 2
    26ac:	69 2f       	mov	r22, r25
    26ae:	0e 94 8f 08 	call	0x111e	; 0x111e <Dio_enuWritePort>
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	a0 e8       	ldi	r26, 0x80	; 128
    26b8:	bf e3       	ldi	r27, 0x3F	; 63
    26ba:	8d ab       	std	Y+53, r24	; 0x35
    26bc:	9e ab       	std	Y+54, r25	; 0x36
    26be:	af ab       	std	Y+55, r26	; 0x37
    26c0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c2:	6d a9       	ldd	r22, Y+53	; 0x35
    26c4:	7e a9       	ldd	r23, Y+54	; 0x36
    26c6:	8f a9       	ldd	r24, Y+55	; 0x37
    26c8:	98 ad       	ldd	r25, Y+56	; 0x38
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	4a e7       	ldi	r20, 0x7A	; 122
    26d0:	53 e4       	ldi	r21, 0x43	; 67
    26d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	89 ab       	std	Y+49, r24	; 0x31
    26dc:	9a ab       	std	Y+50, r25	; 0x32
    26de:	ab ab       	std	Y+51, r26	; 0x33
    26e0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    26e2:	69 a9       	ldd	r22, Y+49	; 0x31
    26e4:	7a a9       	ldd	r23, Y+50	; 0x32
    26e6:	8b a9       	ldd	r24, Y+51	; 0x33
    26e8:	9c a9       	ldd	r25, Y+52	; 0x34
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	40 e8       	ldi	r20, 0x80	; 128
    26f0:	5f e3       	ldi	r21, 0x3F	; 63
    26f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26f6:	88 23       	and	r24, r24
    26f8:	2c f4       	brge	.+10     	; 0x2704 <main+0x9c>
		__ticks = 1;
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	98 ab       	std	Y+48, r25	; 0x30
    2700:	8f a7       	std	Y+47, r24	; 0x2f
    2702:	3f c0       	rjmp	.+126    	; 0x2782 <main+0x11a>
	else if (__tmp > 65535)
    2704:	69 a9       	ldd	r22, Y+49	; 0x31
    2706:	7a a9       	ldd	r23, Y+50	; 0x32
    2708:	8b a9       	ldd	r24, Y+51	; 0x33
    270a:	9c a9       	ldd	r25, Y+52	; 0x34
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	3f ef       	ldi	r19, 0xFF	; 255
    2710:	4f e7       	ldi	r20, 0x7F	; 127
    2712:	57 e4       	ldi	r21, 0x47	; 71
    2714:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2718:	18 16       	cp	r1, r24
    271a:	4c f5       	brge	.+82     	; 0x276e <main+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    271c:	6d a9       	ldd	r22, Y+53	; 0x35
    271e:	7e a9       	ldd	r23, Y+54	; 0x36
    2720:	8f a9       	ldd	r24, Y+55	; 0x37
    2722:	98 ad       	ldd	r25, Y+56	; 0x38
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	40 e2       	ldi	r20, 0x20	; 32
    272a:	51 e4       	ldi	r21, 0x41	; 65
    272c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	bc 01       	movw	r22, r24
    2736:	cd 01       	movw	r24, r26
    2738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	98 ab       	std	Y+48, r25	; 0x30
    2742:	8f a7       	std	Y+47, r24	; 0x2f
    2744:	0f c0       	rjmp	.+30     	; 0x2764 <main+0xfc>
    2746:	89 e1       	ldi	r24, 0x19	; 25
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	9e a7       	std	Y+46, r25	; 0x2e
    274c:	8d a7       	std	Y+45, r24	; 0x2d
    274e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2750:	9e a5       	ldd	r25, Y+46	; 0x2e
    2752:	01 97       	sbiw	r24, 0x01	; 1
    2754:	f1 f7       	brne	.-4      	; 0x2752 <main+0xea>
    2756:	9e a7       	std	Y+46, r25	; 0x2e
    2758:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    275a:	8f a5       	ldd	r24, Y+47	; 0x2f
    275c:	98 a9       	ldd	r25, Y+48	; 0x30
    275e:	01 97       	sbiw	r24, 0x01	; 1
    2760:	98 ab       	std	Y+48, r25	; 0x30
    2762:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2764:	8f a5       	ldd	r24, Y+47	; 0x2f
    2766:	98 a9       	ldd	r25, Y+48	; 0x30
    2768:	00 97       	sbiw	r24, 0x00	; 0
    276a:	69 f7       	brne	.-38     	; 0x2746 <main+0xde>
    276c:	14 c0       	rjmp	.+40     	; 0x2796 <main+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    276e:	69 a9       	ldd	r22, Y+49	; 0x31
    2770:	7a a9       	ldd	r23, Y+50	; 0x32
    2772:	8b a9       	ldd	r24, Y+51	; 0x33
    2774:	9c a9       	ldd	r25, Y+52	; 0x34
    2776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	98 ab       	std	Y+48, r25	; 0x30
    2780:	8f a7       	std	Y+47, r24	; 0x2f
    2782:	8f a5       	ldd	r24, Y+47	; 0x2f
    2784:	98 a9       	ldd	r25, Y+48	; 0x30
    2786:	9c a7       	std	Y+44, r25	; 0x2c
    2788:	8b a7       	std	Y+43, r24	; 0x2b
    278a:	8b a5       	ldd	r24, Y+43	; 0x2b
    278c:	9c a5       	ldd	r25, Y+44	; 0x2c
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	f1 f7       	brne	.-4      	; 0x278e <main+0x126>
    2792:	9c a7       	std	Y+44, r25	; 0x2c
    2794:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		Dio_enuWritePort(P_PORTA,0x02);
    2796:	80 e0       	ldi	r24, 0x00	; 0
    2798:	62 e0       	ldi	r22, 0x02	; 2
    279a:	0e 94 8f 08 	call	0x111e	; 0x111e <Dio_enuWritePort>
		Dio_enuWritePort(P_PORTC,Sec2);
    279e:	90 91 69 00 	lds	r25, 0x0069
    27a2:	82 e0       	ldi	r24, 0x02	; 2
    27a4:	69 2f       	mov	r22, r25
    27a6:	0e 94 8f 08 	call	0x111e	; 0x111e <Dio_enuWritePort>
    27aa:	80 e0       	ldi	r24, 0x00	; 0
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	a0 e8       	ldi	r26, 0x80	; 128
    27b0:	bf e3       	ldi	r27, 0x3F	; 63
    27b2:	8f a3       	std	Y+39, r24	; 0x27
    27b4:	98 a7       	std	Y+40, r25	; 0x28
    27b6:	a9 a7       	std	Y+41, r26	; 0x29
    27b8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ba:	6f a1       	ldd	r22, Y+39	; 0x27
    27bc:	78 a5       	ldd	r23, Y+40	; 0x28
    27be:	89 a5       	ldd	r24, Y+41	; 0x29
    27c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	4a e7       	ldi	r20, 0x7A	; 122
    27c8:	53 e4       	ldi	r21, 0x43	; 67
    27ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	8b a3       	std	Y+35, r24	; 0x23
    27d4:	9c a3       	std	Y+36, r25	; 0x24
    27d6:	ad a3       	std	Y+37, r26	; 0x25
    27d8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    27da:	6b a1       	ldd	r22, Y+35	; 0x23
    27dc:	7c a1       	ldd	r23, Y+36	; 0x24
    27de:	8d a1       	ldd	r24, Y+37	; 0x25
    27e0:	9e a1       	ldd	r25, Y+38	; 0x26
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	40 e8       	ldi	r20, 0x80	; 128
    27e8:	5f e3       	ldi	r21, 0x3F	; 63
    27ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27ee:	88 23       	and	r24, r24
    27f0:	2c f4       	brge	.+10     	; 0x27fc <main+0x194>
		__ticks = 1;
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	9a a3       	std	Y+34, r25	; 0x22
    27f8:	89 a3       	std	Y+33, r24	; 0x21
    27fa:	3f c0       	rjmp	.+126    	; 0x287a <main+0x212>
	else if (__tmp > 65535)
    27fc:	6b a1       	ldd	r22, Y+35	; 0x23
    27fe:	7c a1       	ldd	r23, Y+36	; 0x24
    2800:	8d a1       	ldd	r24, Y+37	; 0x25
    2802:	9e a1       	ldd	r25, Y+38	; 0x26
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	3f ef       	ldi	r19, 0xFF	; 255
    2808:	4f e7       	ldi	r20, 0x7F	; 127
    280a:	57 e4       	ldi	r21, 0x47	; 71
    280c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2810:	18 16       	cp	r1, r24
    2812:	4c f5       	brge	.+82     	; 0x2866 <main+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2814:	6f a1       	ldd	r22, Y+39	; 0x27
    2816:	78 a5       	ldd	r23, Y+40	; 0x28
    2818:	89 a5       	ldd	r24, Y+41	; 0x29
    281a:	9a a5       	ldd	r25, Y+42	; 0x2a
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	40 e2       	ldi	r20, 0x20	; 32
    2822:	51 e4       	ldi	r21, 0x41	; 65
    2824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	bc 01       	movw	r22, r24
    282e:	cd 01       	movw	r24, r26
    2830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	9a a3       	std	Y+34, r25	; 0x22
    283a:	89 a3       	std	Y+33, r24	; 0x21
    283c:	0f c0       	rjmp	.+30     	; 0x285c <main+0x1f4>
    283e:	89 e1       	ldi	r24, 0x19	; 25
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	98 a3       	std	Y+32, r25	; 0x20
    2844:	8f 8f       	std	Y+31, r24	; 0x1f
    2846:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2848:	98 a1       	ldd	r25, Y+32	; 0x20
    284a:	01 97       	sbiw	r24, 0x01	; 1
    284c:	f1 f7       	brne	.-4      	; 0x284a <main+0x1e2>
    284e:	98 a3       	std	Y+32, r25	; 0x20
    2850:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2852:	89 a1       	ldd	r24, Y+33	; 0x21
    2854:	9a a1       	ldd	r25, Y+34	; 0x22
    2856:	01 97       	sbiw	r24, 0x01	; 1
    2858:	9a a3       	std	Y+34, r25	; 0x22
    285a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    285c:	89 a1       	ldd	r24, Y+33	; 0x21
    285e:	9a a1       	ldd	r25, Y+34	; 0x22
    2860:	00 97       	sbiw	r24, 0x00	; 0
    2862:	69 f7       	brne	.-38     	; 0x283e <main+0x1d6>
    2864:	14 c0       	rjmp	.+40     	; 0x288e <main+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2866:	6b a1       	ldd	r22, Y+35	; 0x23
    2868:	7c a1       	ldd	r23, Y+36	; 0x24
    286a:	8d a1       	ldd	r24, Y+37	; 0x25
    286c:	9e a1       	ldd	r25, Y+38	; 0x26
    286e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	9a a3       	std	Y+34, r25	; 0x22
    2878:	89 a3       	std	Y+33, r24	; 0x21
    287a:	89 a1       	ldd	r24, Y+33	; 0x21
    287c:	9a a1       	ldd	r25, Y+34	; 0x22
    287e:	9e 8f       	std	Y+30, r25	; 0x1e
    2880:	8d 8f       	std	Y+29, r24	; 0x1d
    2882:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2884:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2886:	01 97       	sbiw	r24, 0x01	; 1
    2888:	f1 f7       	brne	.-4      	; 0x2886 <main+0x21e>
    288a:	9e 8f       	std	Y+30, r25	; 0x1e
    288c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		Dio_enuWritePort(P_PORTA,0x04);
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	64 e0       	ldi	r22, 0x04	; 4
    2892:	0e 94 8f 08 	call	0x111e	; 0x111e <Dio_enuWritePort>
		Dio_enuWritePort(P_PORTC,Min1);
    2896:	90 91 6a 00 	lds	r25, 0x006A
    289a:	82 e0       	ldi	r24, 0x02	; 2
    289c:	69 2f       	mov	r22, r25
    289e:	0e 94 8f 08 	call	0x111e	; 0x111e <Dio_enuWritePort>
    28a2:	80 e0       	ldi	r24, 0x00	; 0
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	a0 e8       	ldi	r26, 0x80	; 128
    28a8:	bf e3       	ldi	r27, 0x3F	; 63
    28aa:	89 8f       	std	Y+25, r24	; 0x19
    28ac:	9a 8f       	std	Y+26, r25	; 0x1a
    28ae:	ab 8f       	std	Y+27, r26	; 0x1b
    28b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28b2:	69 8d       	ldd	r22, Y+25	; 0x19
    28b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28ba:	20 e0       	ldi	r18, 0x00	; 0
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	4a e7       	ldi	r20, 0x7A	; 122
    28c0:	53 e4       	ldi	r21, 0x43	; 67
    28c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c6:	dc 01       	movw	r26, r24
    28c8:	cb 01       	movw	r24, r22
    28ca:	8d 8b       	std	Y+21, r24	; 0x15
    28cc:	9e 8b       	std	Y+22, r25	; 0x16
    28ce:	af 8b       	std	Y+23, r26	; 0x17
    28d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28d2:	6d 89       	ldd	r22, Y+21	; 0x15
    28d4:	7e 89       	ldd	r23, Y+22	; 0x16
    28d6:	8f 89       	ldd	r24, Y+23	; 0x17
    28d8:	98 8d       	ldd	r25, Y+24	; 0x18
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	40 e8       	ldi	r20, 0x80	; 128
    28e0:	5f e3       	ldi	r21, 0x3F	; 63
    28e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28e6:	88 23       	and	r24, r24
    28e8:	2c f4       	brge	.+10     	; 0x28f4 <main+0x28c>
		__ticks = 1;
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	9c 8b       	std	Y+20, r25	; 0x14
    28f0:	8b 8b       	std	Y+19, r24	; 0x13
    28f2:	3f c0       	rjmp	.+126    	; 0x2972 <main+0x30a>
	else if (__tmp > 65535)
    28f4:	6d 89       	ldd	r22, Y+21	; 0x15
    28f6:	7e 89       	ldd	r23, Y+22	; 0x16
    28f8:	8f 89       	ldd	r24, Y+23	; 0x17
    28fa:	98 8d       	ldd	r25, Y+24	; 0x18
    28fc:	20 e0       	ldi	r18, 0x00	; 0
    28fe:	3f ef       	ldi	r19, 0xFF	; 255
    2900:	4f e7       	ldi	r20, 0x7F	; 127
    2902:	57 e4       	ldi	r21, 0x47	; 71
    2904:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2908:	18 16       	cp	r1, r24
    290a:	4c f5       	brge	.+82     	; 0x295e <main+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    290c:	69 8d       	ldd	r22, Y+25	; 0x19
    290e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2910:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2912:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	40 e2       	ldi	r20, 0x20	; 32
    291a:	51 e4       	ldi	r21, 0x41	; 65
    291c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	bc 01       	movw	r22, r24
    2926:	cd 01       	movw	r24, r26
    2928:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	9c 8b       	std	Y+20, r25	; 0x14
    2932:	8b 8b       	std	Y+19, r24	; 0x13
    2934:	0f c0       	rjmp	.+30     	; 0x2954 <main+0x2ec>
    2936:	89 e1       	ldi	r24, 0x19	; 25
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	9a 8b       	std	Y+18, r25	; 0x12
    293c:	89 8b       	std	Y+17, r24	; 0x11
    293e:	89 89       	ldd	r24, Y+17	; 0x11
    2940:	9a 89       	ldd	r25, Y+18	; 0x12
    2942:	01 97       	sbiw	r24, 0x01	; 1
    2944:	f1 f7       	brne	.-4      	; 0x2942 <main+0x2da>
    2946:	9a 8b       	std	Y+18, r25	; 0x12
    2948:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    294a:	8b 89       	ldd	r24, Y+19	; 0x13
    294c:	9c 89       	ldd	r25, Y+20	; 0x14
    294e:	01 97       	sbiw	r24, 0x01	; 1
    2950:	9c 8b       	std	Y+20, r25	; 0x14
    2952:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2954:	8b 89       	ldd	r24, Y+19	; 0x13
    2956:	9c 89       	ldd	r25, Y+20	; 0x14
    2958:	00 97       	sbiw	r24, 0x00	; 0
    295a:	69 f7       	brne	.-38     	; 0x2936 <main+0x2ce>
    295c:	14 c0       	rjmp	.+40     	; 0x2986 <main+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    295e:	6d 89       	ldd	r22, Y+21	; 0x15
    2960:	7e 89       	ldd	r23, Y+22	; 0x16
    2962:	8f 89       	ldd	r24, Y+23	; 0x17
    2964:	98 8d       	ldd	r25, Y+24	; 0x18
    2966:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	9c 8b       	std	Y+20, r25	; 0x14
    2970:	8b 8b       	std	Y+19, r24	; 0x13
    2972:	8b 89       	ldd	r24, Y+19	; 0x13
    2974:	9c 89       	ldd	r25, Y+20	; 0x14
    2976:	98 8b       	std	Y+16, r25	; 0x10
    2978:	8f 87       	std	Y+15, r24	; 0x0f
    297a:	8f 85       	ldd	r24, Y+15	; 0x0f
    297c:	98 89       	ldd	r25, Y+16	; 0x10
    297e:	01 97       	sbiw	r24, 0x01	; 1
    2980:	f1 f7       	brne	.-4      	; 0x297e <main+0x316>
    2982:	98 8b       	std	Y+16, r25	; 0x10
    2984:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		Dio_enuWritePort(P_PORTA,0x08);
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	68 e0       	ldi	r22, 0x08	; 8
    298a:	0e 94 8f 08 	call	0x111e	; 0x111e <Dio_enuWritePort>
		Dio_enuWritePort(P_PORTC,Min2);
    298e:	90 91 6b 00 	lds	r25, 0x006B
    2992:	82 e0       	ldi	r24, 0x02	; 2
    2994:	69 2f       	mov	r22, r25
    2996:	0e 94 8f 08 	call	0x111e	; 0x111e <Dio_enuWritePort>
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	a0 e8       	ldi	r26, 0x80	; 128
    29a0:	bf e3       	ldi	r27, 0x3F	; 63
    29a2:	8b 87       	std	Y+11, r24	; 0x0b
    29a4:	9c 87       	std	Y+12, r25	; 0x0c
    29a6:	ad 87       	std	Y+13, r26	; 0x0d
    29a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    29ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    29b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	4a e7       	ldi	r20, 0x7A	; 122
    29b8:	53 e4       	ldi	r21, 0x43	; 67
    29ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	8f 83       	std	Y+7, r24	; 0x07
    29c4:	98 87       	std	Y+8, r25	; 0x08
    29c6:	a9 87       	std	Y+9, r26	; 0x09
    29c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29ca:	6f 81       	ldd	r22, Y+7	; 0x07
    29cc:	78 85       	ldd	r23, Y+8	; 0x08
    29ce:	89 85       	ldd	r24, Y+9	; 0x09
    29d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	40 e8       	ldi	r20, 0x80	; 128
    29d8:	5f e3       	ldi	r21, 0x3F	; 63
    29da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29de:	88 23       	and	r24, r24
    29e0:	2c f4       	brge	.+10     	; 0x29ec <main+0x384>
		__ticks = 1;
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	9e 83       	std	Y+6, r25	; 0x06
    29e8:	8d 83       	std	Y+5, r24	; 0x05
    29ea:	3f c0       	rjmp	.+126    	; 0x2a6a <main+0x402>
	else if (__tmp > 65535)
    29ec:	6f 81       	ldd	r22, Y+7	; 0x07
    29ee:	78 85       	ldd	r23, Y+8	; 0x08
    29f0:	89 85       	ldd	r24, Y+9	; 0x09
    29f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f4:	20 e0       	ldi	r18, 0x00	; 0
    29f6:	3f ef       	ldi	r19, 0xFF	; 255
    29f8:	4f e7       	ldi	r20, 0x7F	; 127
    29fa:	57 e4       	ldi	r21, 0x47	; 71
    29fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a00:	18 16       	cp	r1, r24
    2a02:	4c f5       	brge	.+82     	; 0x2a56 <main+0x3ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a04:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a06:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a08:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a0c:	20 e0       	ldi	r18, 0x00	; 0
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	40 e2       	ldi	r20, 0x20	; 32
    2a12:	51 e4       	ldi	r21, 0x41	; 65
    2a14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	bc 01       	movw	r22, r24
    2a1e:	cd 01       	movw	r24, r26
    2a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	9e 83       	std	Y+6, r25	; 0x06
    2a2a:	8d 83       	std	Y+5, r24	; 0x05
    2a2c:	0f c0       	rjmp	.+30     	; 0x2a4c <main+0x3e4>
    2a2e:	89 e1       	ldi	r24, 0x19	; 25
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	9c 83       	std	Y+4, r25	; 0x04
    2a34:	8b 83       	std	Y+3, r24	; 0x03
    2a36:	8b 81       	ldd	r24, Y+3	; 0x03
    2a38:	9c 81       	ldd	r25, Y+4	; 0x04
    2a3a:	01 97       	sbiw	r24, 0x01	; 1
    2a3c:	f1 f7       	brne	.-4      	; 0x2a3a <main+0x3d2>
    2a3e:	9c 83       	std	Y+4, r25	; 0x04
    2a40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a42:	8d 81       	ldd	r24, Y+5	; 0x05
    2a44:	9e 81       	ldd	r25, Y+6	; 0x06
    2a46:	01 97       	sbiw	r24, 0x01	; 1
    2a48:	9e 83       	std	Y+6, r25	; 0x06
    2a4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a50:	00 97       	sbiw	r24, 0x00	; 0
    2a52:	69 f7       	brne	.-38     	; 0x2a2e <main+0x3c6>
    2a54:	14 c0       	rjmp	.+40     	; 0x2a7e <main+0x416>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a56:	6f 81       	ldd	r22, Y+7	; 0x07
    2a58:	78 85       	ldd	r23, Y+8	; 0x08
    2a5a:	89 85       	ldd	r24, Y+9	; 0x09
    2a5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	9e 83       	std	Y+6, r25	; 0x06
    2a68:	8d 83       	std	Y+5, r24	; 0x05
    2a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6e:	9a 83       	std	Y+2, r25	; 0x02
    2a70:	89 83       	std	Y+1, r24	; 0x01
    2a72:	89 81       	ldd	r24, Y+1	; 0x01
    2a74:	9a 81       	ldd	r25, Y+2	; 0x02
    2a76:	01 97       	sbiw	r24, 0x01	; 1
    2a78:	f1 f7       	brne	.-4      	; 0x2a76 <main+0x40e>
    2a7a:	9a 83       	std	Y+2, r25	; 0x02
    2a7c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);

		if(Flag==0)
    2a7e:	80 91 6c 00 	lds	r24, 0x006C
    2a82:	88 23       	and	r24, r24
    2a84:	09 f0       	breq	.+2      	; 0x2a88 <main+0x420>
    2a86:	0b ce       	rjmp	.-1002   	; 0x269e <main+0x36>
		{
			Second_Delay();
    2a88:	0e 94 3c 11 	call	0x2278	; 0x2278 <Second_Delay>
    2a8c:	08 ce       	rjmp	.-1008   	; 0x269e <main+0x36>

00002a8e <__prologue_saves__>:
    2a8e:	2f 92       	push	r2
    2a90:	3f 92       	push	r3
    2a92:	4f 92       	push	r4
    2a94:	5f 92       	push	r5
    2a96:	6f 92       	push	r6
    2a98:	7f 92       	push	r7
    2a9a:	8f 92       	push	r8
    2a9c:	9f 92       	push	r9
    2a9e:	af 92       	push	r10
    2aa0:	bf 92       	push	r11
    2aa2:	cf 92       	push	r12
    2aa4:	df 92       	push	r13
    2aa6:	ef 92       	push	r14
    2aa8:	ff 92       	push	r15
    2aaa:	0f 93       	push	r16
    2aac:	1f 93       	push	r17
    2aae:	cf 93       	push	r28
    2ab0:	df 93       	push	r29
    2ab2:	cd b7       	in	r28, 0x3d	; 61
    2ab4:	de b7       	in	r29, 0x3e	; 62
    2ab6:	ca 1b       	sub	r28, r26
    2ab8:	db 0b       	sbc	r29, r27
    2aba:	0f b6       	in	r0, 0x3f	; 63
    2abc:	f8 94       	cli
    2abe:	de bf       	out	0x3e, r29	; 62
    2ac0:	0f be       	out	0x3f, r0	; 63
    2ac2:	cd bf       	out	0x3d, r28	; 61
    2ac4:	09 94       	ijmp

00002ac6 <__epilogue_restores__>:
    2ac6:	2a 88       	ldd	r2, Y+18	; 0x12
    2ac8:	39 88       	ldd	r3, Y+17	; 0x11
    2aca:	48 88       	ldd	r4, Y+16	; 0x10
    2acc:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ace:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ad0:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ad2:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ad4:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ad6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ad8:	b9 84       	ldd	r11, Y+9	; 0x09
    2ada:	c8 84       	ldd	r12, Y+8	; 0x08
    2adc:	df 80       	ldd	r13, Y+7	; 0x07
    2ade:	ee 80       	ldd	r14, Y+6	; 0x06
    2ae0:	fd 80       	ldd	r15, Y+5	; 0x05
    2ae2:	0c 81       	ldd	r16, Y+4	; 0x04
    2ae4:	1b 81       	ldd	r17, Y+3	; 0x03
    2ae6:	aa 81       	ldd	r26, Y+2	; 0x02
    2ae8:	b9 81       	ldd	r27, Y+1	; 0x01
    2aea:	ce 0f       	add	r28, r30
    2aec:	d1 1d       	adc	r29, r1
    2aee:	0f b6       	in	r0, 0x3f	; 63
    2af0:	f8 94       	cli
    2af2:	de bf       	out	0x3e, r29	; 62
    2af4:	0f be       	out	0x3f, r0	; 63
    2af6:	cd bf       	out	0x3d, r28	; 61
    2af8:	ed 01       	movw	r28, r26
    2afa:	08 95       	ret

00002afc <_exit>:
    2afc:	f8 94       	cli

00002afe <__stop_program>:
    2afe:	ff cf       	rjmp	.-2      	; 0x2afe <__stop_program>
